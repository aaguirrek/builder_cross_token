{"version":3,"file":"js/design.4353ebc4.js","mappings":"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","sources":["webpack://quant-ux/./src/views/apps/Design.vue","webpack://quant-ux/./src/canvas/controller/CollabSession.js","webpack://quant-ux/./src/canvas/analytic/AnalyticToolbar.vue","webpack://quant-ux/./src/dash/Histogram.vue","webpack://quant-ux/src/dash/Histogram.vue","webpack://quant-ux/./src/dash/Histogram.vue?aad7","webpack://quant-ux/./src/dash/Histogram.vue?88db","webpack://quant-ux/./src/canvas/analytic/AnalyticHomeMenu.vue","webpack://quant-ux/src/canvas/analytic/AnalyticHomeMenu.vue","webpack://quant-ux/./src/canvas/analytic/AnalyticHomeMenu.vue?7f5d","webpack://quant-ux/./src/canvas/analytic/AnalyticHomeMenu.vue?c857","webpack://quant-ux/./src/canvas/analytic/AnalyticViewModeButton.vue","webpack://quant-ux/src/canvas/analytic/AnalyticViewModeButton.vue","webpack://quant-ux/./src/canvas/analytic/AnalyticViewModeButton.vue?b366","webpack://quant-ux/./src/canvas/analytic/AnalyticViewModeButton.vue?5f48","webpack://quant-ux/./src/canvas/analytic/AnalyticToolbarRender.vue","webpack://quant-ux/./src/canvas/analytic/SessionList.vue","webpack://quant-ux/src/canvas/analytic/SessionList.vue","webpack://quant-ux/./src/canvas/analytic/SessionList.vue?5242","webpack://quant-ux/./src/canvas/analytic/SessionList.vue?8e4a","webpack://quant-ux/src/canvas/analytic/AnalyticToolbarRender.vue","webpack://quant-ux/./src/canvas/analytic/AnalyticToolbarRender.vue?9cc1","webpack://quant-ux/./src/canvas/analytic/AnalyticToolbarRender.vue?068f","webpack://quant-ux/src/canvas/analytic/AnalyticToolbar.vue","webpack://quant-ux/./src/canvas/analytic/AnalyticToolbar.vue?901b","webpack://quant-ux/./src/canvas/analytic/AnalyticToolbar.vue?4364","webpack://quant-ux/./src/canvas/analytic/AnalyticCanvas.vue","webpack://quant-ux/./src/canvas/analytic/UserJourney.vue","webpack://quant-ux/src/canvas/analytic/UserJourney.vue","webpack://quant-ux/./src/canvas/analytic/UserJourney.vue?09c9","webpack://quant-ux/./src/canvas/analytic/UserJourney.vue?4b56","webpack://quant-ux/./src/canvas/analytic/DropOff.vue","webpack://quant-ux/src/canvas/analytic/DropOff.vue","webpack://quant-ux/./src/canvas/analytic/DropOff.vue?74fe","webpack://quant-ux/./src/canvas/analytic/DropOff.vue?6300","webpack://quant-ux/./src/canvas/analytic/DataProcessing.vue","webpack://quant-ux/src/canvas/analytic/DataProcessing.vue","webpack://quant-ux/./src/canvas/analytic/DataProcessing.vue?10bf","webpack://quant-ux/./src/canvas/analytic/DataProcessing.vue?9f97","webpack://quant-ux/src/canvas/analytic/AnalyticCanvas.vue","webpack://quant-ux/./src/canvas/analytic/AnalyticCanvas.vue?b470","webpack://quant-ux/./src/canvas/analytic/AnalyticCanvas.vue?9564","webpack://quant-ux/./src/canvas/analytic/AnalyticController.js","webpack://quant-ux/src/views/apps/Design.vue","webpack://quant-ux/./src/views/apps/Design.vue?cb86","webpack://quant-ux/./src/views/apps/Design.vue?ec28","webpack://quant-ux/./src/views/apps/Share.vue","webpack://quant-ux/./src/canvas/share/ShareCanvas.vue","webpack://quant-ux/src/canvas/share/ShareCanvas.vue","webpack://quant-ux/./src/canvas/share/ShareCanvas.vue?c467","webpack://quant-ux/./src/canvas/share/ShareCanvas.vue?93aa","webpack://quant-ux/./src/canvas/share/ShareController.js","webpack://quant-ux/src/views/apps/Share.vue","webpack://quant-ux/./src/views/apps/Share.vue?1f61","webpack://quant-ux/./src/views/apps/Share.vue?a679"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"MatcCanvasPage\",attrs:{\"id\":\"CanvasNode\"},on:{\"wheel\":_vm.onMouseWheel}},[(_vm.selectedViewMode === 'Design')?[_c('DesignToolbar',{ref:\"toolbar\",attrs:{\"pub\":_vm.pub},on:{\"viewModeChange\":_vm.onVieModeChange}}),_c('DesignCanvas',{ref:\"canvas\",attrs:{\"viewport\":_vm.viewport},on:{\"viewport\":_vm.onViewPortChange}})]:_vm._e(),(_vm.selectedViewMode === 'Heatmap')?[_c('AnalyticToolbar',{ref:\"toolbar\",on:{\"viewModeChange\":_vm.onVieModeChange}}),_c('AnalyticCanvas',{ref:\"canvas\",attrs:{\"viewport\":_vm.viewport},on:{\"viewport\":_vm.onViewPortChange}})]:_vm._e()],2)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import Logger from '../../core/Logger'\nimport Services from '../../services/Services'\n\nexport default class CollabSession {\n\n  constructor (user) {\n    this.user = user\n    this.collabUsers = []\n  }\n\n  initWebsocket(model, canvas, controller, toolbar) {\n    Logger.log(3, \"CollabSession.initWebsocket()\", \"enter\");\n    try {\n      let user = this.user\n      let websocket = Services.getWebSocketService(model.id, user.token, user)\n      if (websocket) {\n        websocket.onMessage(msg => this.dispatchWebSocketMessage(canvas, controller, toolbar, user, msg))\n        websocket.init(success => {\n          if (success) {\n            this.sendHello()\n          }\n          canvas.setMouseListener(pos => {\n            this.sendMouse(pos)\n          })\n          controller.setModelChangeListener(changeEvent => {\n            this.sendChange(changeEvent)\n          })\n\n          // FIXME: all also the command stack??\n        })\n\n        this.websocket = websocket\n      } else {\n        Logger.log(1, \"CollabSession.initWebsocket()\", \"exit > No session created\");\n      }\n    } catch (err) {\n      Logger.error('CollabSession.initWebsocket()', \"Cannot init WebSocket\", err)\n    }\n  }\n\n  hasOtherUsers () {\n    let others = this.collabUsers.find(u => u.id !== this.user.id)\n    return others !== undefined\n  }\n\n\n  sendChange (changeEvent) {\n    Logger.log(1, \"CollabSession.sendChange()\", \"enter\", changeEvent);\n    /**\n     * We do not want to overload our websocket server,\n     * so we just send events if there is another user.\n     */\n    if (this.websocket && this.hasOtherUsers()) {\n      Logger.log(2, \"CollabSession.sendChange()\", \"send\", changeEvent);\n      this.websocket.send({type: 'change', changeEvent: changeEvent})\n    } else {\n      Logger.log(2, \"CollabSession.sendChange()\", \"NOT SEND\");\n    }\n  }\n\n  sendMouse (pos) {\n    /**\n     * We do not want to overload our websocket server,\n     * so we just send events if there is another user.\n     */\n    if (this.websocket && this.hasOtherUsers()) {\n      //Logger.log(-5, \"CollabSession.sendMouse()\", \"enter\");\n      this.websocket.send({type: 'mouse', pos: pos})\n    }\n  }\n\n  sendBye () {\n    Logger.log(-1, \"CollabSession.sendBye()\", \"enter\");\n    if (this.websocket) {\n      this.websocket.send({type: 'bye'})\n    }\n  }\n\n  sendHello () {\n    Logger.log(2, \"CollabSession.sendHello()\", \"enter\");\n    if (this.websocket) {\n      this.websocket.send({type: 'hello'})\n    }\n  }\n\n  sendImHere () {\n    Logger.log(2, \"CollabSession.sendImHere()\", \"enter\");\n    if (this.websocket) {\n      this.websocket.send({type: 'imhere'})\n    }\n  }\n\n  dispatchWebSocketMessage (canvas, controller, toolbar, user, msg) {\n\n    if (msg.type === 'hello') {\n        Logger.log(2, \"CollabSession.dispatchWebSocketMessage()\", \"hello\");\n        toolbar.addCollabUser(msg.user)\n        canvas.addCollabUser(msg.user)\n        this.addCollabUser(msg.user)\n        this.sendImHere()\n    }\n    if (msg.type === 'imhere') {\n      Logger.log(2, \"CollabSession.dispatchWebSocketMessage()\", \"imhere\");\n      toolbar.addCollabUser(msg.user)\n      canvas.addCollabUser(msg.user)\n      this.addCollabUser(msg.user)\n    }\n    if (msg.type === 'bye') {\n      Logger.log(2, \"CollabSession.dispatchWebSocketMessage()\", \"bye\");\n      toolbar.removeCollabUser(msg.user)\n      canvas.removeCollabUser(msg.user)\n      this.removeCollabUser(msg.user)\n    }\n    if (msg.type === 'mouse') {\n      //Logger.log(2, \"CollabSession.dispatchWebSocketMessage()\", \"mouse\");\n      canvas.setCollabMouse(msg.user, msg.pos)\n    }\n\n    if (msg.type === 'change') {\n      Logger.log(2, \"CollabSession.dispatchWebSocketMessage()\", \"change\");\n      controller.collabRecieveChanges(msg.user, msg.changeEvent)\n    }\n  }\n\n\n  addCollabUser (user) {\n    Logger.log(1, \"CollabSession.addCollabUser()\", user);\n    const found = this.collabUsers.find(u => u.id === user.id)\n    if (!found) {\n      this.collabUsers.push(user)\n    }\n  }\n\n  removeCollabUser (user) {\n    Logger.log(1, \"CollabSession.removeCollabUser()\", user);\n    this.collabUsers = this.collabUsers.filter(u => u.id !== user.id)\n  }\n\n  close () {\n    Logger.log(1, \"CollabSession.dispatchWebSocketMessage()\", \"close\");\n    if (this.websocket) {\n      this.websocket.close()\n    }\n  }\n}","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"MatcToolbar MatcAnalyticsToolbar MatcLayerListVisible\"},[_c('div',{staticClass:\"MatcToolbarLayerList MatcToolbarAnalyticList MatcToobarPropertiesSection\",style:('width:'+ _vm.layerListWidth +'px')},[_c('div',{staticClass:\"MatcToolbarLayerListCntr\",attrs:{\"data-dojo-attach-point\":\"testListCntr\"}}),_c('div',{ref:\"dndHanlde\",staticClass:\"MatcToolbarLayerListDND\",on:{\"mousedown\":function($event){$event.stopPropagation();return _vm.onResizeStart.apply(null, arguments)}}})]),_c('div',{staticClass:\"MatcToolbarTop\"},[_c('div',{staticClass:\"MatcToolbarTopHome\",style:('width:'+ _vm.layerListWidth +'px')},[_c('HomeMenu',{attrs:{\"name\":_vm.modelName},on:{\"select\":_vm.onHomeMenu}})],1),_c('div',{staticClass:\"MatcToolbarTopCntr\",style:('width:calc(100% - '+ _vm.layerListWidth +'px)')},[_c('div',{staticClass:\"MatcToolbarSection MatcToolbarTopLeft\"},[_c('div',{class:['MatcToolbarItem MatcToolbarPrimaryItem', {'MatcToolbarItemSelected': _vm.mode === 'addComment'} ],attrs:{\"data-dojo-attach-point\":\"commentBtn\"},on:{\"click\":_vm.onNewComment}},[_c('QIcon',{attrs:{\"icon\":\"Comment\"}})],1)]),_c('div',{staticClass:\"MatcToolbarTopCenterCntr\"},[_c('div',{staticClass:\"MatcToolbarSection\",attrs:{\"data-dojo-attach-point\":\"screenSection\"}},[(_vm.events)?_c('AnalyticViewModeButton',{on:{\"change\":_vm.onChangeViewMode}}):_vm._e()],1)]),_c('div',{staticClass:\"MatcToolbarNotificationSection MatcToolbarTopRight MatcToolbarSection\",attrs:{\"data-dojo-attach-point\":\"notificationSection\"}},[_c('ViewConfig',{attrs:{\"value\":_vm.canvasViewConfig,\"analytic\":true},on:{\"change\":_vm.onChangeCanvasViewConfig}}),_c('HeatmapToggleButton',{attrs:{\"value\":'Heatmap'},on:{\"change\":function($event){return _vm.$emit('viewModeChange', $event)}}}),_c('div',{staticClass:\"MatcToolbarItem\",on:{\"click\":_vm.showSharing}},[_c('div',{staticClass:\"MatcToobarPrimaryButton\"},[_vm._v(\" Share \")])])],1)])]),_c('div',{staticClass:\"MatcToobarPropertiesSection MatcToolbarSectionHidden\",attrs:{\"data-dojo-attach-point\":\"propertiesCntr\"}})])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"MatcDashHistogram\"})\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n<template>\n     <div class=\"MatcDashHistogram\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n</template>\n<script>\nimport DojoWidget from 'dojo/DojoWidget'\nimport css from 'dojo/css'\nimport Logger from 'common/Logger'\nimport _Color from 'common/_Color'\nimport _Tooltip from 'common/_Tooltip'\nimport DomBuilder from 'common/DomBuilder'\nimport DataFrame from 'common/DataFrame'\n\nexport default {\n    name: 'Histogram',\n    mixins:[_Color, _Tooltip, DojoWidget],\n    data: function () {\n        return {\n            x_prefix: \"\"\n        }\n    },\n    components: {},\n    methods: {\n        postCreate(){\n\t\t\tthis.log = new Logger(\"Histogram\");\t\t\n\t\t\tif(this.counts){\n\t\t\t\tvar values = this.counts.split(\",\");\n\t\t\t\tvar df = new DataFrame(values);\n\t\t\t\tvar hist = df.hist(null, this.bins);\n\t\t\t\tthis.setValue(hist,df.mean());\n\t\t\t}\n\t\t},\t\t\t\t\n\t\t\n\t\tsetPopoverFct(f){\n\t\t\tthis.popoverLabelFct = f;\n\t\t},\n\t\t\n\t\tsetLabel(l){\n\t\t\tthis.label.innerHTML = l;\n\t\t},\n\t\t\n\t\tsetMaxMin(fct){\n\t\t\tthis.minMaxFct = fct;\n\t\t},\n\t\t\n\t\tsetFormTo(fct){\n\t\t\tthis.toFromFct = fct;\n\t\t},\n\t\t\n\t\tonHover(fct){\n\t\t\tthis.hoverFCT = fct;\n\t\t},\n\t\t\n\t\tsetValue(hist, mean){\n\t\t\t\n\t\t\tvar bins = hist.size();\n\t\t\tvar max = hist.max(\"count\");\n\t\t\tvar min = hist.min(\"count\");\n\t\t\tvar from = hist.min(\"from\");\n\t\t\tvar to = hist.max(\"to\");\n\t\t\tvar width  = 100/ (bins *2 -1);\n\t\t\tvar v_mean = (mean - from) / (to - from) ;\n\t\t\t\n\t\t\n\t\t\tvar db = new DomBuilder();\n\t\t\tvar cntr = db.div(\"MatcDashHistogramCntr\").build();\n\t\t\t\n\t\t\tvar me = this;\n\t\t\thist.foreach(function(row, i){\t\n\t\t\t\tvar v = row.count;\n\t\t\t\tvar bar = db.div(\"MatcDashHistogramBar\").build(cntr);\n\t\t\t\tbar.style.height = Math.max(1, v*100 / max) + \"%\";\n\t\t\t\tbar.style.width = width + \"%\";\n\t\t\t\tbar.style.left = width*(i*2) + \"%\";\n\t\t\t\t\n\t\t\t\tif(me.hoverFCT){\n\t\t\t\t\tvar tt = me.hoverFCT(row);\n\t\t\t\t\tcss.add(bar, \"MatcDashHistogramBarHover\");\n\t\t\t\t\tme.addTooltip(bar, tt);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tif(this.toFromFct){\n\t\t\t\tto = this.toFromFct(to);\n\t\t\t\tfrom = this.toFromFct(from);\n\t\t\t}\n\t\t\t\n\t\t\tdb.span(\"MatcDashHistogramLabelMax MatcDashHistogramLabel\", max).build(cntr);\n\t\t\tdb.span(\"MatcDashHistogramLabelMin MatcDashHistogramLabel\", min).build(cntr);\n\t\t\tdb.span(\"MatcDashHistogramLabelFrom MatcDashHistogramLabel\", from + this.x_prefix).build(cntr);\n\t\t\tdb.span(\"MatcDashHistogramLabelTo MatcDashHistogramLabel\", to + this.x_prefix).build(cntr);\n\t\t\t\n\t\t\tthis.domNode.innerHTML == \"\";\n\t\t\tthis.domNode.appendChild(cntr);\n\t\t\t\n\t\t\t\n\n\t\t\t/**\n\t\t\t * Mean of passed\n\t\t\t */\n\t\t\tif(mean != null && mean != undefined){\n\t\t\t\tlet lblCntr = db.div(\"MatcDashHistogramLabelMean\").build(cntr);\n\t\t\t\tlblCntr.style.left = v_mean*100 + \"%\";\n\t\t\t\tif(this.toFromFct){\n\t\t\t\t\tmean = this.toFromFct(mean);\n\t\t\t\t} \n\t\t\t\tdb.span(\"MatcDashHistogramLabel MatcHorizontalMiddle\", mean + this.x_prefix).build(lblCntr);\n\t\t\t\tlet bar = db.div(\"MatcDashHistogramBarMean\").build(cntr);\n\t\t\t\tbar.style.left = v_mean*100 + \"%\";\n\t\t\t}\n\t\t\n\t\t},\n    }, \n    mounted () {\n    }\n}\n</script>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Histogram.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Histogram.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Histogram.vue?vue&type=template&id=a430b102\"\nimport script from \"./Histogram.vue?vue&type=script&lang=js\"\nexport * from \"./Histogram.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"MatcToolbarArrowDropDown MatcToolbarDropDownButton MatcToobarHomeSection MatcToobarHomeSectionBlueX\"},[_c('div',{ref:\"button\",staticClass:\"MatcToolbarItem MatcToolbarPrimaryItem\",attrs:{\"type\":\"button\"}},[_c('img',{attrs:{\"src\":require(\"../../style/img/QUXLogoWhite.svg\")}}),_c('span',{staticClass:\"MatcToobarHomeSectionAppNameLabel\"},[_vm._v(_vm._s(_vm.name))]),_c('span',{staticClass:\"caret\"})]),_c('div',{staticClass:\"MatcToolbarPopUp MatcToolbarDropDownButtonPopup\",attrs:{\"role\":\"menu\",\"data-dojo-attach-point\":\"popup\"},on:{\"mousedown\":function($event){$event.stopPropagation();}}},[_c('div',{staticClass:\"MatcToolbarPopUpWrapper\"},[_c('ul',{attrs:{\"role\":\"menu\"}},_vm._l((_vm.items),function(i){return _c('li',{key:i.value,staticClass:\"MatcToolbarMenuItem\",class:i.css,on:{\"click\":function($event){$event.stopPropagation();return _vm.onSelect(i, $event)}}},[_c('label',{staticClass:\"MatcToolbarPopUpLabel\"},[_vm._v(_vm._s(i.label))])])}),0)]),_vm._m(0)])])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"MatcToolbarPopUpArrowCntr\"},[_c('div',{staticClass:\"MatcToolbarPopUpArrow\"})])\n}]\n\nexport { render, staticRenderFns }","\n<template>\n    <div class=\" MatcToolbarArrowDropDown MatcToolbarDropDownButton MatcToobarHomeSection MatcToobarHomeSectionBlueX\">\n\t\t<div class=\"MatcToolbarItem MatcToolbarPrimaryItem\" type=\"button\" ref=\"button\">\n\t\t\t<img src=\"../../style/img/QUXLogoWhite.svg\">\n            <span class=\"MatcToobarHomeSectionAppNameLabel\" >{{name}}</span>\n            <span class=\"caret\"></span>\n\t\t</div>\n        <div class=\"MatcToolbarPopUp MatcToolbarDropDownButtonPopup\" role=\"menu\" data-dojo-attach-point=\"popup\" @mousedown.stop>\n            <div class=\"MatcToolbarPopUpWrapper\">\n                <ul class=\"\" role=\"menu\">\n                    <li v-for=\"i in items\" :key=\"i.value\" @click.stop=\"onSelect(i, $event)\" :class=\"i.css\" class=\"MatcToolbarMenuItem\">\n                    \n                        <label class=\"MatcToolbarPopUpLabel\">{{i.label}}</label>\n\n                    </li>\n                  \n\t\t\t    </ul>\n            </div>\n            <div class=\"MatcToolbarPopUpArrowCntr\">\n                <div class=\"MatcToolbarPopUpArrow\">\n                </div>\n            </div>\n        </div>\n    </div>\n\n</template>\n<script>\nimport DojoWidget from 'dojo/DojoWidget'\nimport css from 'dojo/css'\nimport Util from 'core/Util'\n//import QIcon from 'page/QIcon'\nimport _DropDown from '../toolbar/components/_DropDown'\n\n\nexport default {\n    name: 'CreateBasicButton',\n    mixins:[Util, DojoWidget, _DropDown],\n    props:['name'],\n    data: function () {\n        return {\n            selectedTool: null,\n            tools: [               \n                {value: 'onExit', icon: '', label: this.getNLS('toolbar.menu.exit')},\n                {value: 3, css:'MatcToolbarPopUpLine'},\n                {value: 'onShowSettings', icon: '', label: this.getNLS('toolbar.menu.settings')},       \n                {value: 'showHelp', icon: '', label: this.getNLS('toolbar.menu.help')},         \n            ]\n        }\n    },\n    computed: {\n        items () {       \n            return this.tools\n        }\n    },\n    components: {\n        //'QIcon':QIcon\n    },\n    methods: {\n\n    \n        onSelect (t, e) {        \n            this.$emit('select', t, e)\n        },\n\n\t\tonHide (){   \n\t\t\tcss.remove(this.domNode,\"MatcToolbarItemActive\");\n            this.selectedTool = null\n\t\t},\n\n\t\tasync init (){\n\t\t\t\n\t\t},\n\n    },\n    mounted () {\n    }\n}\n</script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticHomeMenu.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticHomeMenu.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./AnalyticHomeMenu.vue?vue&type=template&id=5e63a456\"\nimport script from \"./AnalyticHomeMenu.vue?vue&type=script&lang=js\"\nexport * from \"./AnalyticHomeMenu.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{class:['MatcToolbarNavButton', {'MatcToolbarEditModeAnimated': _vm.animated}]},[_c('div',{ref:\"cntr\",staticClass:\"MatcToolbarEditModeCntr\"},[_vm._l((_vm.modes),function(m,i){return _c('a',{key:m.value,ref:\"btns\",refInFor:true,class:['MatcToolbarItem vommondToolTipCntr', { 'MatcToolbarEditModeActive': m.value === _vm.selected }],on:{\"click\":function($event){return _vm.setSelected(m, i)}}},[_c('span',{ref:\"icons\",refInFor:true,class:'MatcToolbarResponsiveIcon ' + m.icon}),_c('span',{staticClass:\"MatcToolbarResponsiveLabel\"},[_vm._v(\" \"+_vm._s(m.label)+\" \")])])}),_c('div',{staticClass:\"MatcToolbarEditModeHighlight\",style:({ 'width': _vm.highlightWidth + 'px', 'left': _vm.highlightX + 'px' })})],2)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n<template>\n   <div :class=\"['MatcToolbarNavButton', {'MatcToolbarEditModeAnimated': animated}]\">\n\n        <div class=\"MatcToolbarEditModeCntr\" ref=\"cntr\">\n           \n            <a v-for=\"(m, i) in modes\" @click=\"setSelected(m, i)\" ref=\"btns\" :key=\"m.value\"\n                :class=\"['MatcToolbarItem vommondToolTipCntr', { 'MatcToolbarEditModeActive': m.value === selected }]\">\n                <span :class=\"'MatcToolbarResponsiveIcon ' + m.icon\" ref=\"icons\"/>\n                <span class=\"MatcToolbarResponsiveLabel\">\n                    {{m.label}}\n                </span>\n            </a>\n            <div class=\"MatcToolbarEditModeHighlight\" :style=\"{ 'width': highlightWidth + 'px', 'left': highlightX + 'px' }\">\n            </div>\n        </div>\n\n    </div>\n</template>\n<style lang=\"scss\">\n    @import '../../style/toolbar/toolbar_nav_button.scss';\n</style>\n<script>\n\nimport Logger from \"common/Logger\";\nimport _Tooltip from 'common/_Tooltip'\nimport NLS from 'common/NLS'\nimport domGeom from 'dojo/domGeom'\n\nexport default {\n    name: \"EditModeButton\",\n    mixins: [_Tooltip, NLS],\n    props: ['value'],\n    data: function () {\n        return {\n            animated:false,\n            highlightWidth: 0,\n            highlightX: 0,\n            selected: 'showClickHeatMap',\n            modes: [\n                { label: 'Heatmaps', value: \"showClickHeatMap\", icon: \"mdi mdi-cursor-default\", tooltip: 'tooltip.analyics-heatmaps'},\n                { label: 'User Journey', value: \"showUserJourney\", icon: \"mdi mdi-vector-polyline\" , tooltip: 'tooltip.analyics-user'},\n                { label: 'Tasks & Drop Off', value: \"showDropOff\", icon: \"mdi mdi-chart-timeline-variant-shimmer\", tooltip: 'tooltip.analyics-task' },\n                { label: 'Screens', value: \"showScreenMode\", icon: \"mdi mdi-chart-timeline-variant-shimmer\", tooltip: 'tooltip.analyics-screen' },\n            ]\n        };\n    },\n    computed: {\n        hasData() {\n            if (this.value) {\n                return this.value.hasDataView\n            }\n            return true\n        }\n    },\n    components: {},\n    methods: {\n        setSelected(m, i) {\n            this.log.log(1, 'setSelected', 'enter', m)\n            this.selected = m.value\n            this.setHighlight(i)\n            this.$emit(\"change\", m.value)\n        },\n    \n        setHighlight(i) {\n            const node = this.$refs.btns[i]\n            const pos = domGeom.position(node)\n            const cPos = domGeom.position(this.$refs.cntr)\n            this.highlightWidth = pos.w\n            this.highlightX = pos.x - cPos.x - 1\n        },\n        nextView() {\n        }\n    },\n    watch: {\n        value(v) {\n            this.log.log(2, 'watch(value)', 'enter', v)\n            this.value = v\n        }\n    },\n    async mounted() {\n        this.log = new Logger(\"AnalyticViewModeButton\")\n        this.setHighlight(0)\n        setTimeout(() => {\n            this.modes.forEach((mode, i) => {\n                const icon = this.$refs.btns[i]\n                this.addTooltip(icon, this.getNLS(mode.tooltip))\n            })\n        }, 100)\n\n \n        setTimeout(() => this.animated = true, 500)\n    }\n};\n</script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticViewModeButton.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticViewModeButton.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./AnalyticViewModeButton.vue?vue&type=template&id=34f0bddb\"\nimport script from \"./AnalyticViewModeButton.vue?vue&type=script&lang=js\"\nexport * from \"./AnalyticViewModeButton.vue?vue&type=script&lang=js\"\nimport style0 from \"./AnalyticViewModeButton.vue?vue&type=style&index=0&id=34f0bddb&prod&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"MatcToolbar MatcAnalyticsToolbar MatcLayerListVisible\"})\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"MatcToolbarSessionCntr MatcScrollContainer\"},[_c('div',{staticClass:\"MatcToolbarSessionList\"},_vm._l((_vm.sortedSession),function(s){return _c('div',{key:s.id,staticClass:\"MatcToobarRow MatcToolbarIconButton\",on:{\"click\":function($event){return _vm.toggleSession(s)},\"mouseout\":function($event){return _vm.onMouseOut(s, $event)},\"dblclick\":function($event){return _vm.onEdit(s)},\"mouseover\":function($event){return _vm.onMouseOver(s, $event)}}},[_c('CheckBox',{attrs:{\"value\":_vm.selected[s.session]}}),_c('div',{staticClass:\"MatcToolbarSessionLabels\"},[(s.session === _vm.selectedSession)?_c('input',{ref:\"sessionInput\",refInFor:true,staticClass:\"MatcIgnoreOnKeyPress\",domProps:{\"value\":s.label},on:{\"change\":function($event){return _vm.onChangeSessionLabel(s, $event)},\"click\":function($event){$event.stopPropagation();}}}):_c('span',[_vm._v(_vm._s(s.label))]),_c('div',{staticClass:\"MatcToolbarSessionListDetails\"},[_c('div',[_vm._v(_vm._s(s.date))]),_c('div',[_vm._v(_vm._s(s.duration)+\"s\")])])]),_c('div',{staticClass:\"MatcToobarRowRightIcon\"},[_c('QIcon',{attrs:{\"icon\":\"PlayVideo\"},on:{\"click\":function($event){$event.stopPropagation();return _vm.onPlay(s, $event)}}})],1)],1)}),0)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n<template>\n  <div class=\"MatcToolbarSessionCntr MatcScrollContainer\">\n    <div class=\"MatcToolbarSessionList \">\n      <div v-for=\"s in sortedSession\" :key=\"s.id\" class=\"MatcToobarRow MatcToolbarIconButton\" \n        @click=\"toggleSession(s)\" \n        @mouseout=\"onMouseOut(s, $event)\"\n        @dblclick=\"onEdit(s)\"\n        @mouseover=\"onMouseOver(s, $event)\">\n        <CheckBox :value=\"selected[s.session]\"></CheckBox>\n        <div class=\"MatcToolbarSessionLabels\">\n          <input \n            v-if=\"s.session === selectedSession\" \n            class=\"MatcIgnoreOnKeyPress\"\n            :value=\"s.label\" \n            @change=\"onChangeSessionLabel(s, $event)\" \n            ref=\"sessionInput\" \n            @click.stop>\n          <span v-else>{{s.label}}</span>\n          <div class=\"MatcToolbarSessionListDetails\">\n            <div>{{s.date}}</div>\n            <div>{{s.duration}}s</div>\n          </div>\n        </div>\n        <div class=\"MatcToobarRowRightIcon\">\n          <QIcon icon=\"PlayVideo\" @click.stop=\"onPlay(s, $event)\"/>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</template>\n  \n\n<style lang=\"scss\">\n@import \"../../style/components/session_list.scss\";\n</style>\n  \n<script>\nimport DojoWidget from \"dojo/DojoWidget\";\nimport Logger from \"common/Logger\";\nimport CheckBox from 'common/CheckBox'\nimport QIcon from 'page/QIcon'\n\nexport default {\n  name: \"SessionList\",\n  props: [],\n  mixins: [DojoWidget],\n  data: function () {\n    return {\n      sessions: [],\n      selected: {},\n      order: 'date',\n      selectedSession: ''\n    };\n  },\n  components: {\n    'CheckBox': CheckBox,\n    'QIcon': QIcon\n  },\n  computed: {\n    sortedSession() {\n      const order = this.order\n      return this.sessions.toSorted((a, b) => {\n        if (order === 'duration') {\n          return b.duration - a.duration\n        }\n        if (order === 'date') {\n          return a.start - b.start\n        }\n        if (order === 'weirdness') {\n          return b.weirdness - a.weirdness\n        }\n        return b.size - a.size\n      })\n    }\n  },\n  methods: {\n    onChangeSessionLabel (s, e) {\n      const label = e.target.value.trim()\n      s.label = label\n      this.selectedSession = false\n      this.emit(\"label\", s.session, label)\n    },\n    onEdit (s) {\n      this.selectedSession = s.session\n      setTimeout(() => {\n        const input = this.$refs.sessionInput[0]\n        if (input) {\n          input.focus()\n          input.select()\n        }\n      }, 100)\n    },\n    onPlay(s,e) {\n      this.emit(\"play\", s, e)\n    },\n    onMouseOver (s) {\n      this.emit(\"hover\",s)\n    },\n    onMouseOut () {\n      this.emit(\"hover\", null)\n    },\n    onChange () {\n      this.emit(\"select\", this.selected)\n    },\n    getSelected () {\n      return this.selected\n    },\n    toggleSession (s) {\n      this.$set(this.selected, s.session, !this.selected[s.session])\n      this.$forceUpdate()\n      this.onChange()\n    },\n    setSessions(s) {\n      this.sessions = s\n      this.sessions.forEach(s => {\n          this.selected[s.session] = true\n      })\n      this.onChange()\n    },\n    setOrder (o) {\n      this.order = o\n    },\n    setAllSelected(value) {\n      this.sessions.forEach(s => {\n          this.selected[s.session] = value\n      })\n      this.$forceUpdate()\n      //this.onChange()\n    }\n  },\n  mounted() {\n    this.logger = new Logger(\"SessionList\");\n    this.logger.log(2, \"constructor\", \"entry\");\n  },\n};\n</script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./SessionList.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./SessionList.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./SessionList.vue?vue&type=template&id=24d29e6f\"\nimport script from \"./SessionList.vue?vue&type=script&lang=js\"\nexport * from \"./SessionList.vue?vue&type=script&lang=js\"\nimport style0 from \"./SessionList.vue?vue&type=style&index=0&id=24d29e6f&prod&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","\n<template>\n    <div class=\"MatcToolbar MatcAnalyticsToolbar MatcLayerListVisible\">\n    </div>\n</template>\n<script>\n\nimport css from 'dojo/css'\nimport lang from 'dojo/_base/lang'\n\nimport on from 'dojo/on'\nimport touch from 'dojo/touch'\nimport hash from 'dojo/hash'\n\nimport DomBuilder from 'common/DomBuilder'\nimport ScrollContainer from 'common/ScrollContainer'\nimport Dialog from 'common/Dialog'\nimport CheckBox from 'common/CheckBox'\nimport RadioBoxList from 'common/RadioBoxList'\nimport Form from 'common/Form'\nimport ToolbarDropDownButton from 'canvas/toolbar/components/ToolbarDropDownButton'\nimport ToolbarColor from 'canvas/toolbar/components/ToolbarColor'\nimport Ring from 'common/Ring'\nimport Analytics from 'dash/Analytics'\nimport VideoPlayer from 'views/apps/test/VideoPlayer'\nimport DataFrame from 'common/DataFrame'\nimport SessionList from './SessionList'\n\nexport default {\n    name: 'AnalyticToolbarRender',\n    mixins: [],\n    data: function () {\n        return {\n            hasSelectAll: false,\n            hasSessionDetails: true\n        }\n    },\n    components: {\n    },\n    methods: {\n\n\n        renderToolbar() {\n            this.logger.log(3, \"renderToolbar\", \"enter\");\n            if (this.isRendered) {\n                return\n            }\n            this.isRendered = true\n            this.logger.log(3, \"renderToolbar\", \"exit\");\n        },\n\n        render() {\n            this.logger.log(3, \"render\", \"entry\");\n\n            this.properties = document.createElement(\"div\");\n            css.add(this.properties, \"MatcToobarPropertiesSectionCntr\")\n\n            this.sections = [];\n\n            this.propertiesStates = {};\n\n            this.renderScreenProperties();\n\n            this.renderScreenModes();\n\n            this.renderWidgetProperties();\n\n            this.renderSessionProperties();\n\n            this.renderSessionSection();\n\n            this.renderDropOffProperties()\n\n            this.renderHeatMapProperties();\n\n            this.renderGestureProperties();\n\n            this.propertiesCntr.appendChild(this.properties);\n\n\n            /**\n             * Now assemble final ui. hook in properties panel and make toolSection Visible!\n             */\n            this.scroller = this.$new(ScrollContainer);\n            this.scroller.placeAt(this.propertiesCntr);\n            this.scroller.wrap(this.properties, 40);\n\n            this.hideAllSections();\n\n            this.showHeatMapProperties();\n            this.showClickHeatMap()\n\n            this.logger.log(3, \"render\", \"exit\");\n        },\n\n\n\n\n        renderScreenProperties() {\n            this.logger.log(3, \"renderScreenProperties\", \"entry\");\n\n\n            var db = new DomBuilder();\n            /**\n             * Name\n             */\n            this.screenNameDiv = this.createSection(\"Screen\", this.properties);\n            var content = this.createContent(this.screenNameDiv);\n\n            this.screenName = this.createInput(content, \"Screen Name\");\n            this.screenName.readOnly = true;\n\n            var ringCntr = db.div(\"MatcCenter\").build(content);\n\n            /**\n             * Views total\n             */\n            var cntr = db.div(\"MatcMarginBottom\").build(ringCntr)\n            this.screenTestRing = this.createRing(\"Test Coverage\", \"analytics.canvas.kpi.coverage\");\n            this.screenTestRing.placeAt(cntr);\n\n            /**\n             * Dwell\n             */\n            cntr = db.div(\"MatcMarginBottom\").build(ringCntr)\n            this.screenDwellRing = this.createRing(\"Dwell Time\", \"analytics.canvas.kpi.dwell\");\n            this.screenDwellRing.placeAt(cntr);\n\n            /**\n             * Views total\n             */\n            cntr = db.div(\"MatcMarginBottom\").build(ringCntr)\n            this.screenTotalViewRing = this.createRing(\"Screen Views\", \"analytics.canvas.kpi.screen-views\");\n            this.screenTotalViewRing.placeAt(cntr);\n\n\n            /**\n             * CLicks\n             */\n            cntr = db.div(\"MatcMarginBottom\").build(ringCntr)\n            this.screenClickRing = this.createRing(\"Screen Clicks\", \"analytics.canvas.kpi.screen-clicks\");\n            this.screenClickRing.placeAt(cntr);\n\n\n            /**\n             * CLicks\n             */\n            cntr = db.div(\"MatcMarginBottom\").build(ringCntr)\n            this.screenWidgetClickRing = this.createRing(\"Widget Clicks\", \"analytics.canvas.kpi.screen-widget-clicks\");\n            this.screenWidgetClickRing.placeAt(cntr);\n\n        },\n\n\n        renderWidgetProperties() {\n            this.logger.log(3, \"renderWidgetProperties\", \"entry\");\n\n            var db = new DomBuilder();\n\n            /**\n             * Name\n             */\n            this.widgetNameDiv = this.createSection(\"Widget \", this.properties);\n            var content = this.createContent(this.widgetNameDiv);\n            this.widgetName = this.createInput(content, \"Screen\");\n            this.widgetName.readOnly = true;\n            var ringCntr = db.div(\"MatcCenter\").build(content);\n\n            /**\n             * CLicks\n             */\n            let cntr = db.div(\"MatcMarginBottom\").build(ringCntr)\n            this.widgetClickRing = this.createRing(\"Widget Clicks\", \"analytics.canvas.kpi.clicks\");\n            this.widgetClickRing.placeAt(cntr);\n\n\n            /**\n             * First Clicks\n             */\n            cntr = db.div(\"MatcMarginBottom\").build(ringCntr)\n            this.widgetFirstClickRing = this.createRing(\"First Clicks\", \"analytics.canvas.kpi.first-clicks\");\n            this.widgetFirstClickRing.placeAt(cntr);\n\n            /**\n             * Discovery\n             */\n            cntr = db.div(\"MatcMarginBottom\").build(ringCntr);\n            var nodes = this.createBigNumber(db, cntr, \"Time before Click\", \"analytics.canvas.kpi.before-click\");\n            this.widgetDiscoverLabel = nodes[0];\n            this.widgetDiscoverSTDLabel = nodes[1];\n\n        },\n\n\n        renderHeatMapProperties() {\n            this.logger.log(1, \"renderHeatMapProperties\", \"entry\");\n\n            var db = new DomBuilder();\n\n            this.heatmapDiv = this.createSection(\"Show\", this.properties);\n\n            let content = this.createContent(this.heatmapDiv);\n\n            var row = db.div(\"MatcToobarRow MatcMarginBottom\").build(content);\n\n            var list = this.$new(RadioBoxList);\n            css.add(list.domNode, \"MatcToolbarRadioList\");\n            list.setOptions([\n                { \"value\": -1, label: \"All Clicks\" },\n                { \"value\": 1, label: \"First Click\" },\n                { \"value\": 3, label: \"First three Clicks\" },\n                { \"value\": \"missedClicks\", label: \"Missed Clicks\" },\n                { \"value\": \"mouse\", label: \"Mouse\" }\n            ]);\n            list.placeAt(db.div().build(row));\n            this.own(list.on(\"change\", lang.hitch(this, \"showFirstClickHeatMap\")));\n\n\n            this.heatmapLabel = db.div('MatcToobarRow').label('MatcToolbarLabel MatcToolbarHelpSection').build(content)\n\n            this.heatmapClickList = list;\n            this.setHeatMapLabel(-1)\n        },\n\n        setHeatMapLabel(i) {\n            let lbl = ''\n            if (i === -1) {\n                lbl = this.getNLS('analytics.canvas.heatamp.hintAll')\n            }\n            if (i === 1) {\n                lbl = this.getNLS('analytics.canvas.heatamp.hintFirst')\n            }\n            if (i === 3) {\n                lbl = this.getNLS('analytics.canvas.heatamp.hintFirstThree')\n            }\n            if (i === 'missedClicks') {\n                lbl = this.getNLS('analytics.canvas.heatamp.hintMissed')\n            }\n\n            if (i === 'mouse') {\n                lbl = this.getNLS('analytics.canvas.heatamp.hintMouse')\n            }\n            this.heatmapLabel.textContent = lbl\n        },\n\n        renderDropOffProperties() {\n            this.logger.log(2, \"renderSessionProperties\", \"entry\");\n\n            var db = new DomBuilder();\n\n\n            this.dropOffConfigDiv = this.createSection(\"Show\", this.properties);\n            var content = this.createContent(this.dropOffConfigDiv);\n            var row = db.div(\"MatcToobarRow MatcToolbarRadioList\").build(content);\n\n            this.dropOffTimeCheckBox = this.$new(RadioBoxList, { maxLabelLength: 20 });\n            this.dropOffTimeCheckBox.setOptions([\n                { value: false, label: 'Drop Off' },\n                { value: true, label: 'Time' }\n            ]);\n            this.dropOffTimeCheckBox.setValue(false);\n            this.dropOffTimeCheckBox.placeAt(row);\n            this.own(on(this.dropOffTimeCheckBox, \"change\", lang.hitch(this, \"selectDropOffTask\")));\n\n\n            this.dropOffOptionsDiv = this.createSection(\"Tasks\", this.properties);\n            content = this.createContent(this.dropOffOptionsDiv);\n            row = db.div(\"MatcToobarRow \").build(content);\n\n\n            this.dropOffTaskBtn = this.$new(RadioBoxList, { maxLabelLength: 20 });\n\n            let tasks = []\n\n            if (this.testSettings.tasks && this.testSettings.tasks.length >= 1) {\n                tasks = this.testSettings.tasks.map((task, i) => {\n                    return { value: i, label: task.name }\n                })\n            } else {\n                this.dropOffOptionsLabel = db.span(\n                    \"MatcToolbarLabel MatcToolbarHelpSection\",\n                    this.getNLS(\"analytics.canvas.dropoff.hintNoTasksDefined\")\n                ).build(row)\n            }\n\n            this.dropOffTaskBtn.setOptions(tasks);\n            this.dropOffTaskBtn.setValue(0);\n            css.add(this.dropOffTaskBtn.domNode, \"MatcToolbarRadioList\");\n            this.dropOffTaskBtn.placeAt(row);\n            this.own(on(this.dropOffTaskBtn, \"change\", lang.hitch(this, \"selectDropOffTask\")));\n\n            this.dropOffChartDivCntr = this.createSection(\"Insights\", this.properties);\n            content = this.createContent(this.dropOffChartDivCntr);\n\n            var ringCntr = db.div(\"MatcCenter \").build(content);\n            this.dropoffTaskSuccess = this.createRing(\"Success\", \"analytics.canvas.kpi.first-clicks\");\n            css.add(this.dropoffTaskSuccess.domNode, 'MatcMarginBottom')\n            this.dropoffTaskSuccess.placeAt(ringCntr);\n\n\n            let cntr = db.div(\"MatcMarginBottom\").build(ringCntr);\n            var nodes = this.createBigNumber(db, cntr, \"Duration\", \"analytics.canvas.kpi.before-click\");\n            this.dropOffTaskDuration = nodes[0];\n            this.dropOffTaskDurationLabel = nodes[1];\n\n\n            cntr = db.div(\"MatcMarginBottom\").build(ringCntr);\n            nodes = this.createBigNumber(db, cntr, \"Interactions\", \"analytics.canvas.kpi.before-click\");\n            this.dropOffInteractions = nodes[0];\n            this.dropOffInteractionsLabel = nodes[1];\n\n\n            this.dropOffFunnelDivCntr = this.createSection(\"Drop Off\", this.properties);\n            content = this.createContent(this.dropOffFunnelDivCntr);\n\n            this.dropOffChartDiv = db.div('MatcToolbarDropOffChart', '').build(content)\n        },\n\n\n        renderSessionProperties() {\n            this.logger.log(1, \"renderSessionProperties\", \"entry\");\n\n            const db = new DomBuilder();\n\n            this.sessionOptionsDiv = this.createSection(\"Show\", this.properties);\n            let content = this.createContent(this.sessionOptionsDiv);\n\n            let row = db.div(\"MatcToobarRow MatcToolbarRadioList\").build(content);\n\n            this.sessionTreeCheckBox = this.$new(RadioBoxList)\n            this.sessionTreeCheckBox.setOptions([\n                { value: true, label: \"Merged Graph\" },\n                { value: false, label: \"Individual Tests\" },\n            ])\n\n            // this.sessionTreeCheckBox = this.$new(CheckBox);\n            // this.sessionTreeCheckBox.setLabel(\"Merge Graph\");\n            //css.add(this.sessionTreeCheckBox.domNode, \"MatcToolbarItem\");\n            this.sessionTreeCheckBox.setValue(true);\n            this.sessionTreeCheckBox.placeAt(row);\n            this.own(on(this.sessionTreeCheckBox, \"change\", lang.hitch(this, \"showUserJourney\")));\n\n\n            row = db.div(\"MatcToobarRow\").build(content);\n            this.sessionOutlierCheckbox = this.$new(CheckBox);\n            css.add(this.sessionOutlierCheckbox.domNode, \"MatcToolbarItem\");\n            this.sessionOutlierCheckbox.setValue(false);\n            this.sessionOutlierCheckbox.setLabel(\"Show Outlier\");\n            this.sessionOutlierCheckbox.placeAt(row);\n            this.own(on(this.sessionOutlierCheckbox, \"change\", lang.hitch(this, \"showUserJourneyOutlier\")));\n\n\n            this.sessionOutlierDiv = this.createSection(\"Colors\", this.properties);\n            content = this.createContent(this.sessionOutlierDiv);\n            row = db.div(\"MatcToobarRow \").build(content);\n\n\n            this.sessionLineColor = this.$new(ToolbarColor, { updateColor: true, hasCustomColor: false, hasPicker: false });\n            this.sessionLineColor.placeAt(row);\n            this.sessionLineColor.setLabel('Graph');\n            this.sessionLineColor.setModel(this.model);\n            this.sessionLineColor.setValue(\"#33b5e5\");\n            css.add(this.sessionLineColor.domNode, \" hidden\");\n            this.own(on(this.sessionLineColor, \"change\", lang.hitch(this, \"showUserJourney\")));\n\n            this.sessionTaskLineColor = this.$new(ToolbarColor, { updateColor: true, hasCustomColor: false, hasPicker: false });\n            this.sessionTaskLineColor.placeAt(row);\n            this.sessionTaskLineColor.setLabel('Task');\n            this.sessionTaskLineColor.setModel(this.model);\n            this.sessionTaskLineColor.setValue(\"#92c500\");\n            css.add(this.sessionTaskLineColor.domNode, \"\");\n            this.own(on(this.sessionTaskLineColor, \"change\", lang.hitch(this, \"showUserJourney\")));\n\n\n            this.sessionOutlierColor = this.$new(ToolbarColor, { updateColor: true, hasCustomColor: false, hasPicker: false });\n            this.sessionOutlierColor.placeAt(row);\n            this.sessionOutlierColor.setLabel('Outlier');\n            this.sessionOutlierColor.setModel(this.model);\n            this.sessionOutlierColor.setValue(\"#ffb61c\");\n            css.add(this.sessionOutlierColor.domNode, \"\");\n            this.own(on(this.sessionOutlierColor, \"change\", lang.hitch(this, \"showUserJourney\")));\n\n\n            this.sessionShowDiv = this.createSection(\"Options\", this.properties);\n            content = this.createContent(this.sessionShowDiv);\n            row = db.div(\"MatcToobarRow MatcToolbarRadioList\").build(content);\n            this.sessionTimeCheckBox = this.$new(RadioBoxList, { maxLabelLength: 20 });\n            this.sessionTimeCheckBox.setOptions([\n                { value: false, label: 'Navigation' },\n                { value: true, label: 'Time' }\n            ]);\n\n            this.sessionTimeCheckBox.setValue(false);\n            this.sessionTimeCheckBox.placeAt(row);\n            this.own(on(this.sessionTimeCheckBox, \"change\", lang.hitch(this, \"showUserJourney\")));\n\n\n            this.sessionTaskCntr = this.createSection(\"Tasks\", this.properties);\n            content = this.createContent(this.sessionTaskCntr);\n\n            row = db.div(\"MatcToobarRow \").build(content);\n\n            var tasks = [{ value: -1, label: \"No Task\" }];\n            if (this.testSettings.tasks) {\n                for (let i = 0; i < this.testSettings.tasks.length; i++) {\n                    let task = this.testSettings.tasks[i];\n                    tasks.push({ value: i, label: task.name });\n                }\n            }\n            this.sessionTaskBtn = this.$new(RadioBoxList, { maxLabelLength: 20 });\n            this.sessionTaskBtn.setOptions(tasks);\n            this.sessionTaskBtn.setValue(-1);\n            css.add(this.sessionTaskBtn.domNode, \"MatcToolbarRadioList\");\n            this.sessionTaskBtn.placeAt(row);\n            this.own(on(this.sessionTaskBtn, \"change\", lang.hitch(this, \"selectUserJournyTask\")));\n\n\n        },\n\n        renderSessionSection() {\n\n\n            this.sessionDiv = this.db.div(\"MatcToolbarSection\").build(this.testListCntr)\n            let content = this.createContent(this.sessionDiv);\n            css.add(content, \"MatcMarginBottomXXL\");\n\n\n            let row = this.db.div(\"MatcToobarRow\").build(content);\n\n            this.sessionOrderBrn = this.$new(ToolbarDropDownButton, { maxLabelLength: 20 });\n            this.sessionOrderBrn.setOptions([\n                { value: 'date', label: \"Sort by Date\" , icon:\"Calendar\"},\n                { value: 'duration', label: \"Sort by Duration\" , icon:\"Duration\"},\n                { value: 'events', label: \"Sort by Events\" , icon:\"Hash\"},   \n                { value: 'weirdness', label: \"Sort by Outlier\", icon:\"Outlier\" },\n                { value: '', css:'MatcToolbarPopUpLine', label: \"\" },\n                { value: '', label: \"Select all\", callback: ()=> this.selectAllSessions(true), icon:\"CheckBoxOn\"},\n                { value: '', label: \"Unselect all\", callback: ()=> this.selectAllSessions(false), icon:\"CheckBoxOff\"}\n            ]);\n            this.sessionOrderBrn.setPopupCss(\"MatcActionAnimProperties MatcPopupArrowLeft\");\n    \n            this.sessionOrderBrn.updateLabel = false;\n            this.sessionOrderBrn.hasFixedLabel = true\n            this.sessionOrderBrn.reposition = true;\n            this.sessionOrderBrn.repositionPosition = 'right';\n            this.sessionOrderBrn.setValue('date')\n            this.sessionOrderBrn.setLabel(\"Test Sessions\")\n            this.sessionOrderBrn.placeAt(row);\n            this.tempOwn(on(this.sessionOrderBrn, \"change\", (v) => { \n                this.sessionListWidget.setOrder(v)\n             }));\n            this.sessionList = this._getTestList(this.events, this.annotation, this.testSettings);\n\n            this.sessionListWidget = this.$new(SessionList)\n            this.sessionListWidget.placeAt(content)\n                  \n            this.sessionListWidget.setSessions(this.sessionList)\n            this.sessionListWidget.on('select', () => {\n                this.onSessionSelectionChanged()\n            })    \n            this.sessionListWidget.on('hover', (s) => {\n                this.hoverSession(s)\n            })\n            this.sessionListWidget.on('play', (s, e) => {\n                this.showSession(s,e)\n            })\n            this.sessionListWidget.on('label', (s, label) => {\n                this.onChangeSessionLabel(s,label)\n            })\n            \n        },\n\n        hoverSession(session) {\n            if (this.analyticMode !== 'UserJourney') {\n                return\n            }\n            if (this.canvas) {\n                this.canvas.highlightSession(session?.session)\n            }\n        },\n\n        showUserJourneyOutlier(showOutlier) {\n            if (showOutlier) {\n                let outliers = this.canvas.getOutlierScores();\n                for (let session in this.sessionCheckBoxes) {\n                    let chkBx = this.sessionCheckBoxes[session];\n                    if (outliers[session]) {\n                        css.remove(chkBx.domNode, \"MatcToolbarItemStrikeThrough\");\n                    } else {\n                        css.add(chkBx.domNode, \"MatcToolbarItemStrikeThrough\");\n                    }\n                }\n\n            } else {\n                for (let session in this.sessionCheckBoxes) {\n                    let chkBx = this.sessionCheckBoxes[session];\n                    css.remove(chkBx.domNode, \"MatcToolbarItemPassive\");\n                    css.remove(chkBx.domNode, \"MatcToolbarItemStrikeThrough\");\n                }\n            }\n            this.showUserJourney();\n        },\n        /**\n         * Update the UI according the selected task. Show task color selector\n         * and also fade out not matching sessions\n         */\n        selectUserJournyTask(taskNumber) {\n\n            if (taskNumber >= 0) {\n                // css.remove(this.sessionTaskLineColor.domNode, \"hidden\");\n                // css.remove(this.sessionLineColor.domNode, \"hidden\")\n                let task = this.testSettings.tasks[taskNumber];\n                let taskPerformance = this.canvas.getTaskPerformance();\n                for (let session in this.sessionCheckBoxes) {\n                    let chkBx = this.sessionCheckBoxes[session];\n                    if (taskPerformance[session] && taskPerformance[session][task.id]) {\n                        css.remove(chkBx.domNode, \"MatcToolbarItemStrikeThrough\");\n                        //chkBx.setValue(true);\n                    } else {\n                        //chkBx.setValue(false);\n                        css.add(chkBx.domNode, \"MatcToolbarItemStrikeThrough\");\n                    }\n                }\n            } else {\n                // css.add(this.sessionTaskLineColor.domNode, \"hidden\");\n                // css.add(this.sessionLineColor.domNode, \"hidden\")\n                for (let session in this.sessionCheckBoxes) {\n                    let chkBx = this.sessionCheckBoxes[session];\n                    css.remove(chkBx.domNode, \"MatcToolbarItemPassive\");\n                    css.remove(chkBx.domNode, \"MatcToolbarItemStrikeThrough\");\n                }\n            }\n            this.showUserJourney();\n        },\n\n        setSelectSessions(ids) {\n            if (this.sessionCheckBoxes) {\n                for (var id in this.sessionCheckBoxes) {\n                    if (ids.indexOf(id) >= 0) {\n                        this.sessionCheckBoxes[id].setValue(true);\n                    } else {\n                        this.sessionCheckBoxes[id].setValue(false);\n                    }\n                }\n                if (this.sessionAllCheckBox) {\n                    this.sessionAllCheckBox.setValue(false);\n                }\n\n                this.onSessionSelectionChanged();\n            }\n        },\n\n        selectAllSessions(value) {\n            this.sessionListWidget.setAllSelected(value)\n            this.onSessionSelectionChanged();\n        },\n\n        selectSession() {\n            this.onSessionSelectionChanged();\n        },\n\n        onSessionSelectionChanged() {\n            this.logger.log(-1, \"onSessionSelectionChanged\", \"enter\")\n            this.reRenderAnalyticMode()\n        },\n\n        getSelectedSessions () {\n            return this.sessionListWidget.getSelected()\n        },\n\n        onChangeSessionLabel (sessionID, label) {\n            const start = this.events.find(e => e.type === 'SessionStart' && e.session === sessionID)\n            if (start && start.label !== label) {\n                start.label = label\n                this.modelService.updateEvent(this.model.id,start)\n            }\n        },\n\n        _getTestList(events, annotatation, testSettings) {\n\n            const list = [];\n            if (!testSettings.tasks) {\n                testSettings.tasks = [];\n                console.warn(\"_getTestList() > Added missing task array\")\n            }\n\n            const df = new DataFrame(events);\n            df.sortBy(\"time\");\n            const sessionGroup = df.groupBy(\"session\");\n            const sessions = sessionGroup.data;\n\n            const annoSession = new DataFrame(annotatation).groupBy(\"reference\");\n            const analytics = new Analytics();\n            const taskCount = testSettings.tasks.length;\n            const tasksPerformance = analytics.getMergedTaskPerformance(df, testSettings.tasks, annotatation);\n            const tasksBySession = tasksPerformance.count(\"session\");\n\n            const outliers = this.canvas.getOutlierScores()\n\n            let id = 1;\n            for (let sessionID in sessions) {\n                let label = `Test ${id}`\n                let session = sessions[sessionID];\n                let date = this.formatDate(session.min(\"time\"), true);\n\n                let anno = annoSession.get(sessionID);\n                let status = '<span class=\"MatchDashStatusSuccess\">Valid</span>';\n                let isValid = true;\n                if (anno) {\n                    isValid = anno.get(0).get(\"isValid\");\n                    if (!isValid) {\n                        status = '<span class=\"MatchDashStatusFailure\">Failure</span>';\n                    }\n                }\n\n                let taskSuccess = tasksBySession.get(sessionID);\n                if (!taskSuccess) {\n                    taskSuccess = 0;\n                }\n\n                const start = session.data.find(e => e.type === 'SessionStart')\n                if (start && start.label) {\n                    label = start.label\n                }\n\n                const df = new DataFrame(session.data)\n                const clicks = df.select(\"type\", \"in\", [\"ScreenClick\", \"WidgetClick\", \"WidgetChange\", \"ScreenGesture\", \"WidgetGesture\"])\n\n                const item = {\n                    session: sessionID,\n                    taskPerformance: taskSuccess + \" / \" + taskCount,\n                    weirdness: outliers[sessionID],\n                    duration: (Math.ceil((session.max(\"time\") - session.min(\"time\")) / 1000)),\n                    date: date,\n                    start: session.min(\"time\"),\n                    size: clicks.size(),\n                    status: status,\n                    isValid: isValid,\n                    id: id,\n                    label: label,\n                    screens: session.unique(\"screen\")\n                };\n\n                list.push(item);\n                id++;\n            }\n\n            list.sort((a, b) => {\n                return a.id - b.id;\n            });\n\n            return list;\n        },\n\n        renderGestureProperties() {\n            const db = new DomBuilder();\n            this.gestureOptionsDiv = this.createSection(\"Options\", this.properties);\n            const content = this.createContent(this.gestureOptionsDiv);\n            const row = db.div(\"MatcToobarRow MatcMarginBottomXXL\").build(content);\n            db.span(\"MatcToolbarItemLabel\", \"Gesture Color\").build(row);\n            this.gestureLineColor = this.$new(ToolbarColor, { updateColor: true, hasCustomColor: false, hasPicker: false });\n            this.gestureLineColor.placeAt(row);\n            this.gestureLineColor.setLabel('Line Color');\n            this.gestureLineColor.setModel(this.model);\n            this.gestureLineColor.setValue(\"#0099cc\");\n            this.own(on(this.gestureLineColor, \"change\", lang.hitch(this, \"showGestureMap\")));\n        },\n\n\n        /*****************************************************************************************************\n         * Screen Mode\n         ****************************************************************************************************/\n\n\n        renderScreenModes() {\n            this.logger.log(3, \"renderScreenModes\", \"entry\");\n\n            this.screenModeDiv = this.createSection(\"Show\", this.properties);\n\n            const content = this.createContent(this.screenModeDiv);\n\n            const row = this.db.div(\"MatcToobarRow MatcMarginBottom\").build(content);\n\n            const list = this.$new(RadioBoxList);\n            css.add(list.domNode, \"MatcToolbarRadioList\");\n            list.setOptions([\n                { label: 'Dwell Time', value: \"HeatmapDwelTime\", icon: \"mdi mdi-timelapse\" },\n                { label: 'Scroll', value: \"HeatmapScrollView\", icon: \"mdi mdi-swap-vertical\" },\n                { label: 'Scroll Time', value: \"HeatmapScrollTime\", icon: \"mdi mdi-timer\" },\n                //{ label: 'Discovery Time', value: \"HeatmapDiscoryTime\", icon: \"mdi mdi-timer\" }\n            ]);\n            list.setValue(\"HeatmapDwelTime\")\n\n            this.screenModeRadioList = list\n            list.placeAt(row);\n            this.own(list.on(\"change\", lang.hitch(this, \"showScreenMode\")));\n        },\n\n        /*****************************************************************************************************\n         * show properties section and make sure the scroll bar is moved too!\n         ****************************************************************************************************/\n\n        showProperties() {\n            css.remove(this.propertiesCntr, \"MatcToolbarSectionHidden\");\n            if (this.canvas) {\n                css.add(this.canvas.scrollRight, \"MatcCanvasScrollBarRightOpen\");\n            }\n        },\n\n        hideProperties() {\n            if (this.analyticMode == \"UserJourney\") {\n                this.hideAllSections();\n                this.showSessionProperties();\n                return\n            }\n\n            if (this.analyticMode == \"HeatmapClick\") {\n                this.hideAllSections();\n                this.showHeatMapProperties();\n                return\n            }\n            this.hideAllSections();\n        },\n\n\n        hideAllSections() {\n            this.logger.log(3, \"hideAllSections\", \"entry\");\n            for (var i = 0; i < this.sections.length; i++) {\n                var section = this.sections[i];\n                css.add(section, \"MatcToolbarSectionHidden\");\n            }\n        },\n\n\n        /**********************************************************************\n         * Canvas Delegates\n         **********************************************************************/\n\n\n\n        /**********************************************************************\n         * DI stuff\n         **********************************************************************/\n\n\n        setController(c) {\n            this.logger.log(3, \"setController\", \"entry\");\n            this.controller = c;\n        },\n\n        setCanvas(c) {\n            this.logger.log(3, \"setCanvas\", \"entry\");\n            this.canvas = c;\n\n        },\n\n        setModelFactory(f) {\n            this.logger.log(3, \"setModelFactory\", \"entry\");\n            this.factory = f;\n        },\n\n        setModel(m) {\n            this.model = this.createInheritedModel(m);\n            this.modelName = m.name\n            this.renderToolbar();\n            this.render();\n        },\n\n        setAnnotation(a) {\n            this.logger.log(-1, \"setAnnotation\", \"enter > # \");\n            this.annotation = a;\n        },\n\n        setTest(t) {\n            this.logger.log(2, \"setTest\", \"enter > # \");\n            this.testSettings = t;\n        },\n\n        setEvents(events) {\n            this.logger.log(2, \"setEvents\", \"enter > # \" + events.length);\n            this.events = events;\n        },\n\n        setMode(mode) {\n            this.logger.log(2, \"setMode\", \"entry > '\" + mode + \"'\");\n            this.mode = mode;\n            this.onModeChange();\n        },\n\n\n        onModeChange() {\n\n        },\n\n\n        /********************************************************\n         * Helper\n         ********************************************************/\n\n        setSelectedViewButton() {\n        },\n\n        createRing(lbl, help, distCallBack) {\n\n            var bgColor = \"#cecece\";\n            var settings = this.canvas.getSettings();\n            if (settings.canvasTheme == \"MatcDark\") {\n                bgColor = \"#777\";\n            }\n            var ring = this.$new(Ring, { size: 100, width: 5, backgroundColor: bgColor, color: \"#365fff\", color2: \"#83b600\", color3: \"#ffa713\" });\n            ring.setDomSize(120, 120);\n            ring.setLabel(lbl);\n\n            if (distCallBack) {\n                ring.setAction(\"mdi mdi-chart-bar\");\n                this.tempOwn(ring.on(\"action\", lang.hitch(this, distCallBack)));\n            }\n\n            if (help) {\n                ring.setHelp(true);\n                this.tempOwn(ring.on(\"help\", lang.hitch(this, \"showHelpDialog\", help)));\n            }\n\n            css.add(ring.domNode, \"MatcMarginTop\");\n            return ring;\n        },\n\n        createToolBarItem(label, callback, icon, parent) {\n            var a = document.createElement(\"div\");\n            css.add(a, \"MatcToolbarItem MatcToolbarPrimaryItem\");\n\n            if (icon) {\n                var i = document.createElement(\"span\");\n                css.add(i, icon);\n                a.appendChild(i);\n            }\n\n            // var lbl = document.createElement(\"label\");\n            // css.add(lbl, \"MatcToolbarLabel\");\n            // lbl.innerHTML =label;\n            // a.appendChild(lbl);\n\n\n            if (callback) {\n                this.tempOwn(on(a, touch.press, lang.hitch(this, callback)));\n            }\n            if (!parent) {\n                this.properties.appendChild(a);\n            } else {\n                parent.appendChild(a);\n            }\n\n            return a;\n        },\n\n\n        createInput(content, placeholder) {\n\n            var div = document.createElement(\"div\");\n            css.add(div, \"MatcToolbarItem\");\n            content.appendChild(div);\n\n            let input = document.createElement(\"input\");\n            input.disabled = true;\n            css.add(input, \"MatcIgnoreOnKeyPress MatcToobarInput  MatcToobarInlineEditDisabled\");\n            div.appendChild(input);\n\n            if (placeholder) {\n                input.placeholder = placeholder;\n            }\n            return input;\n        },\n\n        createContent(parent) {\n            var content = document.createElement(\"div\");\n            css.add(content, \"MatcToolbarSectionContent\");\n            parent.appendChild(content);\n            return content;\n        },\n\n        createSection(lbl, parentNode, canBeHidden = true) {\n\n            const parent = document.createElement(\"div\");\n            css.add(parent, \"MatcToolbarSection\");\n\n            const header = this.createSectionHeader(parent, lbl);\n\n            /**\n             * store the value somehow in a cookie? and use it during restore??\n             */\n            this.own(on(header, touch.press, () => {\n                css.toggle(parent, \"MatcToolbarSectionCollabsed\");\n                return false;\n            }));\n\n            if (canBeHidden) {\n                this.sections.push(parent);\n            }\n            parentNode.appendChild(parent);\n            return parent;\n        },\n\n        createSectionHeader(parent, lbl, hasTemplateMarker) {\n            var div = document.createElement(\"div\");\n            css.add(div, \"MatcToolbarSectionLabel\");\n            parent.appendChild(div);\n\n            div.innerHTML = lbl;\n\n            if (hasTemplateMarker) {\n                var span = document.createElement(\"span\");\n                css.add(span, \"MatcToolbarSectionMarker\");\n                span.innerHTML = \" *\";\n                div.appendChild(span);\n            }\n\n            var chev = document.createElement(\"span\");\n            css.add(chev, \"MatcToolbarSectionChevron mdi mdi-chevron-down\");\n            div.appendChild(chev);\n\n            return div;\n        },\n\n\n\n        createBigNumber(db, cntr, label, help) {\n            var numberCntr = db.div(\"MatcToolBarNumberCntr MatcMarginTop\").build(cntr);\n            let l = db.div(\"MatcDashLabel\", label).build(numberCntr);\n            var main = db.div(\"MatcToolbarBigLabel\").build(numberCntr);\n            var little = db.div(\"MatcToolbarDetailLabel\").build(numberCntr);\n            if (help) {\n                var node = db.span(\"mdi mdi-help-circle MatcHelpIcon\").build(l);\n                this.tempOwn(on(node, touch.press, lang.hitch(this, \"showHelpDialog\", help)));\n            }\n\n            return [main, little];\n        },\n\n\n        /********************************************************\n         * Main menu handlers\n         ********************************************************/\n\n        onExit() {\n            this.logger.log(0, \"onExit\", \"entry\", this.isPublic);\n            if (this.isPublic) {\n                hash(\"#/examples/\" + this.model.id + \"/design.html\");\n            } else {\n                hash(\"#/apps/\" + this.model.id + \"/design.html\");\n            }\n        },\n\n        onShare() {\n            this.logger.log(0, \"onShare\", \"entry\");\n        },\n\n        /********************************************************\n         * Selection handlers!\n         ********************************************************/\n\n        onWidgetSelected(widget) {\n            this.logger.log(2, \"onWidgetSelected\", \"entry\");\n\n            /**\n             * We might want to blur some stuff\n             */\n            if (this._selectedWidget && this._selectedWidget.id != widget.id) {\n                this.logger.log(3, \"onWidgetSelected\", \"exit > no new selection!\");\n                this.blurWidgetProperties();\n            }\n\n\n            this.cleanUp();\n\n\n            this._selection = \"widget\";\n            this._selectedWidget = widget;\n            this.showWidgetProperties(widget);\n\n\n            this.logger.log(3, \"onWidgetSelected\", \"exit\");\n        },\n\n\n        onScreenSelected(screen) {\n            this.logger.log(-1, \"onScreenSelected\", \"entry\", this._selectedScreen);\n\n            /**\n             * We don not want to rerender on scroll\n             */\n            if (this._selectedScreen && this._selectedScreen.id == screen.id) {\n                this.logger.log(3, \"onScreenSelected\", \"exit > no new selection!\");\n                return;\n            }\n\n            this.cleanUp();\n            this._selection = \"screen\";\n            this._selectedScreen = screen;\n            this.showScreenProperties(screen);\n\n\n            this.logger.log(4, \"onScreenSelected\", \"exit\");\n        },\n\n\n\n\n        onLineSelected(line) {\n            this.cleanUp();\n            this._selection = \"line\";\n            this._selectedLine = line;\n        },\n\n\n\n        onMultiSelect(selection) {\n            this.cleanUp();\n\n            this._selection = \"multi\";\n            this._selectedMulti = selection;\n        },\n\n        onGroupSelect(group) {\n            this.cleanUp();\n            this._selection = \"group\";\n            this._selectedGroup = group;\n            this.showGroupProperties(group);\n        },\n\n\n\n        onCanvasSelected() {\n            this.cleanUp();\n            this.hideProperties();\n        },\n\n\n        /**\n         * method which will update all properties. method is called from controller!\n         */\n        updatePropertiesView() {\n\n            if (this._selectedWidget) {\n                this.onWidgetSelected(this._selectedWidget);\n            }\n        },\n\n\n\n        /********************************************************\n         * Player\n         ********************************************************/\n\n        showSession(session, e) {\n          \n            const sessionID = session.session;\n            const dialog = new Dialog();\n\n            const db = new DomBuilder();\n\n            const div = db.div(\"MatcDialog MatcPlayerDialog \").build();\n            const cntr = db.div(\"\").build(div);\n\n            dialog.onOpen(() => {\n                if (this.isPublic) {\n                    Promise.all([\n                        this.modelService.findPublicTagAnnotations(this.model.id),\n                        this.modelService.findPublicMouseBySession(this.model.id, sessionID)\n                    ]).then(values => {\n                        this._showSession(sessionID, cntr, dialog, values);\n                    });\n                } else {\n                    Promise.all([\n                        this.modelService.findTagAnnotations(this.model.id),\n                        this.modelService.findMouseBySession(this.model.id, sessionID)\n                    ]).then(values => {\n                        this._showSession(sessionID, cntr, dialog, values);\n                    });\n                }\n            })\n\n            dialog.popup(div, e.target);\n        },\n\n        _showSession(sessionID, cntr, dialog, data) {\n\n            try {\n                const mouse = data[1];\n\n                const df = new DataFrame(this.events);\n                df.sortBy(\"time\");\n                const sessionGroup = df.groupBy(\"session\");\n                const events = sessionGroup.get(sessionID);\n\n                const player = this.$new(VideoPlayer);\n                player.setDialog(dialog)\n                player.placeAt(cntr);\n                player.setModel(this.model);\n                player.setTestSettings(this.testSettings)\n                player.setMouse(mouse);\n                player.setMouse(mouse);\n                player.setSession(events, sessionID);\n\n\n                dialog.own(on(dialog, \"close\", function () {\n                    player.destroy();\n                }));\n            } catch (e) {\n                console.error(e);\n            }\n        },\n\n        _getSessionAnnotation(annotations, appID) {\n\n            if (annotations.length > 1) {\n                /**\n                 * This should not happen, but we have seen it happeing. We delete this now...\n                 */\n                for (let i = 1; i < annotations.length; i++) {\n                    var a = annotations[i];\n                    this._doDelete(\"rest/annotations/apps/\" + appID + \"/\" + a.id + \".json\");\n                }\n            }\n\n            if (annotations.length >= 1) {\n                return annotations[0];\n            } else {\n                //console.debug(\"Create Tag annotation...\");\n                return {\n                    appID: appID,\n                    type: \"tags\",\n                    reference: \"\",\n                    sessions: {}\n                };\n            }\n        },\n\n        /********************************************************\n         * Show Settings\n         ********************************************************/\n\n\n        onShowSettings(e) {\n\n            var db = new DomBuilder();\n\n            db = new DomBuilder();\n            var popup = db.div(\"MatcDialog MatcHeaderDialog MatcPadding\").build();\n\n            var cntr = db.div(\"\").build(popup);\n\n            var settings = this.canvas.getSettings();\n\n\n            /**\n             * Themes\n             */\n            db.label(\"\", \"Theme :\").build(cntr);\n            var themeList = this.$new(RadioBoxList);\n            themeList.setOptions([\n                { value: \"MatcDark\", label: \"Dark\" },\n                { value: \"MatcLight\", label: \"Light\" }\n            ]);\n            themeList.setValue(settings.canvasTheme);\n            themeList.placeAt(cntr);\n\n\n\n            /**\n             * Mouse Wheel\n             */\n            db.label(\"MatcMarginTop\", \"Mouse Wheel / Touchpad Scroll :\").build(cntr);\n            var mouseWheelList = this.$new(RadioBoxList);\n            mouseWheelList.setOptions([\n                { value: \"scroll\", label: \"Scroll Canvas\" },\n                { value: \"zoom\", label: \"Zoom Canvas\" }\n            ]);\n            mouseWheelList.setValue(settings.mouseWheelMode);\n            mouseWheelList.placeAt(cntr);\n\n\n            var bar = db.div(\"MatcButtonBar MatcMarginTopXL\").build(popup);\n            var save = db.a(\"MatcButton MatcButtonPrimary\", \"Save\").build(bar);\n            var cancel = db.a(\" MatcLinkButton \", \"Cancel\").build(bar);\n\n\n\n            var dialog = new Dialog();\n            dialog.own(on(cancel, touch.press, lang.hitch(dialog, \"close\")));\n            dialog.own(on(save, touch.press, lang.hitch(this, \"onSaveSettings\", dialog, themeList, mouseWheelList)));\n\n            dialog.popup(popup, e.target);\n\n            this.canvas.enableMouseZoom(false);\n            this.canvas.setState(\"simulate\");\n\n            this.logger.log(0, \"onShowSettings\", \"exit > \");\n        },\n\n        onSaveSettings(dialog, themeList, mouseWheelList) {\n            var settings = {\n                canvasTheme: themeList.getValue(),\n                mouseWheelMode: mouseWheelList.getValue()\n            };\n\n            this.canvas.setSettings(settings);\n            this.canvas.enableMouseZoom(true);\n            dialog.close();\n        },\n\n\n        /********************************************************\n         * SignUp\n         ********************************************************/\n\n\n        showSignUpDialog(e) {\n\n            var d = new Dialog();\n\n            var db = new DomBuilder();\n\n            var div = db.div(\"MatcDialog \").build();\n\n\n            this._createSignUpForm(d, div);\n\n            d.popup(div, e.target);\n        },\n\n\n        _createSignUpForm(d, div) {\n            let f = this.$new(Form);\n            f.render([\n                {\n                    label: \"Email\",\n                    name: \"email\",\n                    type: \"text\",\n                    required: \"true\",\n                    placeholder: \"Your email\",\n                    css: \"input-lg MatcIgnoreOnKeyPress\",\n                    error: \"We need your email.\"\n                },\n                {\n                    label: \"Password\",\n                    name: \"password\",\n                    type: \"password\",\n                    min: 6,\n                    placeholder: \"Your password\",\n                    css: \"input-lg MatcIgnoreOnKeyPress\",\n                    error: \"The password should have at least six characters.\"\n                },\n                {\n                    label: 'I have read the <a href=\"#/termsofservice.html\" target=\"_blank\">terms of service</a>',\n                    name: \"tos\",\n                    type: \"check\",\n                    required: \"true\",\n                    css: \"MatcFormCheckBox MatcIgnoreOnKeyPress\",\n                    error: \"You must accept the terms of service!\"\n                }\n            ], [\n                { label: \"Cancel\", css: \"MatcLinkButton\", click: lang.hitch(d, \"close\") },\n                { label: \"Create Free Account\", css: \"MatcButton MatchButtonGreen\", click: lang.hitch(this, \"_signUpAndNew\", d, f) }\n            ]);\n\n            f.placeAt(div);\n            f.startup();\n\n            return f;\n        },\n\n        _signUpAndNew(dialog, form, data) {\n\n            var valid = form.validateForm(null, true);\n\n            if (valid) {\n\n                result = this._doPost(\"rest/user\", data);\n\n                if (result.type == \"error\") {\n                    if (result.errors.indexOf(\"user.email.not.unique\") >= 0) {\n                        form.showError(\"The email is already taken! Please enter another one!\", \"email\");\n                    } else {\n                        form.showError(\"Something went wrong! Please try again!\", \"\");\n                    }\n\n                    dialog.shake();\n                } else {\n                    dialog.close();\n\n                    var result = this._doPost(\"rest/login/\", data);\n                    if (result.type != \"error\") {\n\n                        window.location.href = \"/my-account.html\";\n\n                    } else {\n                        console.error(\"_signUpAndSave() > Could not sign in user\");\n                    }\n                }\n            } else {\n                dialog.shake();\n            }\n        }\n    },\n    mounted() {\n        this.db = new DomBuilder();\n    }\n}\n</script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticToolbarRender.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticToolbarRender.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./AnalyticToolbarRender.vue?vue&type=template&id=cb8e42f2\"\nimport script from \"./AnalyticToolbarRender.vue?vue&type=script&lang=js\"\nexport * from \"./AnalyticToolbarRender.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","\n<template>\n     <div class=\"MatcToolbar MatcAnalyticsToolbar MatcLayerListVisible\">\n\n\t\t<div class=\"MatcToolbarLayerList MatcToolbarAnalyticList MatcToobarPropertiesSection\" :style=\"'width:'+ layerListWidth +'px'\">\n\t\t\t<div class=\"MatcToolbarLayerListCntr\" data-dojo-attach-point=\"testListCntr\">\n\t\t\t</div>\n\t\t\t<div class=\"MatcToolbarLayerListDND\" ref=\"dndHanlde\" @mousedown.stop=\"onResizeStart\"></div>\n\t\t</div>\n\n\t\t<div class=\"MatcToolbarTop \">\n\t\t\t<div class=\"MatcToolbarTopHome\" :style=\"'width:'+ layerListWidth +'px'\">\n\t\t\t\t<HomeMenu @select=\"onHomeMenu\"  :name=\"modelName\" />\n\t\t\t</div>\n\n\t\t\t<div class=\"MatcToolbarTopCntr\" :style=\"'width:calc(100% - '+ layerListWidth +'px)'\" >\n\t\t\t\t<div class=\"MatcToolbarSection MatcToolbarTopLeft\">\n<!-- \n\t\t\t\t\t<div :class=\"['MatcToolbarItem MatcToolbarPrimaryItem', {'MatcToolbarItemSelected': mode === 'edit'} ]\" data-dojo-attach-point=\"editBtn\"  @click=\"onEdit\">\n\t\t\t\t\t\t<QIcon icon=\"Edit\" />\n\t\t\t\t\t</div> \n\n\t\t\t\t\t<div :class=\"['MatcToolbarItem MatcToolbarPrimaryItem', {'MatcToolbarItemSelected': mode === 'move'} ]\" data-dojo-attach-point=\"moveBtn\"  @click=\"onMove\">\n\t\t\t\t\t\t<QIcon icon=\"EditMove\" />\n\t\t\t\t\t</div> -->\n\n\t\t\t\t\t<div :class=\"['MatcToolbarItem MatcToolbarPrimaryItem', {'MatcToolbarItemSelected': mode === 'addComment'} ]\" data-dojo-attach-point=\"commentBtn\"  @click=\"onNewComment\">\n\t\t\t\t\t\t<QIcon icon=\"Comment\" />\n\t\t\t\t\t</div>\t\n\t\t\t\t</div>\n\t\t\n\t\t\t\t<div class=\"MatcToolbarTopCenterCntr\">\n\t\t\t\t\t<div class=\"MatcToolbarSection\" data-dojo-attach-point=\"screenSection\">\n\t\t\t\t\t\t<AnalyticViewModeButton @change=\"onChangeViewMode\" v-if=\"events\"/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\n\n\t\t\t\t<div class=\"MatcToolbarNotificationSection MatcToolbarTopRight MatcToolbarSection\" data-dojo-attach-point=\"notificationSection\">\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t<ViewConfig :value=\"canvasViewConfig\" @change=\"onChangeCanvasViewConfig\" :analytic=\"true\"/>\n\t\t\t\t\t<HeatmapToggleButton  :value=\"'Heatmap'\" @change=\"$emit('viewModeChange', $event)\"/>\t\n\t\t\t\t\t<div class=\"MatcToolbarItem\" @click=\"showSharing\">\n\t\t\t\t\t\t<div class=\"MatcToobarPrimaryButton\">\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tShare\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div> \n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"MatcToobarPropertiesSection MatcToolbarSectionHidden\" data-dojo-attach-point=\"propertiesCntr\">\n\t\t</div>\n\n\t</div>\n</template>\n<script>\nimport DojoWidget from 'dojo/DojoWidget'\nimport css from 'dojo/css'\nimport lang from 'dojo/_base/lang'\n\nimport on from 'dojo/on'\nimport touch from 'dojo/touch'\nimport hash from 'dojo/hash'\n\nimport Util from 'core/Util'\nimport _Color from 'common/_Color'\n\nimport Logger from 'common/Logger'\nimport DomBuilder from 'common/DomBuilder'\n\nimport Dialog from 'common/Dialog'\nimport _Tooltip from 'common/_Tooltip'\nimport RadioBoxList from 'common/RadioBoxList'\nimport Form from 'common/Form'\nimport Ring from 'common/Ring'\nimport Histogram from 'dash/Histogram'\nimport Analytics from 'dash/Analytics'\nimport Share from 'page/Share'\n\nimport DataFrame from 'common/DataFrame'\nimport ViewConfig from 'canvas/toolbar/components/ViewConfig'\nimport HomeMenu from './AnalyticHomeMenu.vue'\nimport Help from 'help/Help'\nimport QIcon from 'page/QIcon'\nimport AnalyticViewModeButton from './AnalyticViewModeButton'\nimport AnalyticToolbarRender from './AnalyticToolbarRender'\nimport {onStartDND} from '../../util/DND'\nimport HeatmapToggleButton from '../toolbar/components/HeatmapToggleButton.vue'\n\nexport default {\n    name: 'AnalyticToolbar',\n    mixins:[Util,_Color,  _Tooltip, DojoWidget, AnalyticToolbarRender],\n    data: function () {\n        return {\n\t\t\tmode:'',\n\t\t\tmodelName: 'Loading...',\n\t\t\tevents: null,\n\t\t\tmodel: null,\n\t\t\tuser: null,\n\t\t\tvalue: false,\n\t\t\tanalyticMode: \"HeatmapClick\",\n\t\t\tanalyticHeatMapClicks: -1,\n\t\t\tcanvasViewConfig: {},\n\t\t\tlayerListWidth: 256\n        }\n    },\n    components: {\n\t\t'ViewConfig': ViewConfig,\n\t\t//'HelpButton': HelpButton,\n\t\t'HomeMenu': HomeMenu,\n\t\t'QIcon': QIcon,\n\t\t'AnalyticViewModeButton': AnalyticViewModeButton,\n\t\t'HeatmapToggleButton': HeatmapToggleButton\n\t},\n    methods: {\n        postCreate(){\n\t\t\tthis.logger = new Logger(\"AnalyticToolbar\");\n\t\t\tthis.logger.log(2,\"constructor\", \"entry\");\n\t\t\tthis.renderToolbar()\n\t\t\tthis.initLayer()\n\t\t},\n\n\t\tsetCommentService (s) {\n\t\t\tthis.logger.log(3,\"setCommentService\", \"entry\");\n\t\t\tthis.commentService = s\n\t\t},\n\n\t\tonMove (e){\n\t\t\tthis.stopEvent(e);\n\t\t\tthis.canvas.setMode(\"move\");\n\t\t},\n\n\t\tonEdit (e){\n\t\t\tthis.stopEvent(e);\n\t\t\tthis.canvas.setMode(\"edit\");\n\t\t},\n\n\t\n\t\tshowHelpDialog(helpID){\n\t\t\tif (this.$refs.helpBtn) {\n\t\t\t\tthis.$refs.helpBtn.show('analytics.canvas', helpID)\n\t\t\t}\n\t\t},\n\n\t\tonHomeMenu (option, e) {\n\t\t\tthis.logger.log(1,\"onHomeMenu\", \"entry\", e);\n\t\t\tif (this[option.value]) {\n\t\t\t\tthis[option.value](e)\n\t\t\t}\n\t\t},\n\n\t\tonChangeViewMode (option) {\n\t\t\tthis.logger.log(-1,\"onChangeViewMode\", \"entry\", option);\n\t\t\tif (this[option]) {\n\t\t\t\tthis[option]()\n\t\t\t}\n\t\t},\n\n\t\tshowHelp(e) {\n\t\t\tlet dialog = new Dialog()\n\t\t\tvar db = new DomBuilder();\n\t\t\tlet popup = db.div(\"MatcDialog MatcHelpDialog MatcPadding\").build();\n\t\t\tdialog.popup(popup, e.target);\n\t\t\tlet help = this.$new(Help)\n\t\t\thelp.placeAt(popup)\n\t\t},\n\n\n\t\tonNewComment(e){\n\t\t\tthis.logger.log(2,\"onNewComment\", \"entry\");\n\t\t\tthis.stopEvent(e);\n\t\t\tthis.emit(\"newComment\", {\"type\" : \"comment\", \"event\" : e});\n\t\t},\n\n\t\tsetAnalyticMode(mode, params, callback){\n\t\t\tthis.logger.log(2,\"setAnalyticMode\", \"entry > mode: \" + mode);\n\t\t\tthis.analyticMode = mode;\n\t\t\tthis.analyticModeCallback = callback\n\t\t\tif (!callback) {\n\t\t\t\tconsole.warn(\"setAnalyticMode() called with callback\", this.mode)\n\t\t\t}\n\t\t\tif(this.canvas){\n\t\t\t\tthis.canvas.setAnalyticMode(mode, params);\n\t\t\t}\n\t\t\tthis.hideProperties();\n\t\t},\n\n\t\tonCanvasSelected () {\n\t\t\tthis.logger.log(-2,\"onCanvasSelected\", \"entry > mode: \" + this.analyticMode);\n\n\t\t\tif (this.analyticMode === \"HeatmapClick\") {\n\t\t\t\tthis.hideAllSections()\n\t\t\t\tthis.showHeatMapProperties()\n\t\t\t}\n\t\t},\n\n\t\treRenderAnalyticMode () {\n\t\t\tthis.logger.log(-2,\"reRenderAnalyticMode\", \"entry\", this.analyticMode);\n\t\t\tif (this.analyticModeCallback){\n\t\t\t\tthis.analyticModeCallback()\n\t\t\t} else {\n\t\t\t\tthis.logger.error(\"reRenderAnalyticMode\", \"No callback\");\n\t\t\t}\n\t\t},\n\n\t\tsetModelService (s) {\n\t\t\tthis.modelService = s\n\t\t\tsetTimeout(lang.hitch(this, \"initMouseData\"), 500);\n\t\t},\n\n\t\tsetPublic(p){\n\t\t\tthis.isPublic = p;\n\t\t\tif(p){\n\t\t\t\t// css.remove(this.signupSection, \"MatcToolbarSectionHidden\");\n\t\t\t}\n\t\t},\n\n\t\tsetCanvasViewConfig (viewConfig) {\n\t\t\tthis.canvasViewConfig = viewConfig\n\t\t},\n\n\t\tonChangeCanvasViewConfig (key, value) {\n\t\t\tif (this.canvas) {\n\t\t\t\tthis.canvas.setCanvasViewConfig(key, value)\n\t\t\t}\n\t\t},\n\n\t\tsetUser(u) {\n\t\t\tthis.user = u\n\t\t},\n\n\t\tasync initMouseData(){\n\t\t\tthis.logger.log(2,\"initMouseData\", \"entry\");\n\t\t\tif(this.isPublic){\n\t\t\t\t//this._doGet(\"/examples/mouse/\" + this.model.id + \".json\", lang.hitch(this,\"setMouseData\"));\n\t\t\t\tlet res = await this.modelService.findPublicMouse(this.model.id)\n\t\t\t\tthis.setMouseData(res)\n\t\t\t} else {\n\t\t\t\tlet res = await this.modelService.findMouse(this.model.id)\n\t\t\t\tthis.setMouseData(res)\n\t\t\t\t//this._doGet(\"rest/mouse/\" + this.model.id + \".json\", lang.hitch(this,\"setMouseData\"));\n\t\t\t}\n\t\t},\n\n\t\tsetMouseData(data){\n\t\t\tthis.logger.log(2,\"setMouseData\", \"entry >\"  +data.length);\n\t\t\tthis.mouseData = data;\n\t\t},\n\n\n\t\tasync showSharing(e) {\n\t\t\tthis.logger.log(-1, \"showSharing\", \"entry > \", this.isPublic);\n\n\t\t\tconst invitation = await this.modelService.findInvitation(this.model.id)\n\t\t\tconst temp = {};\n\t\t\tfor (let key in invitation) {\n\t\t\t\ttemp[invitation[key]] = key;\n\t\t\t}\n\n\t\t\tconst db = new DomBuilder();\n\t\t\tconst popup = db.div(\"MatcDialog MatcInfitationDialog MatcInfitationDialogLarge MatcPadding\").build();\n\t\t\tconst cntr = db.div(\"container\").build(popup);\n\t\t\tlet row = db.div(\"row\").build(cntr);\n\t\t\tlet right = db.div(\"col-md-12\").build(row);\n\t\t\tdb.h3(\"\", this.getNLS(\"share.Headline\")).build(right);\n\n\t\t\tconst share = this.$new(Share)\n\t\t\tshare.placeAt(right)\n\t\t\tshare.setInvitation(temp[1])\n\t\t\tshare.setPublic(this.isPublic)\n\n\t\t\trow = db.div(\"row MatcMarginTop\").build(cntr);\n\t\t\tright = db.div(\"col-md-12 MatcButtonBar\").build(row);\n\n\t\t\tconst write = db.div(\"MatcButton MatcButtonPrimary\", \"Close\").build(right);\n\n\t\t\tconst d = new Dialog();\n\t\t\td.own(on(write, touch.press, lang.hitch(d, \"close\")));\n\t\t\td.popup(popup, e.target);\n\t\t},\n\n\t\t/**********************************************************************\n\t\t * Layer List Width\n\t\t **********************************************************************/\n\n\t\tonResizeStart (e) {\n            const pos = this.layerListWidth\n            onStartDND(e, d => {\n\t\t\t\tlet width = pos + d.x\n\t\t\t\t// if (Math.abs(256 - width) < 5) {\n\t\t\t\t// \twidth = 256\n\t\t\t\t// }\n                this.layerListWidth = Math.min(Math.max(196, width), 400)\n\t\t\t\tlocalStorage.setItem('quxLayerListWidth', this.layerListWidth)\n\t\t\t\tthis.setLayerListWidth(this.layerListWidth)    \n            })\n        },\n\n\t\tinitLayer (){\n\t\t\tthis.logger.log(-2,\"initLayer\", \"entry\");\n\t\t\tconst w = localStorage.getItem('quxLayerListWidth')\n\t\t\tif (w && !isNaN(w * 1)) {\n\t\t\t\tthis.setLayerListWidth( w * 1)\t\t\t\t\n\t\t\t}\n\t\t},\n\n   \t\tsetLayerListWidth(w) {\n\t\t\tthis.layerListWidth = w\n\t\t\tif (this.canvas) {\n\t\t\t\tthis.canvas.setLayerListWidth(w)\n\t\t\t}\n\t\t},\n\n\n\t\t/**********************************************************************\n\t\t * Callbacks to canvas\n\t\t **********************************************************************/\n\n\n\t\tshowClickHeatMap(){\n\t\t\tthis.logger.log(-2,\"showClickHeatMap\", \"entry > \" + this.analyticHeatMapClicks);\n\t\t\tthis.setAnalyticMode(\"HeatmapClick\", {\n\t\t\t\t\tnumberOfClicks : this.analyticHeatMapClicks,\n\t\t\t\t\tsessions: this.getSelectedSessions(),\n\t\t\t\t}, \n\t\t\t\t() => this.showClickHeatMap()\n\t\t\t);\n\t\t\tthis.showHeatMapProperties();\n\t\t},\n\n\t\tshowFirstClickHeatMap(i){\n\t\t\tthis.logger.log(-1,\"showFirstClickHeatMap\", \"entry > \"+ i);\n\t\t\tthis.analyticHeatMapClicks = i;\n\t\t\tthis.setHeatMapLabel(i)\n\t\t\tif (i === 'mouse') {\n\t\t\t\tthis.showMouseHeatMap()\n\t\t\t} else {\t\t\n\t\t\t\tthis.setAnalyticMode(\"HeatmapClick\",{\n\t\t\t\t\tnumberOfClicks : this.analyticHeatMapClicks,\n\t\t\t\t\tsessions: this.getSelectedSessions()\n\t\t\t\t} , () => this.showFirstClickHeatMap(i));\n\t\t\t}\n\t\t},\n\n\t\tshowMouseHeatMap(){\n\t\t\tthis.logger.log(-2,\"showMouseHeatMap\", \"entry\");\n\t\t\tif(!this.mouseData){\n\t\t\t\tthis.canvas.showHint(\"Loading data...\");\n\t\t\t\tif(this.isPublic){\n\t\t\t\t\tthis._doGet(\"/examples/mouse/\" + this.model.id + \".json\", lang.hitch(this,\"_onMouseDataLoaded\"))\n\t\t\t\t} else {\n\t\t\t\t\tthis._doGet(\"rest/mouse/\" + this.model.id + \".json\", lang.hitch(this,\"_onMouseDataLoaded\"))\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.canvas.setMouseData(this.mouseData);\n\t\t\t\tthis.setAnalyticMode(\"HeatmapMouse\", {\n\t\t\t\t\tsessions: this.getSelectedSessions()\n\t\t\t\t}, () => this.showMouseHeatMap());\n\t\t\t}\n\t\t\tthis.showHeatMapProperties();\n\t\t},\n\n\n\t\t_onMouseDataLoaded(data){\n\t\t\tthis.logger.log(2,\"_onMouseDataLoaded\", \"entry >\"  +data.length);\n\t\t\tthis.mouseData = data;\n\t\t\tthis.canvas.setMouseData(this.mouseData);\n\t\t\tthis.setAnalyticMode(\"HeatmapMouse\", {\n\t\t\t\tsessions: this.getSelectedSessions()\n\t\t\t}, () => this.showMouseHeatMap());\n\t\t},\n\n\t\n\t\tshowViewMap(){\n\t\t\tthis.logger.log(2,\"showViewMap\", \"entry\");\n\t\t\tthis.setAnalyticMode(\"HeatmapViews\", {\t\t\n\t\t\t\tsessions: this.getSelectedSessions()\n\t\t\t}, () => this.showViewMap());\n\t\t},\n\n\t\tshowDropOff () {\n\t\t\tthis.logger.log(-1,\"showDropOff\", \"entry\");\n\t\t\tthis.showDropOffProperties()\n\t\t},\n\n\t\tshowUserJourney(){\n\t\t\tthis.logger.log(-1,\"showUserJourney\", \"entry > \");\t\n\t\t\tconst params = {\n\t\t\t\tsessions: this.getSelectedSessions(),\n\t\t\t\ttime: this.sessionTimeCheckBox.getValue(),\n\t\t\t\tcolor : this.sessionLineColor.getValue(),\n\t\t\t\ttree: this.sessionTreeCheckBox.getValue(),\n\t\t\t\ttask: this.sessionTaskBtn.getValue(),\n\t\t\t\ttaskColor: this.sessionTaskLineColor.getValue(),\n\t\t\t\toutlier: this.sessionOutlierCheckbox.getValue(),\n\t\t\t\toutlierColor: this.sessionOutlierColor.getValue()\n\t\t\t};\n\t\t\tthis.setAnalyticMode(\"UserJourney\",params, () => this.showUserJourney());\n\t\t\tthis.showSessionProperties();\n\t\t},\n\n\n\n\t\tshowGestureMap(){\n\t\t\tthis.logger.log(2,\"showGestureMap\", \"entry > \");\t\n\t\t\tthis.setAnalyticMode(\"Gesture\", {\n\t\t\t\tcolor: this.gestureLineColor.getValue(),\n\t\t\t\tsessions: this.getSelectedSessions()\n\t\t\t}, () => this.showGestureMap());\n\t\t\tthis.showGestureProperties();\n\t\t},\n\n\n\t\tshowScreenMode () {\n\t\t\tconst newMode = this.screenModeRadioList.getValue()\n\t\t\tthis.setAnalyticMode(newMode, {\n\t\t\t\tsessions: this.getSelectedSessions()\n\t\t\t}, () => this.showScreenMode());\n\t\t\tcss.remove(this.screenModeDiv, \"MatcToolbarSectionHidden\")\n\t\t\tthis.logger.log(-1,\"showScreenMode\", \"exit > \", newMode);\n\t\t}, \n\t\t\n\t\tchangeScreenMode (m) {\n\t\t\tthis.logger.log(0,\"changeScreenMode\", \"entry > \", m);\n\t\t},\n\n\t\t/*****************************************************************************************************\n\t\t * Dialogs\n\t\t ****************************************************************************************************/\n\n\n\n\t\tshowDwellDistribution(e){\n\t\t\tthis.logger.log(0,\"showDwellDistribution\", \"entry > \" );\n\n\t\t\tif(this._selectedScreen){\n\n\t\t\t\tvar df = new DataFrame(this.events);\n\t\t\t\tvar analytics  = new Analytics();\n\t\t\t\tvar screenTimeGrouping = analytics.getScreenTimeGrouping(df);\n\t\t\t\tvar dwellTimes = screenTimeGrouping.get(this._selectedScreen.id);\n\n\t\t\t\tif(dwellTimes){\n\n\t\t\t\t\tvar db = new DomBuilder();\n\t\t\t\t\tvar dialog = new Dialog();\n\t\t\t\t\tvar d = db.div(\"MatcPadding DashTaskListDetailsDialog\").build();\n\n\t\t\t\t\tdb.h2(\"MatcDialogTitle\", \"Dwell Time Distribution &quot\" + this._selectedScreen.name + \"&quot\").build(d);\n\n\t\t\t\t\tvar cntr = db.div(\"DashTaskListDialogHist\").build(d);\n\n\t\t\t\t\tvar duration_dist = dwellTimes.hist(null, 10);\n\n\t\t\t\t\tvar hist = this.$new(Histogram);\n\t\t\t\t\thist.setFormTo(function(v){\n\t\t\t\t\t\treturn Math.round(v/1000) + \" sec\";\n\t\t\t\t\t});\n\t\t\t\t\thist.onHover(function(bucket){\n\t\t\t\t\t\treturn  Math.round(bucket.from/1000) + \" - \"  + Math.round(bucket.to/1000) + \" sec (\" +bucket.count + \" x)\" ;\n\t\t\t\t\t});\n\t\t\t\t\thist.setValue(duration_dist, dwellTimes.mean());\n\t\t\t\t\thist.placeAt(cntr);\n\n\t\t\t\t\tdialog.popup(d, e.target);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\n\n\t\t/*****************************************************************************************************\n\t\t * properties view\n\t\t ****************************************************************************************************/\n\n\t\tshowGestureProperties(){\n\t\t\tthis.logger.log(1,\"showGestureProperties\", \"entry > \");\n\t\t\tthis.showProperties();\n\t\t\tcss.remove(this.gestureOptionsDiv, \"MatcToolbarSectionHidden\");\n\t\t},\n\n\n\t\tshowWidgetProperties(model){\n\t\t\tthis.logger.log(1,\"showWidgetProperties\", \"entry > \" + model.id + \" \" + model.name);\n\t\t\tthis.showProperties();\n\n\t\t\tcss.remove(this.widgetNameDiv, \"MatcToolbarSectionHidden\");\n\t\t\tthis.widgetName.value = model.name;\n\n\t\t\tconst data = this.canvas.getWidgetData(model);\n\n\t\t\tif(data[model.id]){\n\t\t\t\tconst widgetData = data[model.id];\n\n\t\t\t\tthis.widgetClickRing.setPs(widgetData.clicksRel);\n\t\t\t\tthis.widgetClickRing.setValue(widgetData.clicksAbs);\n\n\t\t\t\t// vs firstClicksRelApp\n\t\t\t\tif(isNaN(widgetData.firstClicksRelScreen)){\n\t\t\t\t\twidgetData.firstClicksRelScreen = 0;\n\t\t\t\t}\n\t\t\t\tthis.widgetFirstClickRing.setPs(widgetData.firstClicksRelScreen);\n\t\t\t\tthis.widgetFirstClickRing.setValue(widgetData.firstClicksAbs);\n\n\n\t\t\t\tthis.setTextContent(this.widgetDiscoverSTDLabel, \"+/-\" + Math.round(widgetData.discoverTimeStd / 1000) + \"s\")\n\t\t\t\tthis.setTextContent(this.widgetDiscoverLabel, Math.round(widgetData.discoverTimeAbs / 1000) + \"s\");\n\t\t\t}\n\t\t},\n\n\n\n\t\tshowScreenProperties(model){\n\t\t\tthis.logger.log(-1,\"showScreenProperties\", \"entry\");\n\t\t\tthis.showProperties();\n\n\t\t\tcss.remove(this.screenNameDiv, \"MatcToolbarSectionHidden\");\n\n\t\t\tthis.screenName.value = model.name;\n\n\t\t\tvar times;\n\t\t\tvar views;\n\t\t\tvar clicks;\n\t\t\tvar widgetClicks;\n\t\t\tvar screenTests;\n\t\t\tif(!model.style.overlay){\n\t\t\t\ttimes = this.canvas.getScreenDwellTime();\n\t\t\t\tviews = this.canvas.getScreenViews();\n\t\t\t\tclicks = this.canvas.getScreenClicks();\n\t\t\t\twidgetClicks = this.canvas.getScreenWidgetClicks();\n\t\t\t\tscreenTests = this.canvas.getScreenTests();\n\t\t\t} else {\n\t\t\t\ttimes = this.canvas.getOverlayDwellTime();\n\t\t\t\tviews = this.canvas.getOverlayViews();\n\t\t\t\tclicks = this.canvas.getOverlayClicks();\n\t\t\t\twidgetClicks = this.canvas.getOverlayWidgetClicks();\n\t\t\t\tscreenTests = this.canvas.getOverlayTest();\n\t\t\t}\n\n\t\t\tvar time =times.times[model.id];\n\t\t\tif(!time){\n\t\t\t\ttime = 0;\n\t\t\t}\n\n\n\t\t\tvar sClick = clicks.clicks[model.id];\n\t\t\tvar wClicks = widgetClicks.clicks[model.id];\n\n\t\t\tvar totalClicksOnScreen = sClick + wClicks;\n\t\t\tvar avgDwell = (time /times.sessions) ;\n\n\t\t\tvar count =views.counts[model.id];\n\t\t\tif(!count){\n\t\t\t\tcount = 0;\n\t\t\t}\n\n\t\t\tvar tests = screenTests.counts[model.id];\n\t\t\tif(!tests){\n\t\t\t\ttests = 0;\n\t\t\t}\n\n\n\t\t\tthis.screenTotalViewRing.setValue(count);\n\t\t\tthis.screenTotalViewRing.setPs((count / views.total));\n\n\t\t\t//(count / times.sessions)\n\t\t\tthis.screenTestRing.setValue(tests);\n\t\t\tthis.screenTestRing.setPs((tests / screenTests.sessions));\n\n\n\t\t\tthis.screenClickRing.setPs(sClick / totalClicksOnScreen);\n\t\t\tthis.screenClickRing.setValue(sClick);\n\n\n\t\t\tthis.screenWidgetClickRing.setPs(wClicks / totalClicksOnScreen);\n\t\t\tthis.screenWidgetClickRing.setValue(wClicks);\n\n\n\t\t\tthis.screenDwellRing.setPs(time / times.total);\n\t\t\tthis.screenDwellRing.setValue(Math.round( avgDwell / 1000) + \"s\");\n\n\n\t\t},\n\n\n\t\tshowSessionProperties(){\n\t\t\tthis.logger.log(1,\"showSessionProperties\", \"entry\");\n\t\t\tthis.showProperties();\n\n\t\t\t// css.remove(this.sessionDiv, \"MatcToolbarSectionHidden\");\n\t\t\tcss.remove(this.sessionOptionsDiv, \"MatcToolbarSectionHidden\");\n\t\n\n\t\t\tif (this.sessionTreeCheckBox.getValue()){\n\t\t\t\tcss.add(this.sessionTaskCntr, \"MatcToolbarSectionHidden\")\n\t\t\t\tcss.add(this.sessionLineColor.domNode, \"hidden\");\n\t\t\t\tcss.add(this.sessionTaskBtn.domNode, \"hidden\");\n\t\t\t\tcss.remove(this.sessionShowDiv, 'MatcToolbarSectionHidden')\n\t\t\t\t// css.add(this.sessionTaskLineColor.domNode, \"hidden\");\n\t\t\t\tcss.add(this.sessionLineColor.domNode, \"hidden\");\n\t\t\t\tcss.add(this.sessionOutlierDiv, \"MatcToolbarSectionHidden\")\n\t\t\t\tcss.add(this.sessionOutlierCheckbox.domNode, \"hidden\");\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\tcss.remove(this.sessionTaskCntr, \"MatcToolbarSectionHidden\")\n\t\t\t\tcss.remove(this.sessionLineColor.domNode, \"hidden\");\n\t\t\t\tcss.remove(this.sessionTaskBtn.domNode, \"hidden\");\n\t\t\t\tcss.add(this.sessionShowDiv, 'MatcToolbarSectionHidden')\n\t\t\t\t// css.remove(this.sessionTaskLineColor.domNode, \"hidden\");\n\t\t\t\tcss.remove(this.sessionLineColor.domNode, \"hidden\");\n\t\t\t\tcss.remove(this.sessionOutlierDiv, \"MatcToolbarSectionHidden\")\n\t\t\t\tcss.remove(this.sessionOutlierCheckbox.domNode, \"hidden\");\n\t\t\t}\n\t\t},\n\n\n\t\t/*****************************************************************************************************\n\t\t * drop off\n\t\t ****************************************************************************************************/\n\t\tselectDropOffTask () {\n\t\t\tthis.showDropOffProperties()\n\t\t},\n\n\t\tshowDropOffProperties(){\n\t\t\tthis.logger.log(0,\"showDropOffProperties\", \"entry\");\n\n\n\t\t\tlet taskNumber = this.dropOffTaskBtn.getValue()\n\t\t\tlet task = this.testSettings.tasks[taskNumber];\n\t\t\tif (task) {\n\t\t\t\tthis.setAnalyticMode(\"DropOff\", {\n\t\t\t\t\ttime: this.dropOffTimeCheckBox.getValue(),\n\t\t\t\t\ttask: task,\n\t\t\t\t\tcolor: '#ccc'\n\t\t\t\t}, () => this.showDropOffProperties());\n\t\t\t\tcss.remove(this.dropOffConfigDiv, \"MatcToolbarSectionHidden\")\n\t\t\t\tcss.remove(this.dropOffOptionsDiv, \"MatcToolbarSectionHidden\");\n\t\t\t\tcss.remove(this.dropOffChartDivCntr, \"MatcToolbarSectionHidden\")\n\t\t\t\t//css.remove(this.dropOffFunnelDivCntr, \"MatcToolbarSectionHidden\")\n\t\t\t\tthis.showDropOffChart(task)\n\t\t\t\tthis.showProperties();\n\t\t\t} else {\n\t\t\t\tthis.setAnalyticMode(\"DropOff\", {\n\t\t\t\t\ttime: this.dropOffTimeCheckBox.getValue(),\n\t\t\t\t\ttask: null,\n\t\t\t\t\tcolor: '#ccc'\n\t\t\t\t}, () => this.showDropOffProperties());\n\t\t\t\tcss.remove(this.dropOffConfigDiv, \"MatcToolbarSectionHidden\")\n\t\t\t\tcss.remove(this.dropOffOptionsDiv, \"MatcToolbarSectionHidden\")\n\t\t\t\tthis.showProperties();\n\t\t\t}\n\t\t},\n\n\t\tshowDropOffChart (task) {\n\t\t\tvar df = new DataFrame(this.events);\n\t\t\tvar analytics  = new Analytics();\n\t\t\tlet funnel = analytics.getFunnelSummary(df, task, this.annotation);\n\n\t\t\tlet lastStep = funnel[funnel.length-1]\n\n\t\t\tthis.dropoffTaskSuccess.setPs(lastStep.p)\n\t\t\tthis.dropoffTaskSuccess.setValue(Math.round(lastStep.p * 100) + '%')\n\n\t\t\tthis.dropOffTaskDuration.innerText = Math.round(lastStep.durationMean / 100) / 10 + 's'\n\t\t\tthis.dropOffTaskDurationLabel.innerText = '+/-' + Math.round(lastStep.durationStd / 100) / 10 + 's'\n\n\t\t\tthis.dropOffInteractions.innerText = Math.round(lastStep.interactionsMean)\n\t\t\tthis.dropOffInteractionsLabel.innerText = '+/-' + Math.round(lastStep.interactionsStd)\n\t\t},\n\n\t\tshowDropOffFunnel (funnel) {\n\t\t\tthis.dropOffChartDiv.innerHTML = ''\n\t\t\tlet db = new DomBuilder()\n\t\t\tlet cntr = db.div().build()\n\t\t\tfunnel.forEach((step, i) => {\n\t\t\t\tif(step.event){\n\t\t\t\t\tdb.span('MatcDashLabel', this.getNiceEventLabel(step.event, i)).build(cntr)\n\t\t\t\t\tlet bar = db.div('MatcToolbarDropOffChartBar', Math.round(step.p * 100) + '%').build(cntr)\n\t\t\t\t\tbar.style.background = this.greenToRed(step.p)\n\t\t\t\t\tbar.style.width = step. p * 100 + '%'\n\t\t\t\t}\n\t\t\t})\n\t\t\tthis.dropOffChartDiv.appendChild(cntr)\n\t\t},\n\n\t\tgetNiceEventLabel (event, i){\n\t\t\tif (this.model){\n\t\t\t\tvar row = [];\n\t\t\t\tif(event.widget){\n\t\t\t\t\tif(event.type ==\"WidgetGesture\" && event.gesture){\n\t\t\t\t\t\tlet gesture = event.gesture;\n\t\t\t\t\t\trow = [this.getGestureLabel(gesture.type),  this.getWidgetName(event.widget)];\n\t\t\t\t\t} else if(event.state && (event.type == \"WidgetClick\" || event.type == \"WidgetChange\")  ){\n\t\t\t\t\t\treturn this.getEventStateLabel(event.state) + ` -  ` + this.getWidgetName(event.widget) + ' @ ' + this.getScreenName(event.screen);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this.getEventLabel(event.type) + ` -  ` + this.getWidgetName(event.widget) + ' @ ' + this.getScreenName(event.screen);\n\t\t\t\t\t}\n\t\t\t\t} else if(event.type ==\"ScreenGesture\" && event.gesture){\n\t\t\t\t\tlet gesture = event.gesture;\n\t\t\t\t\trow = [\"Screen \" + this.getGestureLabel(gesture.type), this.getScreenName(event.screen)];\n\t\t\t\t}else {\n\t\t\t\t\trow = [this.getEventLabel(event.type), this.getScreenName(event.screen)];\n\t\t\t\t}\n\t\t\t\treturn row[0] + \" - \" +row[1]+ \"\";\n\t\t\t}\n\t\t\treturn this.getNLS(\"dash.perf.dropoff.step\") + i;\n\t\t},\n\n\n\t\tshowHeatMapProperties(){\n\t\t\tthis.showProperties();\n\t\t\tcss.remove(this.heatmapDiv,\"MatcToolbarSectionHidden\" );\n\t\t\tthis.heatmapClickList.setValue(this.analyticHeatMapClicks);\n\t\t},\n\n\n\n\t\t/*****************************************************************************************************\n\t\t * show properties section and make sure the scroll bar is moved too!\n\t\t ****************************************************************************************************/\n\n\t\tshowProperties(){\n\t\t\tcss.remove(this.propertiesCntr, \"MatcToolbarSectionHidden\");\n\t\t\tif(this.canvas){\n\t\t\t\tcss.add(this.canvas.scrollRight, \"MatcCanvasScrollBarRightOpen\");\n\t\t\t}\n\t\t},\n\n\t\thideProperties(){\n\t\t\tconsole.debug(\"hideProperties() > enter\")\n\t\t\tif (this.analyticMode == \"UserJourney\"){\n\t\t\t\tthis.hideAllSections();\n\t\t\t\tthis.showSessionProperties();\n\t\t\t\treturn\n\t\t\t} \n\t\t\t\n\t\t\tif (this.analyticMode == \"HeatmapClick\"){\n\t\t\t\tthis.hideAllSections();\n\t\t\t\tthis.showHeatMapProperties();\n\t\t\t\treturn\n\t\t\t} \n\t\t\t\n\t\t\t// if (this.analyticMode == \"HeatmapClick\"){\n\t\t\t// \tthis.hideAllSections();\n\t\t\t// \tthis.showHeatMapProperties();\n\t\t\t// \treturn\n\t\t\t// } \n\t\t\t\n\t\t\t// css.add(this.propertiesCntr, \"MatcToolbarSectionHidden\");\n\t\t\t// if(this.canvas){\n\t\t\t// \tcss.remove(this.canvas.scrollRight, \"MatcCanvasScrollBarRightOpen\");\n\t\t\t// }\n\t\t\tthis.hideAllSections();\n\t\t\t\n\t\t},\n\n\n\t\thideAllSections(){\n\t\t\tthis.logger.log(3,\"hideAllSections\", \"entry\");\n\t\t\tfor(var i=0; i< this.sections.length; i++){\n\t\t\t\tvar section = this.sections[i];\n\t\t\t\tcss.add(section, \"MatcToolbarSectionHidden\");\n\t\t\t}\n\t\t},\n\n\n\t\t/**********************************************************************\n\t\t * Canvas Delegates\n\t\t **********************************************************************/\n\n\n\n\t\t/**********************************************************************\n\t\t * DI stuff\n\t\t **********************************************************************/\n\n\n\t\tsetController(c){\n\t\t\tthis.logger.log(3,\"setController\", \"entry\");\n\t\t\tthis.controller = c;\n\t\t},\n\n\t\tsetCanvas(c){\n\t\t\tthis.logger.log(3,\"setCanvas\", \"entry\");\n\t\t\tthis.canvas = c;\n\n\t\t},\n\n\t\tsetModelFactory(f){\n\t\t\tthis.logger.log(3,\"setModelFactory\", \"entry\");\n\t\t\tthis.factory = f;\n\t\t},\n\n\t\tsetModel(m){\n\t\t\tthis.model = this.createInheritedModel(m);\n\t\t\tthis.modelName = m.name\n\t\t\tthis.renderToolbar();\n\t\t\tthis.render();\n\t\t},\n\n\t\tsetAnnotation(a){\n\t\t\tthis.logger.log(-1,\"setAnnotation\", \"enter > # \" );\n\t\t\tthis.annotation = a;\n\t\t},\n\n\t\tsetTest(t){\n\t\t\tthis.logger.log(2,\"setTest\", \"enter > # \" );\n\t\t\tthis.testSettings = t;\n\t\t},\n\n\t\tsetEvents(events){\n\t\t\tthis.logger.log(2,\"setEvents\", \"enter > # \" + events.length);\n\t\t\tthis.events = events;\n\t\t},\n\n\t\tsetMode(mode){\n\t\t\tthis.logger.log(2,\"setMode\", \"entry > '\" + mode + \"'\");\n\t\t\tthis.mode = mode;\n\t\t\tthis.onModeChange();\n\t\t},\n\n\n\t\tonModeChange () {\n\n\t\t},\n\n\n\t\t/********************************************************\n\t\t * Helper\n\t\t ********************************************************/\n\n\t\tsetSelectedViewButton(){\n\t\t},\n\n\t\tcreateRing(lbl, help, distCallBack){\n\n\t\t\tvar bgColor = \"#cecece\";\n\t\t\tvar settings = this.canvas.getSettings();\n\t\t\tif(settings.canvasTheme == \"MatcDark\"){\n\t\t\t\tbgColor = \"#777\";\n\t\t\t}\n\t\t\tvar ring = this.$new(Ring, {size:100, width:5, backgroundColor: bgColor, color:\"#365fff\", color2:\"#83b600\", color3:\"#ffa713\"});\n\t\t\tring.setDomSize(120,120);\n\t\t\tring.setLabel(lbl);\n\n\t\t\tif(distCallBack){\n\t\t\t\tring.setAction(\"mdi mdi-chart-bar\");\n\t\t\t\tthis.tempOwn(ring.on(\"action\", lang.hitch(this, distCallBack)));\n\t\t\t}\n\n\t\t\tif(help){\n\t\t\t\tring.setHelp(true);\n\t\t\t\tthis.tempOwn(ring.on(\"help\", lang.hitch(this, \"showHelpDialog\", help)));\n\t\t\t}\n\n\t\t\tcss.add(ring.domNode, \"MatcMarginTop\");\n\t\t\treturn ring;\n\t\t},\n\n\t\tcreateToolBarItem(label, callback, icon, parent){\n\t\t\tvar a = document.createElement(\"div\");\n\t\t\tcss.add(a,\"MatcToolbarItem MatcToolbarPrimaryItem\");\n\n\t\t\tif(icon){\n\t\t\t\tvar i = document.createElement(\"span\");\n\t\t\t\tcss.add(i,icon);\n\t\t\t\ta.appendChild(i);\n\t\t\t}\n\n\t\t\t// var lbl = document.createElement(\"label\");\n\t\t\t// css.add(lbl, \"MatcToolbarLabel\");\n\t\t\t// lbl.innerHTML =label;\n\t\t\t// a.appendChild(lbl);\n\n\n\t\t\tif(callback){\n\t\t\t\tthis.tempOwn(on(a, touch.press, lang.hitch(this, callback)));\n\t\t\t}\n\t\t\tif(!parent){\n\t\t\t\tthis.properties.appendChild(a);\n\t\t\t} else {\n\t\t\t\tparent.appendChild(a);\n\t\t\t}\n\n\t\t\treturn a;\n\t\t},\n\n\n\t\tcreateInput(content,placeholder){\n\n\t\t\tvar div = document.createElement(\"div\");\n\t\t\tcss.add(div, \"MatcToolbarItem\");\n\t\t\tcontent.appendChild(div);\n\n\t\t\tlet input = document.createElement(\"input\");\n\t\t\tinput.disabled = true;\n\t\t\tcss.add(input, \"MatcIgnoreOnKeyPress MatcToobarInput  MatcToobarInlineEditDisabled\");\n\t\t\tdiv.appendChild(input);\n\n\t\t\tif(placeholder){\n\t\t\t\tinput.placeholder = placeholder;\n\t\t\t}\n\t\t\treturn input;\n\t\t},\n\n\t\tcreateContent(parent){\n\t\t\tvar content = document.createElement(\"div\");\n\t\t\tcss.add(content, \"MatcToolbarSectionContent\");\n\t\t\tparent.appendChild(content);\n\t\t\treturn content;\n\t\t},\n\n\t\tcreateSection(lbl, parentNode, canBeHidden = true){\n\n\t\t\tconst parent = document.createElement(\"div\");\n\t\t\tcss.add(parent, \"MatcToolbarSection\");\n\n\t\t\tconst header = this.createSectionHeader( parent, lbl);\n\n\t\t\t/**\n\t\t\t * store the value somehow in a cookie? and use it during restore??\n\t\t\t */\n\t\t\tthis.own(on(header, touch.press, () => {\n\t\t\t\tcss.toggle(parent, \"MatcToolbarSectionCollabsed\");\n\t\t\t\treturn false;\n\t\t\t}));\n\n\t\t\tif (canBeHidden) {\n\t\t\t\tthis.sections.push(parent);\n\t\t\t}\n\t\t\tparentNode.appendChild(parent);\n\t\t\treturn parent;\n\t\t},\n\n\t\tcreateSectionHeader(parent, lbl, hasTemplateMarker){\n\t\t\tvar div = document.createElement(\"div\");\n\t\t\tcss.add(div,\"MatcToolbarSectionLabel\");\n\t\t\tparent.appendChild(div);\n\n\t\t\tdiv.innerHTML=lbl;\n\n\t\t\tif(hasTemplateMarker){\n\t\t\t\tvar span = document.createElement(\"span\");\n\t\t\t\tcss.add(span, \"MatcToolbarSectionMarker\");\n\t\t\t\tspan.innerHTML=\" *\";\n\t\t\t\tdiv.appendChild(span);\n\t\t\t}\n\n\t\t\tvar chev = document.createElement(\"span\");\n\t\t\tcss.add(chev, \"MatcToolbarSectionChevron mdi mdi-chevron-down\");\n\t\t\tdiv.appendChild(chev);\n\n\t\t\treturn div;\n\t\t},\n\n\n\n\t\tcreateBigNumber(db, cntr, label, help){\n\t\t\tvar numberCntr = db.div(\"MatcToolBarNumberCntr MatcMarginTop\").build(cntr);\n\t\t\tlet l = db.div(\"MatcDashLabel\", label).build(numberCntr);\n\t\t\tvar main =  db.div(\"MatcToolbarBigLabel\").build(numberCntr);\n\t\t\tvar little =  db.div(\"MatcToolbarDetailLabel\").build(numberCntr);\n\t\t\tif(help){\n\t\t\t\tvar node =  db.span(\"mdi mdi-help-circle MatcHelpIcon\").build(l);\n\t\t\t\tthis.tempOwn(on(node, touch.press, lang.hitch(this, \"showHelpDialog\", help)));\n\t\t\t}\n\n\t\t\treturn [main, little];\n\t\t},\n\n\n\t\t/********************************************************\n\t\t * Main menu handlers\n\t\t ********************************************************/\n\n\t\tonExit(){\n\t\t\tthis.logger.log(0,\"onExit\", \"entry\", this.isPublic);\n\t\t\tif(this.isPublic){\n\t\t\t\thash(\"#/examples/\"+ this.model.id + \"/design.html\");\n\t\t\t} else {\n\t\t\t\thash(\"#/apps/\"+ this.model.id + \"/design.html\");\n\t\t\t}\n\t\t},\n\n\t\tonShare(){\n\t\t\tthis.logger.log(0,\"onShare\", \"entry\");\n\t\t},\n\n\t\t/********************************************************\n\t\t * Selection handlers!\n\t\t ********************************************************/\n\n\t\tonWidgetSelected(widget){\n\t\t\tthis.logger.log(2,\"onWidgetSelected\", \"entry\");\n\n\t\t\t/**\n\t\t\t * We might want to blur some stuff\n\t\t\t */\n\t\t\tif(this._selectedWidget && this._selectedWidget.id != widget.id){\n\t\t\t\tthis.logger.log(3,\"onWidgetSelected\", \"exit > no new selection!\");\n\t\t\t\tthis.blurWidgetProperties();\n\t\t\t}\n\n\n\t\t\tthis.cleanUp();\n\n\n\t\t\tthis._selection = \"widget\";\n\t\t\tthis._selectedWidget = widget;\n\t\t\tthis.showWidgetProperties(widget);\n\n\n\t\t\tthis.logger.log(3,\"onWidgetSelected\", \"exit\");\n\t\t},\n\n\n\t\tonScreenSelected(screen){\n\t\t\tthis.logger.log(-1, \"onScreenSelected\", \"entry\", this._selectedScreen);\n\n\t\t\t/**\n\t\t\t * We don not want to rerender on scroll\n\t\t\t */\n\t\t\tif(this._selectedScreen && this._selectedScreen.id == screen.id){\n\t\t\t\tthis.logger.log(3,\"onScreenSelected\", \"exit > no new selection!\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.cleanUp();\n\t\t\tthis._selection = \"screen\";\n\t\t\tthis._selectedScreen = screen;\n\t\t\tthis.showScreenProperties(screen);\n\n\n\t\t\tthis.logger.log(4,\"onScreenSelected\", \"exit\");\n\t\t},\n\n\n\n\n\t\tonLineSelected(line){\n\t\t\tthis.cleanUp();\n\t\t\tthis._selection = \"line\";\n\t\t\tthis._selectedLine = line;\n\t\t},\n\n\n\n\t\tonMultiSelect(selection){\n\t\t\tthis.cleanUp();\n\n\t\t\tthis._selection = \"multi\";\n\t\t\tthis._selectedMulti = selection;\n\t\t},\n\n\t\tonGroupSelect(group){\n\t\t\tthis.cleanUp();\n\t\t\tthis._selection = \"group\";\n\t\t\tthis._selectedGroup = group;\n\t\t\tthis.showGroupProperties(group);\n\t\t},\n\n\n\n\t\t// onCanvasSelected(){\n\t\t// \tthis.cleanUp();\n\t\t// \tthis.hideProperties();\n\t\t// },\n\n\n\t\t/**\n\t\t * method which will update all properties. method is called from controller!\n\t\t */\n\t\tupdatePropertiesView(){\n\n\t\t\tif(this._selectedWidget ){\n\t\t\t\tthis.onWidgetSelected(this._selectedWidget );\n\t\t\t}\n\t\t},\n\n\n\t\t/********************************************************\n\t\t * Show Settings\n\t\t ********************************************************/\n\n\n\t\tonShowSettings(e){\n\n\t\t\tvar db = new DomBuilder();\n\n\t\t\tdb = new DomBuilder();\n\t\t\tvar popup = db.div(\"MatcDialog MatcHeaderDialog MatcPadding\").build();\n\n\t\t\tvar cntr = db.div(\"\").build(popup);\n\n\t\t\tvar settings = this.canvas.getSettings();\n\n\n\t\t\t/**\n\t\t\t * Themes\n\t\t\t */\n\t\t\tdb.label(\"\",\"Theme :\").build(cntr);\n\t\t\tvar themeList = this.$new(RadioBoxList);\n\t\t\tthemeList.setOptions([\n\t\t\t\t{value:\"MatcLight\", label: \"Light\"},\n\t\t\t\t{value:\"MatcDark\", label:\"Dark\"},\n\t\t\t\t{value: \"MatcAuto\", label: \"Auto\"}\n\t\t\t]);\n\t\t\tthemeList.setValue(settings.canvasTheme);\n\t\t\tthemeList.placeAt(cntr);\n\n\t\t\t/**\n\t\t\t * Mouse Wheel\n\t\t\t */\n\t\t\tdb.label(\"MatcMarginTop\",\"Mouse Wheel / Touchpad Scroll :\").build(cntr);\n\t\t\tvar mouseWheelList = this.$new(RadioBoxList);\n\t\t\tmouseWheelList.setOptions([\n\t\t\t\t{value:\"scroll\", label: \"Scroll Canvas\"},\n\t\t\t\t{value:\"zoom\", label:\"Zoom Canvas\"}\n\t\t\t]);\n\t\t\tmouseWheelList.setValue(settings.mouseWheelMode);\n\t\t\tmouseWheelList.placeAt(cntr);\n\n\n\t\t\tvar bar = db.div(\"MatcButtonBar MatcMarginTopXL\").build(popup);\n\t\t\tvar save = db.a(\"MatcButton MatcButtonPrimary\", \"Save\").build(bar);\n\t\t\tvar cancel = db.a(\" MatcLinkButton \", \"Cancel\").build(bar);\n\n\n\n\t\t\tvar dialog = new Dialog();\n\t\t\tdialog.own(on(cancel, touch.press, lang.hitch(dialog, \"close\")));\n\t\t\tdialog.own(on(save, touch.press, lang.hitch(this, \"onSaveSettings\", dialog, themeList, mouseWheelList)));\n\n\t\t\tdialog.popup(popup, e.target);\n\n\t\t\tthis.canvas.enableMouseZoom(false);\n\t\t\tthis.canvas.setState(\"simulate\");\n\n\t\t\tthis.logger.log(0,\"onShowSettings\", \"exit > \");\n\t\t},\n\n\t\tonSaveSettings(dialog, themeList,mouseWheelList){\n\t\t\tvar settings = {\n\t\t\t\tcanvasTheme: themeList.getValue(),\n\t\t\t\tmouseWheelMode : mouseWheelList.getValue()\n\t\t\t};\n\n\t\t\tthis.canvas.setSettings(settings);\n\t\t\tthis.canvas.enableMouseZoom(true);\n\t\t\tdialog.close();\n\t\t},\n\n\n\t\t/********************************************************\n\t\t * SignUp\n\t\t ********************************************************/\n\n\n\t\tshowSignUpDialog(e){\n\n\t\t\tvar d = new Dialog();\n\n\t\t\tvar db = new DomBuilder();\n\n\t\t\tvar div = db.div(\"MatcDialog \").build();\n\n\n\t\t\tthis._createSignUpForm(d, div);\n\n\t\t\td.popup(div, e.target);\n\t\t},\n\n\n\t\t_createSignUpForm(d, div){\n\t\t\tlet f = this.$new(Form);\n\t\t\tf.render([\n\t\t\t\t{\n\t\t\t\t\tlabel: \"Email\",\n\t\t\t\t\tname:\"email\",\n\t\t\t\t\ttype:\"text\",\n\t\t\t\t\trequired:\"true\",\n\t\t\t\t\tplaceholder:\"Your email\",\n\t\t\t\t\tcss:\"input-lg MatcIgnoreOnKeyPress\",\n\t\t\t\t\terror:\"We need your email.\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: \"Password\",\n\t\t\t\t\tname:\"password\",\n\t\t\t\t\ttype:\"password\",\n\t\t\t\t\tmin:6,\n\t\t\t\t\tplaceholder:\"Your password\",\n\t\t\t\t\tcss:\"input-lg MatcIgnoreOnKeyPress\",\n\t\t\t\t\terror:\"The password should have at least six characters.\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'I have read the <a href=\"#/termsofservice.html\" target=\"_blank\">terms of service</a>',\n\t\t\t\t\tname:\"tos\",\n\t\t\t\t\ttype:\"check\",\n\t\t\t\t\trequired:\"true\",\n\t\t\t\t\tcss:\"MatcFormCheckBox MatcIgnoreOnKeyPress\",\n\t\t\t\t\terror:\"You must accept the terms of service!\"\n\t\t\t\t}\n\t\t\t], [\n\t\t\t\t{label : \"Cancel\", css:\"MatcLinkButton\", click: lang.hitch(d, \"close\")},\n\t\t\t\t{label : \"Create Free Account\", css:\"MatcButton MatchButtonGreen\", click: lang.hitch(this, \"_signUpAndNew\",d,f)}\n\t\t\t]);\n\n\t\t\tf.placeAt(div);\n\t\t\tf.startup();\n\n\t\t\treturn f;\n\t\t},\n\n\t\t_signUpAndNew(dialog, form, data){\n\n\t\t\tvar valid = form.validateForm(null, true);\n\n\t\t\tif(valid){\n\n\t\t\t\tresult = this._doPost(\"rest/user\", data);\n\n\t\t\t\tif(result.type==\"error\"){\n\t\t\t\t\tif(result.errors.indexOf(\"user.email.not.unique\") >=0){\n\t\t\t\t\t\tform.showError(\"The email is already taken! Please enter another one!\", \"email\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tform.showError(\"Something went wrong! Please try again!\", \"\");\n\t\t\t\t\t}\n\n\t\t\t\t\tdialog.shake();\n\t\t\t\t} else {\n\t\t\t\t\tdialog.close();\n\n\t\t\t\t\tvar result = this._doPost(\"rest/login/\", data);\n\t\t\t\t\tif(result.type!=\"error\"){\n\n\t\t\t\t\t\twindow.location.href = \"/my-account.html\";\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(\"_signUpAndSave() > Could not sign in user\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdialog.shake();\n\t\t\t}\n\t\t},\n\n\t\t/********************************************************\n\t\t * CleanUp\n\t\t ********************************************************/\n\n\n\t\tcleanUp(){\n\t\t\tthis.hideAllSections();\n\t\t\tthis.unselect()\n\t\t},\n\n\t\tunselect() {\n\t\t\tthis._selectedWidget = null;\n\t\t\tthis._selectedLine  = null;\n\t\t\tthis._selectedScreen = null;\n\t\t\tthis._selectedMulti = null;\n\t\t\tthis._selectedGroup = null;\n\t\t\tthis._selection = null;\n\t\t},\n\n\t\tblurWidgetProperties(){\n\n\t\t}\n    },\n    mounted () {\n\t\tthis.db = new DomBuilder();\n    }\n}\n</script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticToolbar.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticToolbar.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./AnalyticToolbar.vue?vue&type=template&id=edc5276c\"\nimport script from \"./AnalyticToolbar.vue?vue&type=script&lang=js\"\nexport * from \"./AnalyticToolbar.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"MatcCanvas MatcAnalyticCanvas\"},[_vm._m(0),_vm._m(1),_c('div',{staticClass:\"MatcCanvasScrollBar MatcCanvasScrollBarBottom\",style:('padding-left:' + this.layerListWidth + 'px'),attrs:{\"data-dojo-attach-point\":\"scrollBottom\"}},[_vm._m(2)]),_c('div',{staticClass:\"MatcMessage\",attrs:{\"data-dojo-attach-point\":\"message\"}})])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"MatcCanvasFrame\",attrs:{\"data-dojo-attach-point\":\"frame\"}},[_c('div',{staticClass:\"MatcCanvasContainer MatcCanvasZoomable\",attrs:{\"data-dojo-attach-point\":\"container\"}},[_c('div',{staticClass:\"MatcCanvasContainer\",attrs:{\"data-dojo-attach-point\":\"zoomContainer\"}},[_c('div',{staticClass:\"MatcCanvasLayer\",attrs:{\"data-dojo-attach-point\":\"screenContainer\"}}),_c('div',{staticClass:\"MatcCanvasLayer\",attrs:{\"data-dojo-attach-point\":\"widgetContainer\"}}),_c('div',{staticClass:\"MatcCanvasLayer MatcCanvasSVGLayer\",attrs:{\"data-dojo-attach-point\":\"svgContainer\"}})]),_c('div',{staticClass:\"MatcDnDLayer\",attrs:{\"data-dojo-attach-point\":\"dndContainer\"}})])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"MatcCanvasScrollBar MatcCanvasScrollBarRight\",attrs:{\"data-dojo-attach-point\":\"scrollRight\"}},[_c('div',{staticClass:\"MatcCanvasScrollBarCntr MatcCanvasScrollBarCntrRight\",attrs:{\"data-dojo-attach-point\":\"scrollRightCntr\"}},[_c('div',{staticClass:\"MatchCanvasScrollHandle\",attrs:{\"data-dojo-attach-point\":\"scrollRightHandler\"}})])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"MatcCanvasScrollBarCntr MatcCanvasScrollBarCntrBottom\",attrs:{\"data-dojo-attach-point\":\"scrollBottomCntr\"}},[_c('div',{staticClass:\"MatchCanvasScrollHandle\",attrs:{\"data-dojo-attach-point\":\"scrollBottomHandler\"}})])\n}]\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"MatcCanvas MatcAnalyticCanvas\"})\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n<template>\n    <div class=\"MatcCanvas MatcAnalyticCanvas\">\n    </div>\n  </template>\n  \n\n  <script>\n \n  import css from \"dojo/css\";\n  import on from \"dojo/on\";\n  import lang from \"dojo/_base/lang\";\n  import DomBuilder from \"common/DomBuilder\"; \n  \n  export default {\n    name: \"UserJourney\",\n    mixins: [],\n    data: function () {\n      return {\n      };\n    },\n    components: {},\n    methods: {\n\n      highlightSession (sessionID = false) {\n        if (!this.analyticParams.tree) {\n          this.highlightAnalyticLine(sessionID)\n        }\n      },\n\n\n      highlightAnalyticLine(sessionID) {\n        this.logger.log(1, \"highlightAnalyticLine\", \"entry > \", sessionID);\n          if (this.analyticLines) {\n            for (let id in this.analyticLines) {\n              this.hideOrShowLine(id, sessionID)    \n            }\n          }\n      },\n\n      hideOrShowLine (id, sessionID) {\n        const line = this.analyticLines[id]\n        if (line) {\n          if (!sessionID || sessionID === id) {\n            line.style('opacity', 1)\n          } else {\n            line.style('opacity', 0)\n          }\n        }\n        // fix to also show task lines\n        const line2 = this.analyticLines[id + 'taskBackGround']\n        if (line2) {\n          if (!sessionID || sessionID +'taskBackGround' === id + 'taskBackGround') {\n            line2.style('opacity', 1)\n          } else {\n            line2.style('opacity', 0)\n          }\n        }\n        if (this.analyticCircles[id]) {\n          const divs = this.analyticCircles[id]             \n          divs.forEach(div => {\n            if (!sessionID || sessionID === id) {\n              div.style.opacity = 1                  \n            } else {\n              div.style.opacity = 0\n            }\n          })   \n        }\n      },\n\n\n    \n  \n      _render_global_UserJourney() {\n        this.logger.log(1, \"_render_global_UserJourney\", \"entry > \");\n        this.setBW(true);\n        this.cleanUpAnalytics()\n        if (!this.analyticParams.tree) {\n          this._renderUserSingleLines();\n        } else {\n          this._renderUserTree();\n        }\n      },\n  \n      _renderUserTree() {\n        let sessions = this.getUserJourney();\n        let db = new DomBuilder();\n        let time = this.analyticParams.time\n        \n        let selectedSessions = this.analyticParams.sessions;\n        let graph = {};\n        let maxCount = 0;\n        let maxMeanDuration = 0\n      \n        for (let sessionID in selectedSessions) {\n          if (selectedSessions[sessionID] === true) {\n            let session = sessions[sessionID];\n            if (session) {\n              this._getSessionGraph(session, graph, time);\n              maxCount++;\n            } else {\n              console.debug(\"_renderUserTree() > No session for \", sessionID);\n            }\n          }\n        }\n  \n        /**\n         * We might have the situation that the users creates loopes\n         * in one session. This will cause the count to be bigger than the\n         * session count (maxCount). This messes up the graph. To make it\n         * nice again, we update maxCount\n         */\n    \n        for (let id in graph) {\n          const l = graph[id]\n          if (l.count > maxCount) {\n            console.warn(\"_renderUserTree() > Update maxcount, because l.count bigger than max count\", )\n            maxCount = l.count\n          }\n          const meanDuration = l.duration / l.count\n          maxMeanDuration = Math.max(meanDuration, maxMeanDuration)\n        }\n  \n        const divs = {};\n        for (let id in graph) {\n          const l = graph[id];\n          const line = [];\n          line.push({\n            x: l.from.x,\n            y: l.from.y,\n            d: \"right\",\n          });\n          line.push({\n            x: l.to.x,\n            y: l.to.y,\n            d: \"right\",\n          });\n  \n          const meanDuration = l.duration / l.count\n          const p = time ?\n              Math.min(1, meanDuration / maxMeanDuration):\n              Math.min(1, l.count / maxCount)\n  \n          const width = Math.min(15, Math.max(1, Math.round(p * 25))) + 1;\n          const color = this.mixColor(Math.min(1, p));\n          const toID = l.to.x + \",\" + l.to.y;\n          const fromID = l.from.x + \",\" + l.from.y;\n          \n          if (!divs[toID]) {\n            divs[toID] = this._renderTreeEvent(l.to.x, l.to.y, width, color, db);\n          }\n        \n          if (!divs[fromID]) {\n            divs[fromID] = this._renderTreeEvent(l.from.x,l.from.y,width,color,db);\n          }\n  \n          this.drawAnalyticLine(id, line, color, width, this.taskLineOpacity);\n        }\n      },\n  \n  \n  \n      _renderTreeEvent(x, y, width, color, db) {\n        const cntr = db\n          .div(\"MatcAnalyticCanvasEventCntr\")\n          .build(this.widgetContainer);\n\n        cntr.style.left = Math.round(x) + \"px\";\n        cntr.style.top = Math.round(y) + \"px\";\n  \n        const div = db\n          .div(\"MatcAnalyticCanvasEvent MatcAnalyticCanvasEvent\")\n          .build(cntr);\n  \n        const r = Math.round(width * 2);\n        div.style.width = r + \"px\";\n        div.style.height = r + \"px\";\n        div.style.top = -1 * Math.round(r / 2) + \"px\";\n        div.style.left = -1 * Math.round(r / 2) + \"px\";\n        div.style.background = color;\n      },\n  \n      _renderUserSingleLines() {\n        const sessions = this.getUserJourney();\n        const outlierScores = this.getOutlierScores()\n\n        const taskPerformance = this.getTaskPerformance();\n        const db = new DomBuilder();\n  \n        let task = null;\n        if (this.analyticParams.task !== false && this.analyticParams.task >= 0) {\n          task = this.testSettings.tasks[this.analyticParams.task];\n        }\n\n        const selectedSessions = this.analyticParams.sessions;\n        for (let sessionID in selectedSessions) {\n          if (selectedSessions[sessionID] === true) {\n            const session = sessions[sessionID];\n            const matches = taskPerformance[sessionID];\n            const outlierScore = outlierScores[sessionID]\n            if (session) {\n              this._renderUserGraph(sessionID, session, db, task, matches, outlierScore);\n            } else {\n              console.debug( \"_render_global_UserJourney() > No session for \", sessionID   );\n            }\n          }\n        }\n\n        if (this.analyticParams.outlier) {\n          this.showHint(`Found ${Object.values(outlierScores).filter(v => v ===1).length} outliers`)\n        }\n      },\n  \n      \n  \n      _renderUserGraph(sessionID, session, db, task, matches, isOutlier) {\n    \n        const sessionEvents = session.data;\n        const line = [];\n        const sessionLength = sessionEvents.length\n        const matchLines = [];\n  \n        let e = null;\n        let lastDurationEvent\n        let duration = 0\n        let maxDuration = 0\n        let match;\n        if (task && matches) {\n          match = matches[task.id];\n        }\n  \n        // compute line\n        for (let i = 0; i < sessionLength; i++) {\n          e = sessionEvents[i];\n          if (lastDurationEvent) {\n            duration = e.time - lastDurationEvent.time\n            maxDuration = Math.max(duration, maxDuration)\n          }\n          \n          const screenID = this.getEventScreenId(e);\n          const sourceScreen = this.sourceModel.screens[screenID];\n          const zoomedScreen = this.model.screens[screenID];\n          if (sourceScreen && zoomedScreen) {\n            if (e.type == \"SessionStart\") {\n              const x = sourceScreen.x - Math.max(10, Math.round(30 * this.zoom));\n              const y = sourceScreen.y + Math.max(10, Math.round(30 * this.zoom));\n              line.push({ x: x, y: y, d: \"right\", duration:duration, type: e.type, session: e.session });\n            } else if (e.x >= 0 && e.y >= 0 && !e.noheat) {\n              const x = e.x * sourceScreen.w + sourceScreen.x;\n              const y = e.y * sourceScreen.h + sourceScreen.y;\n              line.push({ x: x, y: y, d: \"right\", duration: duration , type: e.type, session: e.session});\n              lastDurationEvent = e\n            }\n            if (match && match.startPosition <= i && match.endPosition >= i) {\n              const point = line[line.length - 1];\n              point.match = true\n              matchLines.push(point);\n            }\n          } else {\n            console.warn(\"_renderUserGraph()\", \"Screen is not there\", e.screen);\n          }\n        }\n        \n        /** Since 4.0.60 we add a last node, if it was screen load */\n        if (e && e.type === 'ScreenLoaded') {\n          const screenID = this.getEventScreenId(e);\n          const sourceScreen = this.sourceModel.screens[screenID];\n          let x = Math.round(sourceScreen.x + sourceScreen.w / 2);\n          let y = Math.round(sourceScreen.y + sourceScreen.h / 2);\n          line.push({ x: x, y: y, d: \"right\", duration:duration, type: e.type, session: e.session});\n          if (match && match.startPosition <=  sessionLength-1 && match.endPosition >= sessionLength-1) {\n              const point = line[line.length - 1];\n              point.match = true\n              matchLines.push(point);\n            }\n        }\n  \n        this.analyticCircles[sessionID] = []\n        // draw all points\n        for (let i = 0; i < line.length; i++) {\n          const p = line[i]\n          const width = Math.round(40 * (p.duration / maxDuration)) + 25\n          const [div, halo, cntr] = this._renderScreenEvent(p.x,p.y, p.type, \"\",db, p.session, width);\n          if (i == line.length -1) {\n            css.add(cntr, \"MatcAnalyticCanvasEventSessionEnd\");\n            div.style.background = this.userJourneyEndColor\n            halo.style.background = this.userJourneyEndColor + 28;\n            halo.style.borderColor = this.userJourneyEndColor;\n          } else if (i > 0) {\n            if (p.match) {\n              div.style.background = this.analyticParams.taskColor;\n              halo.style.background = this.analyticParams.taskColor + 28;\n              halo.style.borderColor = this.analyticParams.taskColor;\n            } else if (isOutlier && this.analyticParams.outlier) {\n            \n              div.style.background = this.analyticParams.outlierColor\n              halo.style.background = this.analyticParams.outlierColor + 28;\n              halo.style.borderColor = this.analyticParams.outlierColor;\n\n            } else {\n              div.style.background = this.analyticParams.color\n              halo.style.background = this.analyticParams.color + 28;\n              halo.style.borderColor = this.analyticParams.color;\n            }\n          }\n          this.analyticCircles[sessionID].push(cntr)\n      \n\n\n        }\n    \n        /**\n         * Render successful lines on top\n         */\n        let lineColor = this.analyticParams.color\n        let lineOpacity = this.taskLineOpacity\n        let lineWidth = 2\n\n        if (this.analyticParams.outlier) {\n          if (isOutlier) {\n            lineColor = this.analyticParams.outlierColor\n            lineOpacity = this.taskLineOpacity\n            lineWidth = 4\n          } else {\n            lineOpacity = this.taskLineOpacity * 0.5\n          }\n        }\n        \n        if (task) {\n          lineOpacity = this.taskLineOpacity * 0.5\n          this.drawStraightAnalyticLine(sessionID+\"taskBackGround\", line, lineColor, lineWidth, lineOpacity);\n          this.drawStraightAnalyticLine(sessionID, matchLines,this.analyticParams.taskColor, 4 ,this.taskLineOpacity);\n        } else {\n          this.drawStraightAnalyticLine(sessionID,line, lineColor, lineWidth, lineOpacity);\n        }\n  \n        return false;\n      },\n  \n     \n      _renderScreenEvent(x, y, type, label, db, screenID, width, r = 15) {\n        const cntr = db\n          .div(\"MatcAnalyticCanvasEventCntr\")\n          .build(this.widgetContainer);\n        cntr.style.left = Math.round(x) + \"px\";\n        cntr.style.top = Math.round(y) + \"px\";\n  \n  \n        const halo = db\n          .div(\"MatcAnalyticCanvasEventHalo\")\n          .build(cntr);\n  \n        halo.style.width = width + \"px\";\n        halo.style.height = width + \"px\";\n        halo.style.top = -1 * Math.round(width / 2) + \"px\";\n        halo.style.left = -1 * Math.round(width / 2) + \"px\";\n   \n        const div = db\n          .div(\"MatcAnalyticCanvasEvent MatcAnalyticCanvasClickableEvent MatcAnalyticCanvasEvent\" + type)\n          .build(cntr);\n  \n        div.style.width = r + \"px\";\n        div.style.height = r + \"px\";\n        div.style.top = -1 * Math.round(r / 2) + \"px\";\n        div.style.left = -1 * Math.round(r / 2) + \"px\";\n  \n        this.tempOwn(on(div, \"click\", lang.hitch(this, \"onScreenEventClick\", screenID)));\n  \n        return [div, halo, cntr];\n      },\n  \n      onScreenEventClick(id, e) {\n        this.stopEvent(e);\n        if (this.toolbar) {\n          this.toolbar.setSelectSessions([id]);\n        }\n      },\n  \n      _getSessionGraph(session, graph) {\n    \n        const sessionEvents = session.data;\n        let from;\n        let e = null\n        let lastDurationEvent// = sessionEvents[0]\n        let duration = 0\n        for (let i = 0; i < sessionEvents.length; i++) {\n          e = sessionEvents[i];\n          // we start only counting durations once there\n          // was an click event\n          if (lastDurationEvent) {\n            duration = e.time - lastDurationEvent.time\n          }\n          \n        /**\n           * Be aware of the overlay...\n           */\n          const screenID = this.getEventScreenId(e);\n          const screen = this.sourceModel.screens[screenID];\n          if (screen) {\n            const to = {};\n            if (e.type == \"SessionStart\") {\n              to.x = screen.x - Math.max(10, Math.round(30));\n              to.y = screen.y + Math.max(10, Math.round(30));\n              from = this._addToGraph(from, to, graph, 0);\n            } else if (e.x >= 0 && e.y >= 0 && !e.noheat) { // some click\n              if (e.widget && this.sourceModel.widgets[e.widget]) {\n                const widget = this.sourceModel.widgets[e.widget];\n                to.x = Math.round(widget.x + widget.w / 2);\n                to.y = Math.round(widget.y + widget.h / 2);\n                from = this._addToGraph(from, to, graph, duration);\n                lastDurationEvent = e\n              } else {\n                to.x = Math.round(Math.min(1, e.x) * screen.w + screen.x);\n                to.y = Math.round(Math.min(1, e.y) * screen.h + screen.y);\n                from = this._addToGraph(from, to, graph, duration);\n                lastDurationEvent = e\n              }\n            }\n          } else {\n            console.warn(\"_getSessionGraph()\", \"Screen is not there\", e.screen);\n          }\n        }\n  \n          /** Since 4.0.60 we add a last node, if it was screen load */\n        if (e && e.type === 'ScreenLoaded') {\n          const screenID = this.getEventScreenId(e);\n          const screen = this.sourceModel.screens[screenID];\n          const to = {\n            x: Math.round(screen.x + screen.w / 2),\n            y: Math.round(screen.y + screen.h / 2)\n          }\n          from = this._addToGraph(from, to, graph, duration);\n        }\n  \n  \n      },\n  \n      _addToGraph(from, to, graph, duration) {\n        if (from) {\n          const id = from.x + \";\" + from.y + \"-\" + to.x + \";\" + to.y;\n          if (!graph[id]) {\n            graph[id] = {\n              from: from,\n              to: to,\n              count: 0,\n              duration: 0\n            };\n          }\n          graph[id].count++;\n          graph[id].duration += duration * 1;\n          return to;\n        }\n        return to;\n      }\n    },\n    mounted() {},\n  };\n  </script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./UserJourney.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./UserJourney.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./UserJourney.vue?vue&type=template&id=3a810fb4\"\nimport script from \"./UserJourney.vue?vue&type=script&lang=js\"\nexport * from \"./UserJourney.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"MatcCanvas MatcAnalyticCanvas\"})\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n<template>\n    <div class=\"MatcCanvas MatcAnalyticCanvas\">\n     \n    </div>\n  </template>\n  \n  \n  <script>\n  \n  import on from \"dojo/on\";\n  import DomBuilder from \"common/DomBuilder\";\n  import DataFrame from \"common/DataFrame\";\n  import Analytics from \"dash/Analytics\";\n \n  export default {\n    name: \"DropOff\",\n    mixins: [],\n    data: function () {\n      return {\n      };\n    },\n    components: {},\n    methods: {\n     \n  \n      /**********************************************************************\n       * DropOff\n       **********************************************************************/\n  \n      _render_global_DropOff() {\n        this.logger.log(1, \"_render_global_DropOff\", \"entry > \", this.analyticParams.task);\n        this.setBW(true);\n        if (this.analyticParams.task) {\n          if (this.analyticParams.time) {\n            this._render_dropoff_task_time(this.analyticParams.task);\n          } else {\n            this._render_dropoff_task_success(this.analyticParams.task);\n          }\n        } else {\n          this.showError('No task selected')\n        }\n      },\n  \n       _render_dropoff_task_time (task) {\n  \n        const db = new DomBuilder()\n  \n        const df = new DataFrame(this.events);\n        const analytics  = new Analytics();\n        const funnel = analytics.getFunnelSummary(df, task, this.annotation);\n  \n\n  \n        const length = task.flow.length\n        if (task.flow && task.flow.length > 1) {\n  \n          /**\n           * We take here to total task time...\n           */\n          const maxTime = Math.max(1,funnel[funnel.length-1].durationMean)\n  \n          for (let i=0; i < task.flow.length - 1; i++){\n            const startSummary = funnel[i+1]\n            const endSummary = funnel[i+2]\n            const start = task.flow[i]\n            const end = task.flow[i+1]\n  \n  \n            const time = endSummary.durationMean - startSummary.durationMean\n            const p = Math.min(1, time  / maxTime)\n  \n  \n            const startPos = this._getDropOffBoxPosition(start, i , length)\n            const endPos = this._getDropOffBoxPosition(end, i+ 1, length)\n            const line = [startPos, endPos]\n  \n            let color = this.mixColor(p)\n            let width = Math.max(3, Math.round(this.dropOffLineWidth * p))\n            this.drawAnalyticLine('dropOffLine'+i,line, color , width, this.taskLineOpacity);\n  \n            /**\n             * Render Points\n             */\n            this._renderDropOffEvent(endPos.x, endPos.y, 'FlowStep', db, color, width + this.dropOffEventWidth, Math.round(time / 100) / 10, 's')\n            if (i === 0) {\n                color = this.mixColor(p)\n                width = Math.max(3, Math.round(this.dropOffLineWidth * p))\n                this._renderDropOffEvent(startPos.x, startPos.y, 'FlowStep', db, color, width + this.dropOffEventWidth, '0', 's')\n            }\n  \n          }\n        } else {\n          this.showError('Cannot show task times. The selected task has only one step.')\n        }\n      },\n  \n      _render_dropoff_task_success (task) {\n  \n        const db = new DomBuilder()\n  \n        const df = new DataFrame(this.events);\n        const analytics  = new Analytics();\n        const funnel = analytics.getFunnelSummary(df, task, this.annotation);\n  \n        const length = task.flow.length\n        if (task.flow && task.flow.length > 1) {\n          for (let i=0; i < task.flow.length - 1; i++){\n  \n            const startSummary = funnel[i+1]\n            const endSummary = funnel[i+2]\n            const start = task.flow[i]\n            const end = task.flow[i+1]\n  \n            const startPos = this._getDropOffBoxPosition(start, i, length)\n            const endPos = this._getDropOffBoxPosition(end, i + 1, length)\n            const line = [startPos, endPos]\n  \n            let color = this.greenToRed(endSummary.p)\n            let width = Math.max(3, Math.round(this.dropOffLineWidth * endSummary.p))\n            this.drawAnalyticLine('dropOffLine'+i,line, color , width, this.taskLineOpacity);\n  \n            /**\n             * Render drop off\n             */\n            if (startSummary && endSummary) {\n                const p = startSummary.p - endSummary.p\n                const dropOffPos = {\n                  x: startPos.x + 100,\n                  y: startPos.y + 100\n                }\n                const dropOffLine = [startPos, dropOffPos]\n                width = Math.max(3, Math.round(this.dropOffLineWidth * p))\n                this.drawAnalyticLine('dropOffLineDrop'+i,dropOffLine, this.dropOffLineColor , width, this.taskLineOpacity);\n                this._renderDropOffEvent(dropOffPos.x, dropOffPos.y, 'FlowStep', db, this.dropOffLineColor, width + this.dropOffEventWidth, Math.round(-100 * p))\n            }\n  \n            /**\n             * Render points\n             */\n            this._renderDropOffEvent(endPos.x, endPos.y, 'FlowStep', db, color, width + this.dropOffEventWidth, Math.round(endSummary.p * 100))\n            if (i === 0) {\n                color = this.greenToRed(startSummary.p)\n                width = Math.max(3, Math.round(this.dropOffLineWidth * startSummary.p))\n                this._renderDropOffEvent(startPos.x, startPos.y, 'FlowStep', db, color, width + this.dropOffEventWidth, Math.round(startSummary.p * 100))\n            }\n  \n          }\n        } else {\n          this.showError('Cannot show task times. The selected task has only one step.')\n        }\n      },\n  \n      _getDropOffBoxPosition (e, i = 0, l = 1) {\n  \n        if (e.widget) {\n          let widget = this.sourceModel.widgets[e.widget]\n          if (widget) {\n              let pos = {}\n              pos.x = Math.round(widget.x + widget.w / 2);\n              pos.y = Math.round(widget.y + widget.h / 2);\n              return pos\n          } else {\n             this.logger.warn(\"_geDropOffBoxPosition\", \"no widget > \", e.widget);\n          }\n  \n        }\n        if (e.screen) {\n          let sourceScreen = this.sourceModel.screens[e.screen]\n          if (sourceScreen) {\n              let pos = {}\n              pos.x = Math.round(sourceScreen.x + sourceScreen.w / 2);\n              pos.y = Math.min(sourceScreen.y + sourceScreen.h, Math.round(sourceScreen.y + sourceScreen.h / 3) + (sourceScreen.h * i / (l * 2)));\n              return pos\n          } else {\n             this.logger.warn(\"_geDropOffBoxPosition\", \"no screen > \", e.screen);\n          }\n        }\n      },\n  \n      _renderDropOffEvent(x, y, type, db, color, width, p, unit='%') {\n        var cntr = db\n          .div(\"MatcAnalyticCanvasEventCntr\")\n          .build(this.widgetContainer);\n        cntr.style.left = Math.round(x) + \"px\";\n        cntr.style.top = Math.round(y) + \"px\";\n  \n        var div = db\n          .div(\"MatcAnalyticCanvasEvent MatcAnalyticCanvasEvent\" + type,)\n          .build(cntr);\n  \n        var r = Math.max(5, Math.round(width));\n        div.style.width = r + \"px\";\n        div.style.height = r + \"px\";\n        div.style.top = -1 * Math.round(r / 2) + \"px\";\n        div.style.left = -1 * Math.round(r / 2) + \"px\";\n        div.style.background = color\n        this.tempOwn(on(div, 'click', (e) => this.selectDropOffPoint(e)))\n      \n        if (unit) {\n          db.span('MatcAnalyticCanvasEventLabel', p + unit).build(div)\n        }\n  \n        return div;\n      },\n  \n      selectDropOffPoint () {\n  \n      }\n    },\n    mounted() {},\n  };\n  </script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./DropOff.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./DropOff.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./DropOff.vue?vue&type=template&id=6d3beb0a\"\nimport script from \"./DropOff.vue?vue&type=script&lang=js\"\nexport * from \"./DropOff.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"MatcCanvas MatcAnalyticCanvas\"})\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n<template>\n  <div class=\"MatcCanvas MatcAnalyticCanvas\">\n\n  </div>\n</template>\n  \n  \n<script>\n\nimport DataFrame from \"common/DataFrame\";\nimport Analytics from \"dash/Analytics\";\nimport * as Outlier from 'dash/Outlier'\n\nexport default {\n  name: \"DataProcessing\",\n  mixins: [],\n  data: function () {\n    return {\n    };\n  },\n  components: {},\n  methods: {\n\n\n    getOutlierScores() {\n      if (!this.cache[\"outliers\"]) {\n        const df = new DataFrame(this.events);\n        //const outliers = Outlier.computeOutliersIRQ(df);\n        const outliers = Outlier.computeOutliersMAD(df, 2)\n        this.cache[\"outliers\"] = outliers\n      }\n      return this.cache[\"outliers\"];\n    },\n\n    getGestures() {\n      if (!this.cache[\"gestures\"]) {\n        var df = new DataFrame(this.events);\n        var gestures = df.select(\"type\", \"in\", [\n          \"ScreenGesture\",\n          \"WidgetGesture\",\n        ]);\n        this.cache[\"gestures\"] = gestures.data;\n      }\n\n      return this.cache[\"gestures\"];\n    },\n\n    getUserJourney() {\n      if (!this.cache[\"userJourney\"]) {\n        var df = new DataFrame(this.events);\n        df.sortBy(\"time\");\n        var sessionGroup = df.groupBy(\"session\");\n        let sessions = sessionGroup.data;\n        this.cache[\"userJourney\"] = sessions;\n      }\n      return this.cache[\"userJourney\"];\n    },\n\n    getTaskPerformance() {\n      if (!this.cache[\"taskPerformance\"]) {\n        const analytics = new Analytics();\n        const df = new DataFrame(this.events);\n        df.sortBy(\"time\");\n\n        const temp = analytics.getTaskPerformance(\n          df, this.testSettings.tasks, false, false\n        );\n        const sessions = {};\n        for (let i = 0; i < temp.data.length; i++) {\n          const match = temp.data[i];\n          if (!sessions[match.session]) {\n            sessions[match.session] = {};\n          }\n          if (!sessions[match.session][match.task]) {\n            sessions[match.session][match.task] = match;\n          } else {\n            console.warn(\"getTaskPerformance() Double mactch\", match);\n          }\n        }\n        this.cache[\"taskPerformance\"] = sessions;\n      }\n      return this.cache[\"taskPerformance\"];\n    },\n\n    getOverlayViews() {\n      if (!this.cache[\"overlayViews\"]) {\n        var screenLoads = this.df.select(\"type\", \"==\", \"OverlayLoaded\");\n\n        var screenLoadCounts = screenLoads.count(\"overlay\");\n        var totalScreenLoads = screenLoads.size();\n\n        var views = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          views[screen.id] = screenLoadCounts.get(screen.id, null, 0);\n        }\n\n        this.cache[\"overlayViews\"] = {\n          total: totalScreenLoads,\n          counts: views,\n        };\n      }\n      return this.cache[\"overlayViews\"];\n    },\n\n    getOverlayTest() {\n      if (!this.cache[\"overlayTests\"]) {\n        var sessions = this.df.groupBy(\"session\");\n        var sessionCount = sessions.size().size();\n\n        var tests = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          tests[screen.id] = 0;\n        }\n\n        sessions.foreach(function (df) {\n          var screenCounts = df.count(\"overlay\"); // diference to screenTest\n          screenCounts.foreach(function (row, id) {\n            tests[id] += 1;\n          });\n        });\n\n        this.cache[\"overlayTests\"] = {\n          sessions: sessionCount,\n          counts: tests,\n        };\n      }\n      return this.cache[\"overlayTests\"];\n    },\n\n    getScreenViews() {\n      if (!this.cache[\"screenViews\"]) {\n        var screenLoads = this.df.select(\"type\", \"==\", \"ScreenLoaded\");\n        var screenLoadCounts = screenLoads.count(\"screen\");\n        var totalScreenLoads = screenLoads.size();\n\n        var views = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          views[screen.id] = screenLoadCounts.get(screen.id, null, 0);\n        }\n\n        this.cache[\"screenViews\"] = {\n          total: totalScreenLoads,\n          counts: views,\n        };\n      }\n      return this.cache[\"screenViews\"];\n    },\n\n    getScreenTests() {\n      if (!this.cache[\"screenTests\"]) {\n        var sessions = this.df.groupBy(\"session\");\n        var sessionCount = sessions.size().size();\n\n        var tests = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          tests[screen.id] = 0;\n        }\n\n        sessions.foreach(function (df) {\n          var screenCounts = df.count(\"screen\");\n          screenCounts.foreach(function (row, id) {\n            tests[id] += 1;\n          });\n        });\n\n        this.cache[\"screenTests\"] = {\n          sessions: sessionCount,\n          counts: tests,\n        };\n      }\n      return this.cache[\"screenTests\"];\n    },\n\n    getScreenDwellTime() {\n      if (!this.cache[\"screenDwell\"]) {\n        var count = this.df.count(\"session\");\n        var sessionCount = count.size();\n\n        var analytics = new Analytics();\n        var screenTimeGrouping = analytics.getScreenTimeGrouping(this.df);\n        var totalTime = screenTimeGrouping.sum().sum();\n\n        var times = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          var screenTimeDF = screenTimeGrouping.get(screen.id);\n          if (screenTimeDF) {\n            times[screen.id] = screenTimeDF.sum();\n          } else {\n            times[screen.id] = 0;\n          }\n        }\n\n        this.cache[\"screenDwell\"] = {\n          total: totalTime,\n          times: times,\n          sessions: sessionCount,\n        };\n      }\n      return this.cache[\"screenDwell\"];\n    },\n\n    getOverlayDwellTime() {\n      if (!this.cache[\"overlayDwell\"]) {\n        var count = this.df.count(\"session\");\n        var sessionCount = count.size();\n\n        var analytics = new Analytics();\n\n        /**\n         * We calculate the overlay time relative to the absolute screen time...\n         */\n        var screenTimeGrouping = analytics.getScreenTimeGrouping(this.df);\n        var totalTime = screenTimeGrouping.sum().sum();\n\n        var overlayGrouping = analytics.getOverlayTimeGrouping(this.df);\n\n        var times = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          var screenTimeDF = overlayGrouping.get(screen.id);\n          if (screenTimeDF) {\n            times[screen.id] = screenTimeDF.sum();\n          } else {\n            times[screen.id] = 0;\n          }\n        }\n\n        this.cache[\"overlayDwell\"] = {\n          total: totalTime,\n          times: times,\n          sessions: sessionCount,\n        };\n      }\n      return this.cache[\"overlayDwell\"];\n    },\n\n    getScreenWidgetClicks() {\n      if (!this.cache[\"screenWidgetClicks\"]) {\n        /**\n         * FIXME: This could be nice with regards to the overlays....\n         *\n         * Some clicks should be attributed the to overlay, nit the clicks, or?\n         */\n        var widgetEvents = this.df.select(\"type\", \"==\", \"WidgetClick\");\n        var widgetScreenEvents = widgetEvents.count(\"screen\");\n        var totalWidgetEvents = widgetScreenEvents.sum();\n\n        /**\n         * Now filter out overlay events\n         */\n        widgetEvents = widgetEvents.select(\"overlay\", \"==\", null);\n        widgetScreenEvents = widgetEvents.count(\"screen\");\n\n        var clicks = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          clicks[screen.id] = widgetScreenEvents.get(screen.id, null, 0);\n        }\n\n        this.cache[\"screenWidgetClicks\"] = {\n          clicks: clicks,\n          total: totalWidgetEvents,\n        };\n      }\n\n      return this.cache[\"screenWidgetClicks\"];\n    },\n\n\n    getScreenClicksOnBackground(df) {\n\n      const screenClicks = df.select(\"type\", \"==\", \"ScreenClick\");\n      return screenClicks\n\n    },\n\n    getMissedClicks(df) {\n     \n        /** \n         * Get all screens that do not have a line\n         */\n        var screens = Object.values(this.sourceModel.screens);\n        let passiveScreens = {}\n        screens.forEach(s => {\n          let linesFrom = this.getFromLines(s)\n          if (linesFrom.length === 0) {\n            passiveScreens[s.id] = true\n          }\n        })\n\n\n        /**\n         * Get all the widgets that do not have a line\n         * AND that are not inputs \n         */\n        let passiveWidgets = []\n        let widgets = Object.values(this.sourceModel.widgets)\n        widgets.forEach(w => {\n          if (w.type === \"Box\" || w.type === \"Button\" || w.type === \"HotSpot\") {\n            let linesFrom = this.getFromLines(w)\n            if (linesFrom.length === 0) {\n              passiveWidgets[w.id] = true\n            }\n          }\n        })\n\n        /**\n         * Filter screenclicks for these screens\n         */\n        let clickEvents = df\n          .select(\"type\", \"in\", [\"ScreenClick\", \"WidgetClick\"])\n          .as_array();\n\n\n        let missedClicks = clickEvents.filter(e => {\n          if (e.type === \"ScreenClick\" && passiveScreens[e.screen] === true) {\n            return true\n          }\n          if (e.type === \"WidgetClick\" && passiveWidgets[e.widget] === true) {\n            return true\n          }\n\n          return false\n        })\n\n        return missedClicks;\n\n\n      \n    },\n\n\n    getScreenClicks() {\n      if (!this.cache[\"screenClicks\"]) {\n        /**\n         * FIXME: This could be nice with regards to the overlays....\n         *\n         * Some clicks should be attributed the to overlay, nit the clicks, or?\n         */\n        var clickEvents = this.df.select(\"type\", \"in\", [\n          \"ScreenClick\",\n          \"WidgetClick\",\n        ]);\n        var clickEventsCount = clickEvents.count(\"screen\");\n        var totalWidgetEvents = clickEventsCount.sum();\n\n        var widgetEvents = this.df.select(\"type\", \"==\", \"ScreenClick\");\n        var widgetScreenEvents = widgetEvents.count(\"screen\");\n\n        var clicks = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          clicks[screen.id] = widgetScreenEvents.get(screen.id, null, 0);\n        }\n\n        this.cache[\"screenClicks\"] = {\n          clicks: clicks,\n          total: totalWidgetEvents,\n        };\n      }\n\n      return this.cache[\"screenClicks\"];\n    },\n\n    getOverlayClicks() {\n      if (!this.cache[\"overlayCicks\"]) {\n        /**\n         * FIXME: This could be nice with regards to the overlays....\n         *\n         * Some clicks should be attributed the to overlay, nit the clicks, or?\n         */\n        var widgetEvents = this.df.select(\"type\", \"==\", \"ScreenClick\");\n        var widgetScreenEvents = widgetEvents.count(\"overlay\");\n        var totalWidgetEvents = widgetScreenEvents.sum();\n\n        var clicks = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          clicks[screen.id] = widgetScreenEvents.get(screen.id, null, 0);\n        }\n\n        this.cache[\"overlayCicks\"] = {\n          clicks: clicks,\n          total: totalWidgetEvents,\n        };\n      }\n\n      return this.cache[\"overlayCicks\"];\n    },\n\n    getOverlayWidgetClicks() {\n      if (!this.cache[\"overlayWidgetCicks\"]) {\n        /**\n         * FIXME: This could be nice with regards to the overlays....\n         *\n         * Some clicks should be attributed the to overlay, nit the clicks, or?\n         */\n        var widgetEvents = this.df.select(\"type\", \"==\", \"WidgetClick\");\n        var widgetScreenEvents = widgetEvents.count(\"overlay\");\n        var totalWidgetEvents = widgetScreenEvents.sum();\n\n        var clicks = {};\n        var screens = this.getScreens(this.sourceModel);\n        for (var s = 0; s < screens.length; s++) {\n          var screen = screens[s];\n          clicks[screen.id] = widgetScreenEvents.get(screen.id, null, 0);\n        }\n\n        this.cache[\"overlayWidgetCicks\"] = {\n          clicks: clicks,\n          total: totalWidgetEvents,\n        };\n      }\n\n      return this.cache[\"overlayWidgetCicks\"];\n    },\n\n    getLineWidgetData() {\n      if (!this.cache[\"lineWidgetData\"]) {\n        let result = {}\n        let allWidetData = this.getWidgetData()\n        let maxClicksAbs = 0\n        // filter only for clicks on lines, and calcuate the clicksRel\n        for (let id in this.model.lines) {\n          let from = this.model.lines[id].from\n          if (allWidetData[from]) {\n            const clicksAbs = allWidetData[from].clicksAbs\n            result[from] = {\n              clicksAbs: clicksAbs\n            }\n            maxClicksAbs = Math.max(maxClicksAbs, clicksAbs)\n          }\n          Object.values(result).forEach(v => {\n            v.clicksRel = v.clicksAbs / maxClicksAbs\n          })\n        }\n        this.cache[\"lineWidgetData\"] = result\n      }\n      return this.cache[\"lineWidgetData\"]\n    },\n\n    getWidgetData() {\n      if (!this.cache[\"widgetData\"]) {\n        var analytics = new Analytics();\n        var widgets = {};\n        var data = analytics.getWidgetStatistics(this.sourceModel, this.df);\n        for (var id in data) {\n          widgets[id] = data[id];\n        }\n        this.cache[\"widgetData\"] = widgets;\n      }\n      return this.cache[\"widgetData\"];\n    },\n\n    getFirstNClicksData(events, n) {\n      console.debug('getFirstNClicksData', events.length)\n      const analytics = new Analytics();\n      return analytics.getFirstNClicks(events, n);\n    },\n\n\n  },\n  mounted() { },\n};\n</script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./DataProcessing.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./DataProcessing.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./DataProcessing.vue?vue&type=template&id=2ca697e6\"\nimport script from \"./DataProcessing.vue?vue&type=script&lang=js\"\nexport * from \"./DataProcessing.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","\n<template>\n  <div class=\"MatcCanvas MatcAnalyticCanvas\">\n    <div class=\"MatcCanvasFrame\" data-dojo-attach-point=\"frame\">\n      <div class=\"MatcCanvasContainer MatcCanvasZoomable\" data-dojo-attach-point=\"container\">\n        <div class=\"MatcCanvasContainer\" data-dojo-attach-point=\"zoomContainer\">\n          <div data-dojo-attach-point=\"screenContainer\" class=\"MatcCanvasLayer\"></div>\n          <div data-dojo-attach-point=\"widgetContainer\" class=\"MatcCanvasLayer\"></div>\n          <div data-dojo-attach-point=\"svgContainer\" class=\"MatcCanvasLayer MatcCanvasSVGLayer\"></div>\n        </div>\n        <div data-dojo-attach-point=\"dndContainer\" class=\"MatcDnDLayer\"></div>\n      </div>\n    </div>\n    <div class=\"MatcCanvasScrollBar MatcCanvasScrollBarRight\" data-dojo-attach-point=\"scrollRight\">\n      <div class=\"MatcCanvasScrollBarCntr MatcCanvasScrollBarCntrRight\" data-dojo-attach-point=\"scrollRightCntr\">\n        <div class=\"MatchCanvasScrollHandle\" data-dojo-attach-point=\"scrollRightHandler\"></div>\n      </div>\n    </div>\n    <div class=\"MatcCanvasScrollBar MatcCanvasScrollBarBottom\" data-dojo-attach-point=\"scrollBottom\" :style=\"'padding-left:' + this.layerListWidth + 'px'\">\n      <div class=\"MatcCanvasScrollBarCntr MatcCanvasScrollBarCntrBottom\" data-dojo-attach-point=\"scrollBottomCntr\" >\n        <div class=\"MatchCanvasScrollHandle\" data-dojo-attach-point=\"scrollBottomHandler\"></div>\n      </div>\n    </div>\n    <div class=\"MatcMessage\" data-dojo-attach-point=\"message\"></div>\n  </div>\n</template>\n\n<style lang=\"css\">\n@import url(\"../../style/css/legacy.css\");\n</style>\n<style lang=\"scss\">\n@import \"../../style/matc.scss\";\n@import \"../../style/canvas/all.scss\";\n@import '../../style/toolbar/all.scss';\n</style>\n\n<script>\nimport DojoWidget from \"dojo/DojoWidget\";\nimport css from \"dojo/css\";\n\nimport Logger from \"common/Logger\";\nimport on from \"dojo/on\";\nimport touch from \"dojo/touch\";\nimport lang from \"dojo/_base/lang\";\n\nimport win from \"dojo/_base/win\";\nimport topic from \"dojo/topic\";\n\nimport DomBuilder from \"common/DomBuilder\";\nimport DataFrame from \"common/DataFrame\";\nimport _DragNDrop from \"common/_DragNDrop\";\n\nimport Heat from \"dash/Heat\";\nimport Render from \"canvas/Render\";\nimport Lines from \"canvas/Lines\";\nimport DnD from \"canvas/DnD\";\nimport Add from \"canvas/Add\";\nimport Select from \"canvas/Select\";\nimport Distribute from \"canvas/Distribute\";\nimport GridResize from \"canvas/GridResize\";\nimport Tools from \"canvas/Tools\";\nimport Zoom from \"canvas/Zoom\";\nimport Util from \"core/Util\";\nimport InlineEdit from \"canvas/InlineEdit\";\nimport Scroll from \"canvas/Scroll\";\nimport Upload from \"canvas/Upload\";\nimport Comment from \"canvas/Comment\";\nimport KeyBoard from \"canvas/KeyBoard\";\nimport Resize from \"canvas/Resize\";\nimport Replicate from \"canvas/Replicate\";\nimport Analytics from \"dash/Analytics\";\nimport FastDomUtil from \"core/FastDomUtil\";\nimport * as d3 from \"d3\";\nimport _Color from 'common/_Color'\n\nimport UserJourney from './UserJourney'\nimport DropOff from './DropOff'\nimport DataProcessing from './DataProcessing'\n\nexport default {\n  name: \"AnalyticCanvas\",\n  props:['viewport'],\n  mixins: [\n    DojoWidget,\n    _DragNDrop,\n    _Color,\n    Util,\n    Render,\n    Lines,\n    DnD,\n    Add,\n    Select,\n    Distribute,\n    GridResize,\n    Tools,\n    Zoom,\n    InlineEdit,\n    Scroll,\n    Upload,\n    KeyBoard,\n    Resize,\n    Replicate,\n    Comment,\n    Heat,\n    UserJourney,\n    DropOff,\n    DataProcessing\n  ],\n  data: function () {\n    return {\n      mode: \"view\",\n      zoom: 1,\n      analyticMode: \"HeatmapClick\",\n      resizeEnabled: false,\n      renderDND: true,\n      dragNDropMinTimeSpan: 0,\n      wireInheritedWidgets: true,\n      taskLineOpacity: 1,\n      isBlackAndWhite: false,\n      dropOffLineWidth: 25,\n      dropOffLineColor: '#555',\n      dropOffEventWidth: 40,\n      userJourneyEndColor: '#f03131',\n      layerListWidth: 256\n    };\n  },\n  components: {},\n  methods: {\n    postCreate() {\n      this.logger = new Logger(\"AnalyticCanvas\");\n      this.logger.log(2, \"constructor\", \"entry\");\n      this.cache = {};\n      this.moveMode = \"classic\";\n      this.domUtil = new FastDomUtil();\n      this.analyticLines = {}\n      this.analyticCircles = {}\n\n      this.logger.log(2, \"postCreate\", \"entry\");\n      this.initSize();\n\n      /**\n       * init container size and position\n       */\n      this.canvasPos = {\n        x: this.canvasStartX,\n        y: this.canvasStartY,\n        w: this.canvasFlowWidth,\n        h: this.canvasFlowHeight,\n      };\n      this.initViewport()\n      this.initContainerSize();\n      this.setContainerPos();\n\n      /**\n       * Init remaining sub components\n       */\n      this.initSelection()\n      this.initRender();\n      this.initAnalyticSVG()\n      this.initZoom();\n      this.initScrollBars();\n      this.initComment();\n      this.initSettings();\n      this.initWiring();\n      this.initKeys();\n      this.initMouseTracker()\n      this.initDarkModeListener()\n      this.initLayer()\n\n      this.db = new DomBuilder();\n\n      /**\n       * Init Listeners\n       */\n      this.own(\n        topic.subscribe(\n          \"matc/toolbar/click\",\n          lang.hitch(this, \"onToolbarClick\")\n        )\n      );\n      this.own(on(win.body(), \"keydown\", lang.hitch(this, \"onKeyPress\")));\n      this.own(on(win.body(), \"keyup\", lang.hitch(this, \"onKeyUp\")));\n\n      this.logger.log(2, \"postCreate\", \"exit!!!\");\n    },\n\n    initLayer (){\n\t\t\tthis.logger.log(-2,\"initLayer\", \"entry\");\n\t\t\tconst w = localStorage.getItem('quxLayerListWidth')\n\t\t\tif (w && !isNaN(w * 1)) {\n\t\t\t\tthis.setLayerListWidth( w * 1)\t\t\t\t\n\t\t\t}\n\t\t},\n\n\n    setLayerListWidth (w) {\n      this.layerListWidth = w\n    },\n \n    showError(msg) {\n      if (this.message) {\n        css.add(this.message, \"MatcMessageError\");\n        css.remove(this.message, \"MatcMessageSuccess MatcMessageHint\");\n        this.message.textContent = msg;\n        setTimeout(lang.hitch(this, \"hideMessage\"), 3000);\n      }\n    },\n\n    XlineFunction(line) {\n      return this.straightLineFunction(line)\n    },\n\n    setPublic(isPublic) {\n      this.isPublic = isPublic;\n    },\n\n    setModelService(s) {\n      this.sourceModelService = s;\n    },\n\n    setCommentService(s) {\n      this.commentService = s;\n    },\n\n    setToolbar(t) {\n      this.toolbar = t;\n      this.onChangeCanvasViewConfig();\n    },\n\n    setMouseListener(callback) {\n      this.mouseListenerCallback = callback\n    },\n\n    inlineEditInit() {\n      this.logger.log(2, \"inlineEditInit\", \"enter\");\n    },\n\n    setMouseData(data) {\n      this.logger.log(0, \"setMouseData\", \"enter > \" + data.length);\n      // this.mouseData = this.computeMouseDistribution(data, this.sourceModel);\n      this.mouseData = data;\n      if (data.length == 0) {\n        this.showError(\"No Mouse data was recorded\");\n      }\n    },\n\n    setBW(isBW) {\n      this.logger.log(1, \"setBW\", \"enter > \" + isBW);\n      if (isBW) {\n        css.add(this.container, \"MatcCanvasBW\");\n      } else {\n        css.remove(this.container, \"MatcCanvasBW\");\n      }\n    },\n\n    onChangeCanvasViewConfig() {\n      if (this.toolbar) {\n        this.toolbar.setCanvasViewConfig({\n          zoom: this.zoom,\n          renderLines: this.renderLines,\n          showComments: this.showComments,\n          isBlackAndWhite: this.isBlackAndWhite,\n        });\n      }\n    },\n\n    setCanvasViewConfig(key, value) {\n      this.logger.log(-1, \"setCanvasViewConfig\", \"enter > \" + key, value);\n      if (key === \"zoom\") {\n        this.setZoomFactor(value);\n      }\n\n      if (key === \"renderLines\") {\n        this.setViewLines(value);\n      }\n\n      if (key === \"showComments\") {\n        this.setCommentView(value);\n      }\n\n      if (key === \"isBlackAndWhite\") {\n        this.isBlackAndWhite = value;\n        this.setBW(value);\n      }\n    },\n\n    /**********************************************************************\n     * Lines\n     **********************************************************************/\n\n    initAnalyticSVG() {\n      this.logger.log(3, \"initAnalyticSVG\", \"entry\");\n      let bodySelection = d3.select(this.svgContainer);\n      this.analyticSVG = bodySelection.append(\"svg\").attr(\"width\", this.canvasPos.h).attr(\"height\", this.canvasPos.w);\n    },\n\n    cleanUpAnalyticLines() {\n      if (this.analyticSVG) {\n        this.analyticSVG.selectAll(\"*\").remove();\n      }\n      this.analyticLines = {}\n      this.analyticCircles = {}\n    },\n\n    drawLine(id, line) {\n      let color = this.defaultLineColor\n      let width = this.defaultLineWidth\n      if (this.model && this.model.lines && this.model.lines[id]) {\n        let modelLine = this.model.lines[id]\n        let widgetData = this.getLineWidgetData()\n        if (widgetData[modelLine.from]) {\n          let data = widgetData[modelLine.from]\n          let p = data.clicksRel\n          //width = Math.max(0.3, Math.round(1 * p))\n          color = this.mixColor(p)\n        }\n      }\n      return this.drawSVGLine(id, line, color, width, 1);\n    },\n\n    drawAnalyticLine(id, line, color, width, opacity) {\n      const svg = this.analyticSVG.append(\"path\")\n        .attr(\"d\", this.lineFunction(line))\n        .attr(\"stroke\", color)\n        .attr(\"stroke-width\", width)\n        .attr(\"fill\", \"none\")\n        .style(\"opacity\", opacity);\n\n      this.analyticLines[id] = svg\n    },\n\n\n    drawStraightAnalyticLine(id, line, color, width, opacity) {\n      const svg = this.analyticSVG.append(\"path\")\n        .attr(\"d\", this.straightLineFunction(line))\n        .attr(\"stroke\", color)\n        .attr(\"stroke-width\", width)\n        .attr(\"fill\", \"none\")\n        .style(\"opacity\", opacity);\n\n      this.analyticLines[id] = svg\n    },\n\n\n\n    /**********************************************************************\n     * Wiring\n     **********************************************************************/\n\n    initWiring() {\n      this.logger.log(-1, \"initWiring\", \"enter\");\n      this.own(on(this.dndContainer, \"mousedown\", (e) => this.dispatchMouseDown(e)));\n    },\n\n    dispatchMouseDownScreen(e, id) {\n      this.logger.log(-1, \"dispatchMouseDownScreen\", \"enter\", id);\n      let dndDiv = this.screenDivs[id];\n      let screen = this.model.screens[id];\n      this.onScreenDndClick(screen.id, dndDiv, null);\n    },\n\n    dispatchMouseDownWidget(e, id) {\n      this.logger.log(-1, \"dispatchMouseDownWidget\", \"enter\", id);\n      let div = this.widgetDivs[id];\n      this.onWidgetDndClick(id, div);\n    },\n\n    /**********************************************************************\n     * Settings\n     **********************************************************************/\n\n    afterUpdateDnd(zoomedModel) {\n      this.logger.log(1, \"afterUpdateDnd\", \"enter > \", zoomedModel);\n    },\n\n    initSettings() {\n      this.logger.log(1, \"initSettings\", \"enter > \");\n      /**\n       * default settings\n       */\n      this.settings = {\n        canvasTheme: \"MatcLight\",\n        lineColor: \"#333\",\n        lineWidth: 1,\n        storePropView: true,\n        moveMode: \"ps\",\n        mouseWheelMode: \"scroll\",\n      };\n\n      var s = this._getStatus(\"matcSettings\");\n      if (s) {\n        if (s.canvasTheme) {\n          this.settings.canvasTheme = s.canvasTheme;\n        }\n        if (s.lineColor) {\n          this.settings.lineColor = s.lineColor;\n        }\n        if (s.lineWidth) {\n          this.settings.lineWidth = s.lineWidth;\n        }\n      } else {\n        this.logger.log(2, \"initSettings\", \"exit>  no saved settings\");\n      }\n\n      this.applySettings(this.settings);\n    },\n\n    getSettings() {\n      return this.settings;\n    },\n\n    setSettings(s) {\n      /**\n       * Mixin values\n       */\n      if (s.canvasTheme) {\n        this.settings.canvasTheme = s.canvasTheme;\n      }\n      if (s.lineColor) {\n        this.settings.lineColor = s.lineColor;\n      }\n      if (s.lineWidth) {\n        this.settings.lineWidth = s.lineWidth;\n      }\n      if (s.storePropView != null) {\n        this.settings.storePropView = s.storePropView;\n      }\n\n      if (s.mouseWheelMode != null) {\n        this.settings.mouseWheelMode = s.mouseWheelMode;\n      }\n\n      this._setStatus(\"matcSettings\", this.settings);\n\n      this.applySettings(this.settings);\n      this.rerender();\n    },\n\n    applySettings(s) {\n      this.logger.log(\n        2,\n        \"applySettings\",\n        \"enter > \" + s.canvasTheme + \" &> \" + s.moveMode\n      );\n\n      if (s.lineColor) {\n        this.defaultLineColor = s.lineColor;\n      }\n      if (s.lineWidth) {\n        this.defaultLineWidth = s.lineWidth;\n      }\n      if (s.canvasTheme) {\n        this.setCanvasTheme(s.canvasTheme)\n      }\n\n      if (s.mouseWheelMode) {\n        this._mouseWheelMode = s.mouseWheelMode;\n      }\n\n      this.settings = s;\n    },\n\n\n    setCanvasTheme(canvasTheme) {\n\n      if (canvasTheme === \"MatcAuto\") {\n        this.logger.log(-1, \"setCanvasTheme\", \"enter > auto: \" + canvasTheme + ' > OS: ' + this.isDarkModeOS())\n        if (this.isDarkModeOS()) {\n          canvasTheme = 'MatcDark'\n        } else {\n          canvasTheme = 'MatcLight'\n        }\n      }\n\n      if (this._lastCanvasTheme) {\n        css.remove(win.body(), this._lastCanvasTheme);\n      }\n\n      css.add(win.body(), canvasTheme)\n      this._lastCanvasTheme = canvasTheme;\n\n      if (canvasTheme == \"MatcLight\") {\n        this.defaultLineColor = \"#49C0F0\";\n      } else {\n        this.defaultLineColor = \"#49C0F0\";\n      }\n    },\n\n    initDarkModeListener() {\n      const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\")\n      this.own(on(mediaQuery, 'change', () => {\n        this.logger.log(-1, \"initDarkModeListener\", \"change\");\n        if (this.settings.canvasTheme === 'MatcAuto') {\n          this.setCanvasTheme(this.settings.canvasTheme)\n        }\n      }))\n    },\n\n\n    isDarkModeOS() {\n      if (window.matchMedia) {\n        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n          return true\n        } else {\n          return false\n        }\n      }\n      return true\n    },\n    /**********************************************************************\n     * DnD.js overwrites\n     **********************************************************************/\n\n    onWidgetDndClick(id, div, pos, e) {\n      this.logger.log(2, \"onWidgetDndClick\", \"enter > \" + id);\n      this.stopEvent(e);\n      this.onWidgetSelected(id);\n      this.selectAnalyticDiv(id);\n      this.setState(0);\n    },\n\n    onScreenDndClick(id, div, pos, e) {\n      this.logger.log(2, \"onScreenDndClick\", \"entry > \" + id);\n      this.stopEvent(e);\n      this.setSelectedScreens([id]);\n      this.selectAnalyticDiv(id);\n      this.setState(0);\n    },\n\n    onCanvasSelected() {\n      this.logger.log(2, \"onCanvasSelected\", \"entry > \");\n      this.selectAnalyticDiv(null);\n      if (this.toolbar) {\n        this.toolbar.unselect();\n        this.toolbar.onCanvasSelected()\n      }\n    },\n\n    selectAnalyticDiv(id) {\n      if (this._analyticLastSelectedDiv) {\n        css.remove(this._analyticLastSelectedDiv, \"MatcHeapMapWidgetSelected\");\n        delete this._analyticLastSelectedDiv;\n      }\n      if (this.analyticsDivs && this.analyticsDivs[id]) {\n        let div = this.analyticsDivs[id];\n        css.add(div, \"MatcHeapMapWidgetSelected\");\n        this._analyticLastSelectedDiv = div;\n      }\n\n      if (this.widgetDivs && this.widgetDivs[id]) {\n        let div = this.widgetDivs[id];\n        css.add(div, \"MatcHeapMapWidgetSelected\");\n        this._analyticLastSelectedDiv = div;\n      }\n    },\n\n    /**********************************************************************\n     * Rendering\n     **********************************************************************/\n\n    renderLayerList() {\n      this.logger.log(1, \"renderLayerList\", \"entry > \");\n    },\n\n    afterRender() {\n      this.logger.log(1, \"afterRender\", \"entry > \" + this.analyticMode);\n      this.cleanUpAnalytics();\n\n      try {\n        this._renderHeatMap();\n      } catch (e) {\n        this.logger.error(\"afterRender\", \"Could not render heatmaps \", e);\n        this.logger.sendError(e);\n      }\n    },\n\n    hasSelect() {\n      return this.mode != \"addComment\";\n    },\n\n    _renderHeatMap() {\n      this.logPageView(\"/analytics/workspace/\" + this.analyticMode + \".html\");\n\n      this.setBW(this.isBlackAndWhite);\n\n      /**\n       * Init everything so the _Heat.js code works correctly\n       */\n      this.cleanUpHeat();\n\n      /**\n       * FIXME: Make this customisable\n       */\n      if (\n        this.sourceModel.type == \"smartphone\" ||\n        this.sourceModel.type == \"tablet\"\n      ) {\n        this.defaultRadius = this.sourceModel.screenSize.w / 20;\n        this.defaultBlur = this.sourceModel.screenSize.w / 15;\n      } else {\n        this.defaultRadius = this.sourceModel.screenSize.w / 120;\n        this.defaultBlur = this.sourceModel.screenSize.w / 100;\n      }\n\n      this.logger.log(0, \"onScreenRendered\", \"adjust radios to \" + this.defaultRadius);\n\n      const screenGrouping = this.df.groupBy(\"screen\");\n\n      this.heatmapDivs = {};\n      for (var id in this.sourceModel.screens) {\n        const screen = this.sourceModel.screens[id];\n\n        const screenDF = screenGrouping.get(id);\n        let screenEvents = [];\n        if (screenDF) {\n          screenEvents = screenDF.as_array();\n        }\n\n        if (this[\"_render_\" + this.analyticMode]) {\n          /**\n           * create canvas\n           */\n          const div = this.createBox(screen);\n          css.add(div, \"MatcHeatMapScreen\");\n          const cntr = this.db.div(\"MatcHeapMapContainer\").build(div);\n\n          const canvas = this.db.canvas(screen.w, screen.h).build(cntr);\n          const ctx = canvas.getContext(\"2d\");\n\n          this[\"_render_\" + this.analyticMode](screenEvents, screen, ctx, div);\n\n          if (this.hasSelect()) {\n            this.tempOwn(on(div, touch.press, lang.hitch(this, \"onScreenDndClick\", screen.id, div, null)));\n          }\n\n          this.widgetContainer.appendChild(div);\n\n          this.heatmapDivs[screen.id] = div;\n          this.analyticsDivs[screen.id] = div;\n        }\n      }\n\n      /**\n       * now draw a div for every widgert so we can also select them.\n       * A little hack but I dunno have a better way...\n       */\n      if (\"UserJourney\" != this.analyticMode && \"Gesture\" != this.analyticMode && 'DropOff' != this.analyticMode) {\n        this.hideWidgetDND = true;\n      } else {\n        this.hideWidgetDND = false;\n      }\n\n      if (this[\"_render_global_\" + this.analyticMode]) {\n        this[\"_render_global_\" + this.analyticMode]();\n      }\n    },\n\n    _render_HeatmapMouse(screenEvents, screen, ctx) {\n      this.logger.log(0, \"_render_HeatmapMouse\", \"entry > \" + screen.name);\n      /**\n       * FIXME: we could make this fastter by caching some stuff,\n       * or at least soft the events by screen\n       */\n      let mouseData = this.mouseData.filter((m) => m.screen === screen.id);\n      mouseData = this._filterSelectedSessions(mouseData)\n      let data = this.computeMouseDistribution(mouseData, this.sourceModel);\n      if (data[screen.id]) {\n        let d = data[screen.id];\n        this.draw(ctx, d.values, d.max, screen.w, screen.h);\n      }\n    },\n\n    _render_HeatmapClick(screenEvents, screen, ctx, div) {\n      this.logger.log(2, \"_render_HeatmapClick\", \"entry > \");\n\n      const events = this._filterSelectedSessions(this.events)\n\n      const df = new DataFrame(events)\n      var numberOfClicks = -1;\n      if (this.analyticParams) {\n        numberOfClicks = this.analyticParams.numberOfClicks;\n      }\n\n      if (numberOfClicks === \"screenClicks\") {\n\n        let screenClicks = this.getScreenClicksOnBackground(df);\n        screenClicks = screenClicks.as_array();\n        this._render_pixel_screen_heatmap(screenClicks, screen, ctx, div);\n\n      } else if (numberOfClicks === \"missedClicks\") {\n\n        let missedClicks = this.getMissedClicks(df);\n        this._render_pixel_screen_heatmap(missedClicks, screen, ctx, div);\n\n      } else if (numberOfClicks > 0) {\n\n        let firstNEvents = this.getFirstNClicksData(events, numberOfClicks);\n        this._render_pixel_screen_heatmap(firstNEvents, screen, ctx, div);\n\n      } else {\n\n        let filtered = this.getClickEvents(new DataFrame(events));\n        let actionEvents = filtered.as_array();\n        this._render_pixel_screen_heatmap(actionEvents, screen, ctx, div);\n\n      }\n    },\n\n    _filterSelectedSessions(events) {\n      if (this.analyticParams && this.analyticParams.sessions) {\n        const sessions = this.analyticParams.sessions\n        return events.filter(e => {\n          return sessions[e.session] === true\n        })\n      }\n      return events\n    },\n\n    _render_pixel_screen_heatmap(actionEvents, screen, ctx) {\n      if (screen.w <= 0 || screen.h <= 0) {\n        this.logger.error(\"_render_pixel_screen_heatmap\", \"Error > bad screen dimension: \" + screen.name);\n        return\n      }\n      try {\n        const events = [];\n        for (let i = 0; i < actionEvents.length; i++) {\n          const e = actionEvents[i];\n          const screenID = this.getEventScreenId(e);\n          if (screenID == screen.id) {\n            events.push(e);\n          }\n        }\n        const dist = this.computeClickDistribution(events, screen.w, screen.h);\n        this.draw(ctx, dist.values, dist.max, screen.w, screen.h);\n      } catch (err) {\n        this.logger.error(\"_render_pixel_screen_heatmap\", \"Error > \" + screen.name);\n      }\n\n    },\n\n    _render_HeatmapScrollView(screenEvents, screen, ctx) {\n      this.logger.log(2, \"_render_HeatmapScrollView\", \"entry > \");\n\n      var dist = this.computeScrollVisibiltyDistribution(\n        screenEvents,\n        this.sourceModel.screenSize.h,\n        screen.h\n      );\n      this.drawSections(dist, ctx, screen.h, screen.w);\n    },\n\n    _render_HeatmapScrollTime(screenEvents, screen, ctx) {\n      this.logger.log(2, \"_render_HeatmapScrollTime\", \"entry > \");\n\n      var dist = this.computeScrollDurationDistrubtion(\n        screenEvents,\n        this.sourceModel.screenSize.h,\n        screen.h\n      );\n      this.drawSections(dist, ctx, screen.h, screen.w);\n    },\n\n    _render_HeatmapViews(screenEvents, screen, ctx) {\n      this.logger.log(2, \"HeatmapViews\", \"entry > \");\n\n      if (screen.style.overlay) {\n        let screenViews = this.getOverlayViews();\n        let count = screenViews.counts[screen.id];\n        if (!count) {\n          count = 0;\n        }\n\n        ctx.globalAlpha = 0.4;\n        let color = this.mixColor(count / screenViews.total);\n        ctx.fillStyle = color;\n        ctx.fillRect(0, 0, screen.w, screen.h);\n      } else {\n        let screenViews = this.getScreenViews();\n        let count = screenViews.counts[screen.id];\n        if (!count) {\n          count = 0;\n        }\n\n        ctx.globalAlpha = 0.4;\n        let color = this.mixColor(count / screenViews.total);\n        ctx.fillStyle = color;\n        ctx.fillRect(0, 0, screen.w, screen.h);\n      }\n    },\n\n    _render_HeatmapDwelTime(screenEvents, screen, ctx) {\n      this.logger.log(2, \"HeatmapDwelTime\", \"entry > \");\n\n      if (screen.style.overlay) {\n        let times = this.getOverlayDwellTime();\n        let time = times.times[screen.id];\n        if (!time) {\n          time = 0;\n        }\n        ctx.globalAlpha = 0.4;\n        let color = this.mixColor(time / times.total);\n        ctx.fillStyle = color;\n        ctx.fillRect(0, 0, screen.w, screen.h);\n      } else {\n        let times = this.getScreenDwellTime();\n        let time = times.times[screen.id];\n        if (!time) {\n          time = 0;\n        }\n        ctx.globalAlpha = 0.4;\n        let color = this.mixColor(time / times.total);\n        ctx.fillStyle = color;\n        ctx.fillRect(0, 0, screen.w, screen.h);\n      }\n    },\n\n\n\n    drawDurationLine(session, line, defaultColor, maxDuration) {\n      for (let i = 0; i < line.length - 1; i++) {\n        let start = line[i]\n        let end = line[i + 1]\n        let p = end.duration / maxDuration\n        let width = Math.round(p * 6) + 2\n        let color = defaultColor\n        if (!defaultColor) {\n          //color = this.mixColor(Math.min(1, p))\n        }\n        this.drawStraightAnalyticLine(session, [start, end], color, width, this.taskLineOpacity);\n      }\n    },\n\n\n\n    /**********************************************************************\n     * Gesture\n     **********************************************************************/\n\n    _render_global_Gesture() {\n      this.logger.log(0, \"_render_global_Gesture\", \"entry > \");\n\n      var gestures = this.getGestures();\n      var db = new DomBuilder();\n\n      for (var i = 0; i < gestures.length; i++) {\n        var e = gestures[i];\n        var gesture = e.gesture;\n\n        var screenID = this.getEventScreenId(e);\n        var screen = this.sourceModel.screens[screenID];\n        if (screen && gesture) {\n          var line = [];\n\n          var start = e.gesture.start;\n          var end = e.gesture.end;\n          if (start && end) {\n            var x = start.x * screen.w + screen.x;\n            var y = start.y * screen.h + screen.y;\n            line.push({ x: x, y: y, d: \"right\" });\n\n            this._renderGestureStart(x, y, this.analyticParams.color, db);\n\n            x = end.x * screen.w + screen.x;\n            y = end.y * screen.h + screen.y;\n            line.push({ x: x, y: y, d: \"right\" });\n\n            var r = Math.max(1, Math.round(3 * this.zoom));\n            this.drawSVGLine(\"\", line, this.analyticParams.color, r, 1);\n          }\n        } else {\n          console.warn(\n            \"_render_global_Gesture()\",\n            \"Screen is not there\",\n            e.screen\n          );\n        }\n      }\n    },\n\n    _renderGestureStart(x, y, color, db) {\n      var cntr = db\n        .div(\"MatcAnalyticCanvasEventCntr\")\n        .build(this.widgetContainer);\n      cntr.style.left = Math.round(x) + \"px\";\n      cntr.style.top = Math.round(y) + \"px\";\n\n      var div = db\n        .div(\"MatcAnalyticCanvasEvent MatcAnalyticCanvasEvent\")\n        .build(cntr);\n      var r = Math.max(5, Math.round(15 * this.zoom));\n      div.style.width = r + \"px\";\n      div.style.height = r + \"px\";\n      div.style.top = -1 * Math.round(r / 2) + \"px\";\n      div.style.left = -1 * Math.round(r / 2) + \"px\";\n      div.style.backgroundColor = color;\n      return div;\n    },\n\n\n    cleanUpAnalytics() {\n      this.cleanUpAnalyticLines()\n\n      this.cleanUpNode(this.widgetContainer)\n      this.analyticsDivs = {};\n    },\n\n\n\n    /**********************************************************************\n     * DI\n     **********************************************************************/\n\n    setController(c) {\n      this.logger.log(2, \"setController\", \"enter\");\n      this.controller = c;\n      c.setCanvas(this);\n    },\n\n    getController() {\n      if (this._controllerCallback) {\n        this[this._controllerCallback]();\n      }\n      return this.controller;\n    },\n\n    setControllerCallback(c) {\n      this._controllerCallback = c;\n    },\n\n    setModelFactory(f) {\n      this.logger.log(3, \"setModelFactory\", \"enter\");\n      this.factory = f;\n    },\n\n    setRenderFactory(f) {\n      this.logger.log(3, \"setRenderFactory\", \"enter\");\n      this.renderFactory = f;\n    },\n\n    setModel(model) {\n      this.sourceModel = model;\n      this.model = model\n      this.grid = this.sourceModel.grid;\n      this.setCommentView(this.showComments);\n    },\n\n    setEvents(events) {\n      this.logger.log(1, \"setEvents\", \"enter > # \" + events.length);\n      var analytics = new Analytics();\n      this.events = analytics.nornalizeContainerChildEvents(events);\n      this.df = new DataFrame(events);\n      this.df.sortBy(\"time\");\n      this.fixGestures(events);\n    },\n\n    setAnnotation(a) {\n      this.logger.log(2, \"setAnnotation\", \"enter > # \");\n      this.annotation = a;\n    },\n\n    setTest(t) {\n      this.logger.log(2, \"setTest\", \"enter > # \");\n      this.testSettings = t;\n    },\n\n    setAnalyticMode(mode, params) {\n      this.logger.log(2, \"setAnalyticMode\", \"entry > mode: \" + mode);\n      this.analyticMode = mode;\n      this.analyticParams = params;\n      this.rerender();\n\n      if (this.analyticCSS) {\n        css.remove(this.domNode, this.analyticCSS);\n      }\n\n      this.analyticCSS = mode;\n      css.add(this.domNode, this.analyticCSS);\n    },\n\n    setUser(u) {\n      this.user = u;\n    },\n\n    setMode(mode, forceRender) {\n      this.logger.log(2, \"setMode\", \"enter > \" + mode + \" != \" + this.mode + \" > \" + forceRender);\n      if (mode != this.mode) {\n        this.mode = mode;\n        if (this.toolbar) {\n          this.toolbar.setMode(mode);\n        }\n        this.rerender();\n      } else if (forceRender) {\n        this.rerender();\n      }\n    },\n\n    setSubMode () {\n\n    },\n\n    /***************************************************************************\n     * Keyboard handling\n     ***************************************************************************/\n\n    onKeyPress(e) {\n      this._currentKeyEvent = e;\n\n      if (this.state == \"simulate\" || this.state == \"dialog\") {\n        return;\n      }\n\n      var target = e.target;\n      if (css.contains(target, \"MatcIgnoreOnKeyPress\")) {\n        return;\n      }\n\n      /**\n       * The keycode is differently in every browser!\n       */\n      var k = e.keyCode ? e.keyCode : e.which;\n\n      if (k == 32) {\n        // space\n\n        if (!this._inlineEditStarted) {\n          this.stopEvent(e);\n          if (this.getMode() != \"move\") {\n            this.setMode(\"move\");\n            this.showHint(\"Move the mouse to move canvas...\");\n            this.onDragStart(this.container, \"container\", \"onCanvasDnDStart\", \"onCanvasDnDMove\", \"onCanvasDnDEnd\", null, this._lastMouseMoveEvent, true);\n          }\n        }\n\n        /**\n         * Arrow dispatch...\n         */\n      } else if (k == 37) {\n        this.onArrowLeft();\n      } else if (k == 39) {\n        this.onArrowRight();\n      } else if (k == 40) {\n        this.onArrowDown();\n      } else if (k == 38) {\n        this.onArrowUp();\n      } else if (k == 171 || k == 187) {\n        // +\n\n        if (!this._inlineEditStarted) {\n          this.onClickPlus();\n          this.stopEvent(e);\n        }\n      } else if (k == 173 || k == 189) {\n        //-\n\n        if (!this._inlineEditStarted) {\n          this.onClickMinus();\n          this.stopEvent(e);\n        }\n      }\n    },\n\n    getMode() {\n      return this.mode;\n    },\n\n    onKeyUp(e) {\n      var k = e.keyCode ? e.keyCode : e.which;\n      if (k == 32) {\n        this.onDragEnd(this._lastMouseMoveEvent);\n        this.setMode(\"view\");\n      }\n\n      delete this._currentKeyEvent;\n    },\n\n    /***************************************************************************\n     * Helper Functons\n     ***************************************************************************/\n\n    initMouseTracker() {\n      this.own(on(win.body(), \"mousemove\", lang.hitch(this, \"onMouseMove\")));\n    },\n\n    onMouseMove(e) {\n      var pos2 = this.getCanvasMousePosition(e, true);\n      //this._debugMouseLabel.innerHTML = \"[\" + Math.round(pos2.x) +\" , \"+ Math.round(pos2.y) + \"]\";\n      this._lastMousePos = pos2;\n      this._lastMouseMoveEvent = e;\n    },\n\n    destroy() {\n      this.cleanUp();\n    },\n\n    logPageView(url) {\n      this.logger.log(4, \"logPageView\", \"enter\", url);\n    },\n  },\n  mounted() { },\n};\n</script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticCanvas.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AnalyticCanvas.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./AnalyticCanvas.vue?vue&type=template&id=9fde32f0\"\nimport script from \"./AnalyticCanvas.vue?vue&type=script&lang=js\"\nexport * from \"./AnalyticCanvas.vue?vue&type=script&lang=js\"\nimport style0 from \"./AnalyticCanvas.vue?vue&type=style&index=0&id=9fde32f0&prod&lang=css\"\nimport style1 from \"./AnalyticCanvas.vue?vue&type=style&index=1&id=9fde32f0&prod&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import lang from 'dojo/_base/lang'\nimport win from 'dojo/win'\nimport Logger from 'common/Logger'\nimport Core from 'core/Core'\nimport CoreUtil from 'core/CoreUtil'\n\nexport default class AnalyticController extends Core{\n\n\tconstructor () {\n\t\tsuper()\n\t\tthis.logger = new Logger(\"AnalyticController\");\n\t\tthis.logger.log(2,\"constructor\", \"exit\");\n\t}\n\n\tsetModelService (s) {\n\t\tthis.modelService = s\n\t}\n\n\tsetCanvas(c){\n\t\tthis.logger.log(3,\"setCanvas\", \"entry\");\n\t\tthis._canvas = c;\n\t}\n\n\tsetToolbar(t){\n\t\tthis.logger.log(3,\"setToolbar\", \"entry\");\n\t\tthis.toolbar = t;\n\t}\n\n\tsetModelFactory(f){\n\t\tthis.logger.log(3,\"setModelFactory\", \"entry\");\n\t\tthis.factory = f;\n\t}\n\n\tsetModel(m, screenID){\n\n\t\tthis.logger.log(2,\"setModel\", \"entry > \" + screenID);\n\t\tthis.model = m;\n\t\tthis.inheritedModel = this.createInheritedModel(m);\n\t\tthis.inheritedModel = Core.addContainerChildrenToModel(this.inheritedModel);\n\t\tthis.oldModel = lang.clone(m);\n\t\tthis.render(screenID, () => {\n\t\t\tif(this.toolbar){\n\t\t\t\tthis.toolbar.setModel(m);\n\t\t\t} else {\n\t\t\t\tconsole.debug(\"No toolbar in controller!\");\n\t\t\t}\n\t\n\t\t});\n\n\t\tif (this._canvas) {\n\t\t\tthis._canvas.setFonts(m.fonts)\n\t\t\tthis._canvas.setModel(this.model)\n\t\t}\n\n\t\tthis.logger.log(3,\"setModel\", \"entry > \" + screenID);\n\t}\n\n\tsetMode(mode){\n\t\tthis.logger.log(0,\"setMode\", \"entry > \" + mode);\n\t\tthis.toolbar.setMode(mode);\n\t\tthis._canvas.setMode(mode);\n\t}\n\n\tsetSinglePage(enabled){\n\t\tthis.logger.log(0,\"setSinglePage\", \"entry > \" + enabled);\n\t}\n\n\tgetZoomFactor(){\n\t\tif(this._canvas){\n\t\t\treturn this._canvas.getZoomFactor();\n\t\t}\n\t\treturn 1;\n\t}\n\n\t/**********************************************************************\n\t * Canvas Delegates\n\t **********************************************************************/\n\n\trender(screenID, afterRenderCallback){\n\t\tthis.logger.log(2,\"render\", \"enter > screenID : \" + screenID);\n\t\tif(this._canvas){\n\t\t\t/**\n\t\t\t * resize the model\n\t\t\t */\n\t\t\tconst inheritedModel = CoreUtil.createInheritedModel(this.model)\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tthis._canvas.render(inheritedModel);\n\t\t\t\tif(screenID){\n\t\t\t\t\tthis._canvas.moveToScreen(screenID);\n\t\t\t\t}\n\t\t\t\tif (afterRenderCallback) {\n\t\t\t\t\tafterRenderCallback()\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\t_requestRendering(screenID){\n\t\tif (this._zoomedModel){\n\t\t\tthis._canvas.render(this._zoomedModel);\n\t\t\tif(screenID){\n\t\t\t\tthis._canvas.moveToScreen(screenID);\n\t\t\t}\n\t\t}\n\t\tthis._zoomedModel = null;\n\t}\n\n\t_zoomToScreen(screenID){\n\t\tif (screenID && this.model.screens[screenID]){\n\t\t\t/**\n\t\t\t * here we make sure the selected screen fits in the\n\t\t\t * browser window. We simply find the smallest possible\n\t\t\t * zoom factor and subtract 0.2 to make sure it fits in\n\t\t\t * browser\n\t\t\t */\n\t\t\tvar screen = this.model.screens[screenID];\n\t\t\tlet winBox = win.getBox();\n\t\t\tlet x =  winBox.w / screen.w;\n\t\t\tlet y =  winBox.h / screen.h;\n\t\t\tvar zoom = (Math.floor( Math.min(x,y) * 10) / 10) -0.2 ;\n\t\t\tthis._canvas.setZoom(zoom);\n\n\t\t}\n\t}\n\n\t/**********************************************************************\n\t * Selection methods\n\t **********************************************************************/\n\n\tonWidgetSelected(id){\n\t\tthis.logger.log(0,\"onWidgetSelected\", \"enter > \"+ id);\n\t\tvar widget = this.inheritedModel.widgets[id];\n\t\tif(widget){\n\t\t\tif(this.toolbar){\n\t\t\t\tthis.toolbar.onWidgetSelected(widget);\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn(\"onWidgetSelected() > No width with id\", id);\n\t\t}\n\t}\n\n\n\tonScreenSelected(id){\n\t\tthis.logger.log(1,\"onScreenSelected\", \"enter > \"+ id);\n\t\tvar screen = this.model.screens[id];\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.onScreenSelected(screen);\n\t\t}\n\t}\n\n\tonCanvasSelected(){\n\t\tthis.logger.log(1,\"onCanvasSelected\", \"enter \");\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.onCanvasSelected();\n\t\t}\n\t}\n\n\tonLineSelected(id){\n\t\tthis.logger.log(1,\"onLineSelected\", \"enter > \" + id);\n\t\tvar line = this.model.lines[id];\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.onLineSelected(line);\n\t\t}\n\t}\n\n\tonMultiSelect(selection){\n\t\tthis.logger.log(1,\"onMultiSelect\", \"enter > \");\n\t\tif(this.toolbar){\n\t\t\t/**\n\t\t\t * TODO: get all the model elements\n\t\t\t */\n\t\t\tthis.toolbar.onMultiSelect(selection);\n\t\t}\n\t}\n\n\tonGroupSelected(id){\n\t\tthis.logger.log(1,\"onGroupSelected\", \"enter > \" + id);\n\t\tif(this.model.groups && this.model.groups[id]){\n\t\t\tif(this.toolbar){\n\t\t\t\tvar group = this.model.groups[id];\n\t\t\t\tthis.toolbar.onGroupSelect(group);\n\t\t\t}\n\t\t}\n\t}\n\n\tunSelect(){\n\t\tif(this._canvas){\n\t\t\tthis._canvas.unSelect();\n\t\t}\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.cleanUp();\n\t\t}\n\t}\n\n\n\tshowSuccess(msg){\n\t\tif(this._canvas){\n\t\t\tthis._canvas.showSuccess(msg);\n\t\t}\n\t}\n\n\tshowError(msg){\n\t\tif(this._canvas){\n\t\t\tthis._canvas.showError(msg);\n\t\t}\n\t}\n}","<template>\n  <div class=\"MatcCanvasPage\" id=\"CanvasNode\" @wheel=\"onMouseWheel\">\n    <template v-if=\"selectedViewMode === 'Design'\">\n        <DesignToolbar ref=\"toolbar\" :pub=\"pub\"  @viewModeChange=\"onVieModeChange\" />\n        <DesignCanvas ref=\"canvas\" @viewport=\"onViewPortChange\" :viewport=\"viewport\" />\n    </template>\n    <template v-if=\"selectedViewMode === 'Heatmap'\">\n        <AnalyticToolbar ref=\"toolbar\" @viewModeChange=\"onVieModeChange\" />\n        <AnalyticCanvas ref=\"canvas\" @viewport=\"onViewPortChange\" :viewport=\"viewport\"/>\n    </template>\n \n  </div>\n</template>\n\n<style lang=\"scss\">\n  @import \"../../style/matc.scss\";\n  @import \"../../style/canvas/all.scss\";\n  @import '../../style/toolbar/all.scss';\n</style>\n<style lang=\"sass\">\n  @import \"../../style/bulma.sass\"\n</style>\n\n<script>\nimport DojoWidget from \"dojo/DojoWidget\";\nimport css from \"dojo/css\";\nimport win from \"dojo/win\";\nimport Toolbar from \"canvas/toolbar/Toolbar\";\nimport Canvas from \"canvas/Canvas\";\nimport Controller from \"canvas/controller/Controller\";\nimport ModelFactory from \"core/ModelFactory\";\nimport RenderFactory from \"core/RenderFactory\";\nimport lang from \"dojo/_base/lang\";\nimport on from \"dojo/on\";\nimport Services from \"services/Services\";\nimport Logger from \"common/Logger\";\nimport CollabSession from '../../canvas/controller/CollabSession'\n\nimport AnalyticToolbar from 'canvas/analytic/AnalyticToolbar'\nimport AnalyticCanvas from 'canvas/analytic/AnalyticCanvas'\nimport AnalyticController from 'canvas/analytic/AnalyticController'\n\nexport default {\n  name: \"Design\",\n  mixins: [DojoWidget],\n  data: function() {\n    return {\n      selectedViewMode: '',\n      viewport: null\n    };\n  },\n  components: {\n    'DesignToolbar': Toolbar,\n    'DesignCanvas': Canvas,\n    'AnalyticToolbar': AnalyticToolbar,\n    'AnalyticCanvas': AnalyticCanvas\n  },\n  computed: {\n    pub() {\n      return this.$route.meta && this.$route.meta.isPublic;\n    },\n    mode() {\n      if (this.pub) {\n        return \"public\";\n      }\n      return \"private\";\n    }\n  },\n  methods: {\n    onViewPortChange (viewport) {\n      this.viewport = viewport\n    },\n    onVieModeChange (mode) {\n      this.logger.log(-1, \"onVieModeChange\", \"enter\", mode);      \n      this.load(mode)\n    },\n    onMouseWheel (e) {\n      /**\n       * Cancel all left and right swipes to surpress back navigation\n       */\n      if (e && Math.abs(e.deltaX) > 50 ) {\n        this.logger.log(-1, \"onMouseWheel\", \"cancel\");\n        e.preventDefault();\n      }\n    },\n    load (mode) {\n      if (mode === 'Design') {\n        this.loadData(mode)\n      } else {\n      this.loadAnlyticData(mode)\n      }\n    },\n    loadData(mode) {\n      let id = this.$route.params.id;\n      this.logger.log(3, \"loadData\", \"enter\", id);\n      Promise.all([\n        this.loadApp(id),\n        this.loadCommands(id),\n        this.loadInvitations(id)\n      ]).then(values => {\n\n        this.cache.app = values[0]\n        this.cache.commands = values[1]\n        this.cache.inivitations = values[2]\n\n        const invitations = values[2];\n        const hash = this.getHashFromInvitation(invitations)\n        // ste mode and render\n        this.selectedViewMode = mode\n        this.$nextTick( () => {\n          this.buildCanvas(values[0], values[1], hash);\n        })\n      });\n    },\n\n    loadAnlyticData (mode) {\n      let id = this.$route.params.id\n      this.logger.log(0, 'loadAnlyticData', 'enter', id)\n      Promise.all([\n        this.loadApp(id),\n        this.loadTest(id),\n        this.loadEvents(id),\n        this.loadAnnotations(id),\n        this.loadInvitations(id)\n      ]).then(values => {\n\n        this.cache.app = values[0]\n        this.cache.test = values[1]\n        this.cache.events = values[2]\n        this.cache.annotation = values[3]\n        this.cache.inivitations = values[4]\n\n        const invitations = values[4];\n        const hash = this.getHashFromInvitation(invitations)\n        \n        this.selectedViewMode = mode\n        this.$nextTick( () => {\n          this.buildAnalyticCanvas(values[0], values[1], values[2], values[3], hash)\n        })\n\n      })\n    },\n\n    getHashFromInvitation(invitations) {\n      const temp = {};\n      for (let key in invitations) {\n        temp[invitations[key]] = key;\n      }\n      const hash = temp[1];\n      return hash\n    },\n\n    loadAll () {\n      let id = this.$route.params.id\n      this.logger.log(2, 'loadAll', 'enter', id)\n      Promise.all([\n        this.loadApp(id),\n        this.loadTest(id),\n        this.loadEvents(id),\n        this.loadAnnotations(id),\n        this.loadInvitations(id),\n        this.loadCommands(id)\n      ]).then(values => {\n\n        this.cache.app = values[0]\n        this.cache.test = values[1]\n        this.cache.events = values[2]\n        this.cache.annotation = values[3]\n        this.cache.inivitations = values[4]\n        this.cache.commands = values[5]\n      })\n    },\n    loadTest (id) {\n      if (this.cache.test) {\n        return this.cache.test\n      }\n      return this.modelService.findTest(id)\n    },\n\n    loadEvents (id) {\n      if (this.cache.events) {\n        return this.cache.events\n      }\n      return this.modelService.findEvents(id)\n    },\n\n    loadAnnotations (id) {\n      if (this.cache.annotation) {\n        return this.cache.annotation\n      }\n      return this.modelService.findSessionAnnotations(id)\n    },\n\n    loadApp (id) {\n      if (this.cache.app) {\n        return this.cache.app\n      }\n      return this.modelService.findApp(id)\n    },\n    loadCommands (id) {\n      if (this.cache.commands) {\n        return this.cache.commands\n      }\n      return this.modelService.getCommands(id)\n    },\n    loadInvitations (id) {\n      if (this.cache.inivitations) {\n        return this.cache.inivitations\n      }\n      return this.modelService.findInvitation(id)\n    },\n\n    setCache (key, value) {\n      this.cache[key] = value\n    },\n\n    buildCanvas(model, stack, hash) {\n      this.logger.log(3, \"buildCanvas\", \"enter\");\n\n      const canvas = this.$refs.canvas;\n      const toolbar = this.$refs.toolbar;\n      const controller = new Controller();\n      const service = this.modelService;\n\n      /**\n       * model factory\n       */\n       const factory = new ModelFactory();\n      factory.setModel(model);\n\n      /**\n       * render factory\n       */\n      const renderFactory = new RenderFactory();\n      renderFactory.setModel(model);\n      renderFactory.setHash(hash);\n\n      /**\n       * Dependency injection\n       */\n      controller.setModelService(service);\n      controller.setToolbar(toolbar);\n      controller.setModelFactory(factory);\n      if (this.pub) {\n        controller.setPublic(true);\n        canvas.setPublic(true);\n        toolbar.setPublic(true);\n      }\n\n      toolbar.setController(controller);\n      toolbar.setCommentService(Services.getCommentService());\n      toolbar.setCanvas(canvas);\n      toolbar.setUser(this.user);\n      toolbar.setModelFactory(factory);\n      toolbar.setContext(this.context);\n      toolbar.setModelService(service);\n      toolbar.setHash(hash);\n      \n      //canvas.setViewport(this.viewport)\n      canvas.setController(controller);\n      canvas.setCommentService(Services.getCommentService());\n      canvas.setToolbar(toolbar);\n      canvas.setRenderFactory(renderFactory);\n      canvas.setModelFactory(factory);\n      canvas.setModelService(service);\n   \n      canvas.setUser(this.user);\n\n      // wire shit together\n      this.tempOwn(on(toolbar, \"newScreen\", lang.hitch(canvas, \"addScreen\"))); // deprecated\n      this.tempOwn(on(toolbar, \"newWidget\", lang.hitch(canvas, \"addWidget\"))); // deprecated\n\n      this.tempOwn(on(toolbar, \"newLine\", lang.hitch(canvas, \"addLine\")));\n      this.tempOwn(on(toolbar, \"newComment\", lang.hitch(canvas, \"addComment\")));\n\n      this.tempOwn(on(toolbar, \"newTemplatedWidget\", lang.hitch(canvas, \"addTemplatedWidget\")));\n      this.tempOwn(on(toolbar, \"newTemplatedScreen\", lang.hitch(canvas, \"addTemplatedScreen\")));\n      this.tempOwn(on(toolbar, \"newTemplatedGroup\", lang.hitch(canvas, \"addTemplatedGroup\")));\n\n      this.tempOwn(on(toolbar, \"newThemedScreen\", lang.hitch(canvas, \"addThemedScreen\")));\n      this.tempOwn(on(toolbar, \"newThemedGroup\", lang.hitch(canvas, \"addThemedGroup\")));\n      this.tempOwn(on(toolbar, \"newThemedWidget\", lang.hitch(canvas, \"addThemedWidget\")));\n      this.tempOwn(on(toolbar, \"newMultiThemedScreen\", lang.hitch(canvas, \"addMultiThemedScreens\")));\n      this.tempOwn(on(toolbar, \"newThemedScreenAndWidget\", lang.hitch(canvas, \"addThemedScreenAndWidgets\")));\n      this.tempOwn(on(toolbar, \"newImportApp\", lang.hitch(canvas, \"addImportedApp\")));\n\n      this.tempOwn(on(toolbar, \"onNewLogicObject\", lang.hitch(canvas, \"addLogicGroup\")));\n      this.tempOwn(on(toolbar, \"onNewRestObject\", lang.hitch(canvas, \"addRestObject\")));\n      this.tempOwn(on(toolbar, \"onNewScriptObject\", lang.hitch(canvas, \"addScriptObject\")));\n      this.tempOwn(on(toolbar, \"onNewSVG\", lang.hitch(canvas, \"addSVG\")))\n      this.tempOwn(on(toolbar, \"onEditSVG\", lang.hitch(canvas, \"openSVGEditor\")))\n      \n\n      /**\n       * last set the model\n       */\n      controller.setCommandStack(stack);\n\n      /**\n       * controller will render screen\n       */\n      controller.setModel(model, this.$route.params.sid);\n\n      /**\n       * Init layer list\n       */\n      canvas.initLayer();\n\n      if (!this.pub && this.user.role !== 'guest') {\n        this.collabSession = new CollabSession(this.user)\n        this.collabSession.initWebsocket(model, canvas, controller, toolbar)\n        window.onbeforeunload = () => {this.collabSession.sendBye()}\n      }\n    },\n\n\n\n\n\n    buildAnalyticCanvas (model, test, events, annotation, hash) {\n      this.logger.log(-1, 'buildAnalyticCanvas', 'enter', hash)\n\n      const canvas = this.$refs.canvas\n      const toolbar = this.$refs.toolbar\n\n      const controller = new AnalyticController()\n      const service = Services.getModelService()\n\n      /**\n       * model factory\n       */\n       const factory = new ModelFactory();\n      factory.setModel(model);\n\n      /**\n       * render factory\n       */\n       const renderFactory = new RenderFactory();\n      renderFactory.setModel(model);\n      renderFactory.setHash(hash)\n\n      /**\n       * Dependency injection\n       */\n      controller.setModelService(service)\n      controller.setToolbar(toolbar);\n      controller.setModelFactory(factory);\n\n\n      toolbar.setController(controller);\n      toolbar.setCanvas(canvas);\n      toolbar.setUser(this.user);\n      toolbar.setModelFactory(factory);\n      toolbar.setModelService(service)\n      toolbar.setEvents(events);\n      toolbar.setAnnotation(annotation);\n      toolbar.setTest(test);\n      toolbar.setCommentService(Services.getCommentService());\n      toolbar.setPublic(this.isPublic)\n\n      canvas.setController(controller);\n      canvas.setToolbar(toolbar);\n      canvas.setRenderFactory(renderFactory);\n      canvas.setModelFactory(factory);\n      canvas.setCommentService(Services.getCommentService())\n      canvas.setUser(this.user)\n      canvas.setEvents(events);\n      canvas.setAnnotation(annotation);\n      canvas.setTest(test);\n\n      // wire shit together\n      this.tempOwn(on(toolbar, \"newComment\", lang.hitch(canvas, \"addComment\")));\n\n      let startScreen = null;\n      for(let screenID in model.screens){\n        const screen = model.screens[screenID];\n        if (screen.props && screen.props.start){\n            startScreen = screenID;\n            break;\n        }\n      }\n      /**\n       * controller will render screen\n       */\n      controller.setModel(model, startScreen);\n    },\n    getModeFromRoute() {\n      if (this.$route.meta.viewMode === 'Heatmap') {\n        return 'Heatmap'\n      } else {\n        return'Design'\n      }\n    }\n\n  },\n  beforeDestroy () {\n    if (this.collabSession) {\n      this.collabSession.sendBye()\n      this.collabSession.close()\n    }\n  },\n  async mounted() {\n    this.logger = new Logger(\"Design\");\n    this.cache = {}\n\n\n    css.add(win.body(), \"MatcVisualEditor\");\n    this.user = await Services.getUserService().load();\n    this.modelService = Services.getModelService(this.$route);\n\n    const mode = this.getModeFromRoute()\n    this.load(mode);\n\n    this.logger.log(-1, \"mounted\", \"exit > \" + mode);\n    setTimeout(() => this.loadAll(), 3000)\n  }\n};\n</script>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Design.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Design.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Design.vue?vue&type=template&id=7bf2db61\"\nimport script from \"./Design.vue?vue&type=script&lang=js\"\nexport * from \"./Design.vue?vue&type=script&lang=js\"\nimport style0 from \"./Design.vue?vue&type=style&index=0&id=7bf2db61&prod&lang=scss\"\nimport style1 from \"./Design.vue?vue&type=style&index=1&id=7bf2db61&prod&lang=sass\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"MatcCanvasPage MatcShare\",attrs:{\"id\":\"CanvasNode\"}},[_c('ShareCanvas',{ref:\"canvas\"})],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"MatcCanvas MatcAnalyticCanvas\"},[_c('div',{staticClass:\"MatcCanvasFrame\",attrs:{\"data-dojo-attach-point\":\"frame\"}},[_c('div',{staticClass:\"MatcCanvasContainer MatcCanvasZoomable\",attrs:{\"data-dojo-attach-point\":\"container\"}},[_vm._m(0),_c('div',{staticClass:\"MatcDnDLayer\",attrs:{\"data-dojo-attach-point\":\"dndContainer\"},on:{\"click\":_vm.onDNDLayerClick}})])]),_vm._m(1),_vm._m(2),_c('div',{staticClass:\"MatcMessage\",attrs:{\"data-dojo-attach-point\":\"message\"}})])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"MatcCanvasContainer\",attrs:{\"data-dojo-attach-point\":\"zoomContainer\"}},[_c('div',{staticClass:\"MatcCanvasLayer\",attrs:{\"data-dojo-attach-point\":\"screenContainer\"}}),_c('div',{staticClass:\"MatcCanvasLayer\",attrs:{\"data-dojo-attach-point\":\"widgetContainer\"}})])\n},function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"MatcCanvasScrollBar MatcCanvasScrollBarRight\",attrs:{\"data-dojo-attach-point\":\"scrollRight\"}},[_c('div',{staticClass:\"MatcCanvasScrollBarCntr MatcCanvasScrollBarCntrRight\",attrs:{\"data-dojo-attach-point\":\"scrollRightCntr\"}},[_c('div',{staticClass:\"MatchCanvasScrollHandle\",attrs:{\"data-dojo-attach-point\":\"scrollRightHandler\"}})])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"MatcCanvasScrollBar MatcCanvasScrollBarBottom\",attrs:{\"data-dojo-attach-point\":\"scrollBottom\"}},[_c('div',{staticClass:\"MatcCanvasScrollBarCntr MatcCanvasScrollBarCntrBottom\",attrs:{\"data-dojo-attach-point\":\"scrollBottomCntr\"}},[_c('div',{staticClass:\"MatchCanvasScrollHandle\",attrs:{\"data-dojo-attach-point\":\"scrollBottomHandler\"}})])])\n}]\n\nexport { render, staticRenderFns }","\n<template>\n\t<div class=\"MatcCanvas MatcAnalyticCanvas\">\n\t\t<div class=\"MatcCanvasFrame\" data-dojo-attach-point=\"frame\">\n\t\t\t<div class=\"MatcCanvasContainer MatcCanvasZoomable \" data-dojo-attach-point=\"container\">\n\t\t\t\t<div class=\"MatcCanvasContainer \" data-dojo-attach-point=\"zoomContainer\">\n\t\t\t\t\t<div data-dojo-attach-point=\"screenContainer\" class=\"MatcCanvasLayer\"></div>\n\t\t\t\t\t<div data-dojo-attach-point=\"widgetContainer\" class=\"MatcCanvasLayer\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div data-dojo-attach-point=\"dndContainer\" class=\"MatcDnDLayer\" @click=\"onDNDLayerClick\"></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"MatcCanvasScrollBar MatcCanvasScrollBarRight\" data-dojo-attach-point=\"scrollRight\">\n\t\t\t<div class=\"MatcCanvasScrollBarCntr MatcCanvasScrollBarCntrRight\" data-dojo-attach-point=\"scrollRightCntr\">\n\t\t\t\t<div class=\"MatchCanvasScrollHandle\" data-dojo-attach-point=\"scrollRightHandler\"></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"MatcCanvasScrollBar MatcCanvasScrollBarBottom\" data-dojo-attach-point=\"scrollBottom\" >\n\t\t\t<div class=\"MatcCanvasScrollBarCntr MatcCanvasScrollBarCntrBottom\" data-dojo-attach-point=\"scrollBottomCntr\">\n\t\t\t\t<div class=\"MatchCanvasScrollHandle\" data-dojo-attach-point=\"scrollBottomHandler\"></div>\n\t\t\t</div>\n\t\t</div>\n\n\n\t\t<div class=\"MatcMessage\" data-dojo-attach-point=\"message\">\n\t\t</div>\n\t</div>\n</template>\n<style lang=\"css\"></style>\n<style lang=\"scss\">\n@import \"../../style/matc.scss\";\n@import \"../../style/share.scss\";\n@import \"../../style/canvas/all.scss\";\n@import '../../style/toolbar/all.scss';\n</style>\n<script>\nimport DojoWidget from 'dojo/DojoWidget'\nimport css from 'dojo/css'\n\nimport Logger from 'common/Logger'\nimport on from 'dojo/on'\nimport lang from 'dojo/_base/lang'\n\nimport win from 'dojo/_base/win'\nimport topic from 'dojo/topic'\nimport domGeom from 'dojo/domGeom'\n\nimport DomBuilder from 'common/DomBuilder'\nimport Dialog from 'common/Dialog'\nimport ScrollContainer from 'common/ScrollContainer'\nimport _DragNDrop from 'common/_DragNDrop'\n\nimport Heat from 'dash/Heat'\nimport Render from 'canvas/Render'\nimport Lines from 'canvas/Lines'\nimport DnD from 'canvas/DnD'\nimport Add from 'canvas/Add'\nimport Select from 'canvas/Select'\nimport Distribute from 'canvas/Distribute'\nimport Tools from 'canvas/Tools'\nimport Zoom from 'canvas/Zoom'\nimport InlineEdit from 'canvas/InlineEdit'\nimport Scroll from 'canvas/Scroll'\nimport Upload from 'canvas/Upload'\nimport Comment from 'canvas/Comment'\n\nimport Simulator from 'core/Simulator'\nimport Util from 'core/Util'\nimport QR from 'core/QR'\n\nimport KeyBoard from \"canvas/KeyBoard\";\nimport Resize from \"canvas/Resize\";\nimport Replicate from \"canvas/Replicate\";\nimport _Dialogs from '../toolbar/mixins/_Dialogs'\n\nimport DomUtil from 'core/FastDomUtil'\n\nexport default {\n\tname: 'ShareCanvas',\n\tmixins: [DojoWidget, _DragNDrop, Util, Render, Lines, DnD, Add, Select, Distribute,\n\t\tTools, Zoom, InlineEdit, Scroll, Upload, Comment, KeyBoard, Resize, Replicate, Heat, _Dialogs],\n\tdata: function () {\n\t\treturn {\n\t\t\tmode: \"view\",\n\t\t\tzoom: 0.4,\n\t\t\tzoomLevelPos: 3,\n\t\t\tanalyticMode: \"HeatmapClick\",\n\t\t\tresizeEnabled: false,\n\t\t\trenderDND: true,\n\t\t\tdragNDropMinTimeSpan: 0,\n\t\t\twireInheritedWidgets: true,\n\t\t\ttaskLineOpacity: 1\n\t\t}\n\t},\n\tcomponents: {},\n\tmethods: {\n\n\t\tpostCreate() {\n\t\t\tthis.logger = new Logger(\"ShareCanvas\");\n\t\t\tthis.logger.log(2, \"postCreate\", \"entry\");\n\t\t\tthis.domUtil = new DomUtil()\n\n\t\t\tthis.initSize()\n\t\t\tthis.initWiring()\n\n\t\t\tthis.cache = {};\n\t\t\tthis.moveMode = \"classic\";\n\t\t\t/**\n\t\t\t * init container size and position\n\t\t\t */\n\t\t\tthis.canvasPos = {\n\t\t\t\tx: this.canvasStartX,\n\t\t\t\ty: this.canvasStartY,\n\t\t\t\tw: this.canvasFlowWidth,\n\t\t\t\th: this.canvasFlowHeight\n\t\t\t};\n\t\t\tthis.initContainerSize();\n\t\t\tthis.setContainerPos();\n\n\t\t\tthis.db = new DomBuilder();\n\n\n\t\t\t/**\n\t\t\t * Init remaining sub components\n\t\t\t */\n\t\t\tthis.initSelection()\n\t\t\tthis.initRender();\n\t\t\tthis.initZoom();\n\t\t\tthis.initScrollBars();\n\t\t\tthis.initComment();\n\t\t\tthis.initSettings();\n\t\t\tthis.initMouseTracker();\n\t\t\tthis.initButtons()\n\n\t\t\t/**\n\t\t\t * Init Listeners\n\t\t\t */\n\t\t\tthis.own(topic.subscribe(\"matc/toolbar/click\", lang.hitch(this, \"onToolbarClick\")));\n\t\t\tthis.own(on(win.body(), \"keydown\", lang.hitch(this, \"onKeyPress\")));\n\t\t\tthis.own(on(win.body(), \"keyup\", lang.hitch(this, \"onKeyUp\")));\n\n\t\t\tthis.logger.log(2, \"postCreate\", \"exit!!!\");\n\t\t},\n\n\t\tcloseSVGEditor() {\n\n\t\t},\n\n\t\tsetModelService(s) {\n\t\t\tthis.modelService = s\n\t\t},\n\n\t\tsetCommentService(s) {\n\t\t\tthis.commentService = s\n\t\t},\n\n\t\tsetPublic(isPublic) {\n\t\t\tthis.isPublic = isPublic;\n\t\t},\n\n\n\t\tinlineEditInit() {\n\t\t\tthis.logger.log(2, \"inlineEditInit\", \"enter\");\n\t\t},\n\n\t\tonZoomMinusClick() {\n\t\t\tlet z = Math.round((this.zoom - 0.1) * 10) / 10\n\t\t\tthis.setZoomFactor(z)\n\t\t},\n\n\t\tonZoomPlusClick() {\n\t\t\tlet z = Math.round((this.zoom + 0.1) * 10) / 10\n\t\t\tthis.setZoomFactor(z)\n\t\t},\n\n\t\tonTogggleLine() {\n\t\t\tthis.setViewLines(!this.renderLines)\n\t\t},\n\n\t\tsetSubMode () {\n\t\t\t\n\t\t},\n\n\t\tcleanUpGridResize () {},\n\n\t\tsetBW(isBW) {\n\t\t\tthis.logger.log(-1, \"setBW\", \"enter > \" + isBW);\n\t\t\tif (isBW) {\n\t\t\t\tcss.add(this.container, \"MatcCanvasBW\");\n\t\t\t} else {\n\t\t\t\tcss.remove(this.container, \"MatcCanvasBW\");\n\t\t\t}\n\t\t},\n\n\t\tonChangeCanvasViewConfig() {\n\t\t},\n\n\t\tsetCanvasViewConfig(key, value) {\n\t\t\tthis.logger.log(-1, \"setCanvasViewConfig\", \"enter > \" + key, value);\n\t\t},\n\n\t\tsetHash(h) {\n\t\t\tthis.logger.log(-1, \"setHash\", \"entry > \", h);\n\t\t\tthis.hash = h;\n\t\t},\n\n\t\t/**********************************************************************\n\t\t * Button render\n\t\t **********************************************************************/\n\t\trenderLayerList() {\n\t\t\tthis.logger.log(1, \"renderLayerList\", \"entry > \");\n\t\t},\n\n\t\tonDNDLayerClick () {\n\t\t\t//this.onCloseCommentPopup()\n\t\t},\n\n\t\t/**********************************************************************\n\t\t * Button render\n\t\t **********************************************************************/\n\n\t\tinitButtons() {\n\n\n\t\t\tvar btn = this.db.div(\"MatcTestCommentButton MatcAnimated MatcFadeOut\").build(this.domNode); //\n\t\t\tthis.db.span(\"mdi mdi-comment MatcMiddle\").build(btn);\n\t\t\tthis.own(on(btn, \"click\", lang.hitch(this, \"onNewComment\")));\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tcss.remove(btn, \"MatcFadeOut\")\n\t\t\t}, 100);\n\n\n\t\t\tvar btnSim = this.db.div(\"MatcTestQRButton  MatcAnimated MatcFadeOut\").build(this.domNode);\n\t\t\tthis.db.span(\"mdi mdi-play MatcMiddle\").build(btnSim);\n\t\t\tthis.own(on(btnSim, \"click\", lang.hitch(this, \"onSimulator\")));\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tcss.remove(btnSim, \"MatcFadeOut\")\n\t\t\t}, 200);\n\n\n\t\t\n\t\t\tvar btnZoomOut = this.db.div(\"MatcTestQRButton MatcShareZoomOut MatcAnimated MatcFadeOut\").build(this.domNode);\n\t\t\tthis.db.span(\"mdi mdi-magnify-minus-outline MatcMiddle\").build(btnZoomOut);\n\t\t\tthis.own(on(btnZoomOut, \"click\", lang.hitch(this, \"onZoomMinusClick\")));\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tcss.remove(btnZoomOut, \"MatcFadeOut\")\n\t\t\t}, 300);\n\n\t\t\tvar btnZoomIn = this.db.div(\"MatcTestQRButton  MatcShareZoomIn MatcAnimated MatcFadeOut\").build(this.domNode);\n\t\t\tthis.db.span(\"mdi mdi-magnify-plus-outline MatcMiddle\").build(btnZoomIn);\n\t\t\tthis.own(on(btnZoomIn, \"click\", lang.hitch(this, \"onZoomPlusClick\")));\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tcss.remove(btnZoomIn, \"MatcFadeOut\")\n\t\t\t}, 400);\n\n\n\t\t\tvar lineButton = this.db.div(\"MatcTestQRButton MatcShareLine MatcAnimated MatcFadeOut\").build(this.domNode);\n\t\t\tthis.db.span(\"mdi mdi-vector-line MatcMiddle\").build(lineButton);\n\t\t\tthis.own(on(lineButton, \"click\", lang.hitch(this, \"onTogggleLine\")));\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tcss.remove(lineButton, \"MatcFadeOut\")\n\t\t\t}, 500);\n\n\t\t},\n\n\t\t/**********************************************************************\n\t\t * Comment Overwirtes\n\t\t **********************************************************************/\n\n\t\tonNewComment(e) {\n\t\t\tthis.logger.log(1, \"onNewComment\", \"enter > \");\n\t\t\tthis.addComment({ event: e, type: \"comment\" });\n\t\t},\n\n\t\tasync loadComments() {\n\t\t\tthis.logger.log(1, \"loadComments\", \"enter > \", this.model);\n\t\t\tif (!this.model || !this.hash) {\n\t\t\t\tconsole.error(\"loadComments() > no model or hash\")\n\t\t\t}\n\t\n\t\t\tlet comments = await this.commentService.findByHash(this.model.id, this.hash, 'ScreenComment')\t\n\t\t\tthis.onCommentsLoaded(comments)\n\t\t},\n\n\t\n\t\tasync saveDNDChange(comment) {\t\n\t\t\tconst comments = await this.commentService.updateByHash(this.model.id, this.hash, comment)\n\t\t\tthis.onCommentSaved(comments)\t\t\t\n\t\t},\n\n\t\tasync onSaveComment(comment, isChild=false) {\t\t\n\t\t\tif (comment.id) {\n\t\t\t\tconst old = this.comments[comment.id];\n\t\t\t\told.message = comment.message\n\t\t\t\told.status = comment.status\n\t\t\t\told.modified = new Date().getTime()\n\t\t\t\told.edited = true\n\t\t\t\tconst res = await this.commentService.updateByHash(this.model.id, this.hash, old)\n\t\t\t\tthis.updateCommentIcon(old)\n\t\t\t\tthis.onCommentSaved(res)\t\t\n\t\t\t} else {\n\t\t\t\tconst res = await this.commentService.createByHash(this.model.id, this.hash, comment)\t\t\t\n\t\t\t\tthis.onCommentSaved(res)\t\t\t\t\t\n\t\t\t}\t\t\t\n\t\t\tif (!isChild) {\n\t\t\t\tthis.onCloseCommentPopup();\n\t\t\t}\t\n\t\t},\n\t\n\t\t/**********************************************************************\n\t\t * Simulator stuff, should move to some kind of toolbar to reuse _Dialogs\n\t\t **********************************************************************/\n\n\n\t\tonSimulator(e) {\n\t\t\t// make sure we use an un-zoomed model like\n\t\t\t// the toolbar would do\n\t\t\t//console.debug(this.model)\n\t\t\tthis.startSimilator(e)\n\t\t},\n\n\n\t\tstartSimilator() {\n\t\t\tthis.logger.log(0, \"startSimilator\", \"entry\");\n\n\t\t\tvar pos = domGeom.position(win.body());\n\t\t\tlet maxHeight = pos.h - 100\n\t\t\t/**\n\t\t\t * Since 2.1.7 we have better scalling.\n\t\t\t * Keep in sync with the ShareCanvas.startSimulator() method\n\t\t\t *\n\t\t\t * FIXME: This could be still a litte bit better. We could max the height and with factors\n\t\t\t */\n\t\t\tcss.add(win.body(), 'MatcCanvasSimulatorVisible')\n\t\t\tif (this.defaultModel.type === \"desktop\") {\n\t\t\t\tpos.w = pos.w * 0.75;\n\t\t\t\tpos.h = pos.h * 0.75;\n\t\t\t\tthis._showDesktopSimulator(this.model, pos, maxHeight);\n\t\t\t} else if (this.defaultModel.type === \"tablet\") {\n\t\t\t\tif (this.defaultModel.screenSize.w > this.model.screenSize.h) {\n\t\t\t\t\tpos.w = pos.w * 0.65;\n\t\t\t\t\tpos.h = pos.h * 0.65;\n\t\t\t\t\tthis._showMobileTest(this.defaultModel, pos, \"MatchSimulatorWrapperTablet\", maxHeight);\n\t\t\t\t} else {\n\t\t\t\t\tpos.w = pos.w * 0.35;\n\t\t\t\t\tpos.h = pos.h * 0.35;\n\t\t\t\t\tthis._showMobileTest(this.defaultModel, pos, \"MatchSimulatorWrapperTablet\", maxHeight);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tpos.w = pos.w * 0.25;\n\t\t\t\tpos.h = pos.h * 0.25;\n\t\t\t\tthis._showMobileTest(this.defaultModel, pos, \"MatchSimulatorWrapperMobile\", maxHeight);\n\t\t\t}\n\t\t},\n\n\n\t\t_showDesktopSimulator(model, pos, maxHeight) {\n\n\t\t\tconst dialog = document.createElement(\"div\");\n\t\t\tcss.add(dialog, \"MatchSimulatorDialog\");\n\n\t\t\tconst container = document.createElement(\"div\");\n\t\t\tcss.add(container, \"MatchSimulatorContainer\");\n\t\t\tdialog.appendChild(container);\n\n\t\t\tpos = this.getScaledSize(pos, \"width\", this.model);\n\t\t\tif (pos.h > maxHeight) {\n\t\t\t\tlet factor = pos.h / maxHeight\n\t\t\t\tpos.h = pos.h / factor\n\t\t\t\tpos.w = pos.w / factor\n\t\t\t}\n\t\t\tcontainer.style.width = Math.round(pos.w) + \"px\";\n\t\t\tcontainer.style.height = Math.round(pos.h) + \"px\";\n\n\t\t\tconst s = this.$new(Simulator, { mode: \"debug\", logData: false });\n\t\t\ts.scrollListenTarget = \"parent\";\n\t\t\ts.isDesktopTest = true\n\t\t\ts.setHash(this.hash)\n\n\t\t\tconst scroller = this.$new(ScrollContainer, { canDestroy: true });\n\t\t\tscroller.placeAt(container);\n\t\t\t//s.setScrollContainer(scroller);\n\n\n\t\t\tconst d = new Dialog();\n\t\t\td.hasCSSAnimation = false;\n\t\t\td.popup(dialog, this.simulatorButton);\n\n\t\t\td.own(d.on(\"close\", lang.hitch(this, \"stopSimulator\", s, scroller)));\n\t\t\td.own(on(dialog, 'click', (e) => {\n\t\t\t\tif (e.target === dialog) {\n\t\t\t\t\td.close()\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\t/**\n\t\t\t * Isn#t the model passed\n\t\t\t */\n\t\t\tmodel = this.defaultModel;\n\t\t\tconst screen = this._getSimulatorScreen();\n\t\t\ts.setStartScreen(screen);\n\t\t\tsetTimeout(function () {\n\t\t\t\tscroller.wrap(s.domNode);\n\t\t\t\ts.setModel(model);\n\t\t\t}, 500);\n\n\t\t\t/**\n\t\t\t * otherwise the mouse wheel listener will prevent\n\t\t\t * scrolling in the simulator!\n\t\t\t */\n\t\t\tif (this.canvas) {\n\t\t\t\tthis.canvas.enableMouseZoom(false);\n\t\t\t\tthis.canvas.setState(\"simulate\");\n\t\t\t}\n\t\n\n\t\t},\n\n\n\n\t\t_showMobileTest(model, pos, clazz, maxHeight) {\n\t\t\tconst dialog = document.createElement(\"div\");\n\t\t\tcss.add(dialog, \"MatchSimulatorDialog\");\n\n\t\t\tconst wrapper = document.createElement(\"div\");\n\t\t\tcss.add(wrapper, \"MatchSimulatorWrapper \");\n\t\t\tif (clazz) {\n\t\t\t\tcss.add(wrapper, clazz);\n\t\t\t}\n\t\t\tdialog.appendChild(wrapper);\n\n\t\t\tconst container = document.createElement(\"div\");\n\t\t\tcss.add(container, \"MatchSimulatorContainer\");\n\n\t\t\tpos = this.getScaledSize(pos, \"width\", this.model);\n\t\t\tif (pos.h > maxHeight) {\n\t\t\t\tlet factor = pos.h / maxHeight\n\t\t\t\tpos.h = Math.ceil(pos.h / factor)\n\t\t\t\tpos.w = Math.ceil(pos.w / factor)\n\t\t\t}\n\n\t\t\tcontainer.style.width = Math.ceil(pos.w) + \"px\";\n\t\t\tcontainer.style.height = Math.ceil(pos.h) + \"px\";\n\n\t\t\twrapper.style.width = Math.ceil(pos.w) + \"px\";\n\t\t\twrapper.style.height = Math.ceil(pos.h) + \"px\";\n\t\t\tcss.add(wrapper, 'MatcSimulatorFadeOut')\n\t\t\twrapper.appendChild(container);\n\n\t\t\tconst scroller = this.$new(ScrollContainer, { canDestroy: true });\n\t\t\tscroller.placeAt(container);\n\n\t\t\tconst s = this.$new(Simulator, { mode: \"debug\", logData: false });\n\t\t\ts.scrollListenTarget = \"parent\";\n\t\t\ts.isDesktopTest = true\n\t\t\t//s.setScrollContainer(scroller);\n\t\t\ts.setHash(this.hash)\n\n\n\t\t\t// sinde 4.1.03 the qr code can be hidden in the settings.\n\t\t\tconst settings = this.getSettings()\n\t\t\tif (settings.hasQRCode !== false) {\n\t\t\t\tconst qrCodeWrapper = document.createElement(\"div\")\n\t\t\t\tcss.add(qrCodeWrapper, \"MatcSimulatorQRWrapper\");\n\t\t\t\tdialog.appendChild(qrCodeWrapper);\n\n\t\t\t\tconst img = document.createElement(\"img\");\n\t\t\t\tQR.getQRCode(this.hash, false, true).then(url => {\n\t\t\t\t\timg.src = url\n\t\t\t\t})\n\t\t\t\tcss.add(img, \"MatcSimulatorQR\");\n\t\t\t\tqrCodeWrapper.appendChild(img);\n\t\t\t}\n\n\n\n\t\t\t/**\n\t\t\t * FIXME: We have here some flickering. Because of the fixed\n\t\t\t * positions widgets we cannot use cssAniamtion because the scale(1,1)\n\t\t\t * set in Dialog.js will mess up the the fixed attribute.\n\t\t\t *\n\t\t\t * Solutions:\n\t\t\t *\n\t\t\t * 1) Do not add screen pos whne flag is set?\n\t\t\t */\n\t\t\tconst d = new Dialog();\n\t\t\td.hasCSSAnimation = false;\n\t\t\td.popup(dialog, this.simulatorButton);\n\n\t\t\td.on(\"close\", lang.hitch(this, \"stopSimulator\", s, scroller));\n\t\t\td.own(on(dialog, 'click', (e) => {\n\t\t\t\tif (e.target === dialog) {\n\t\t\t\t\td.close()\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\t/**\n\t\t\t * Isnt the model passed???\n\t\t\t */\n\t\t\tmodel = this.defaultModel;\n\n\t\t\tconst screen = this._getSimulatorScreen();\n\t\t\tconsole.debug(screen)\n\t\t\ts.setStartScreen(screen);\n\t\t\tsetTimeout(() => {\n\t\t\t\tscroller.wrap(s.domNode);\n\t\t\t\ts.setModel(model);\n\t\t\t\tcss.remove(wrapper, 'MatcSimulatorFadeOut')\n\t\t\t}, 600);\n\n\t\t\t/**\n\t\t\t * otherwise the mouse wheel listener will prevent\n\t\t\t * scrolling in the simulator!\n\t\t\t */\n\t\t\tif (this.canvas) {\n\t\t\t\tthis.canvas.enableMouseZoom(false);\n\t\t\t\tthis.canvas.setState(\"simulate\");\n\t\t\t}\n\n\t\t},\n\n\t\t_getSimulatorScreen() {\n\t\t\tif (this._selectedScreen) {\n\t\t\t\treturn this._selectedScreen;\n\t\t\t}\n\t\t\tif (this._selectedGroup) {\n\t\t\t\tconst childId = this._selectedGroup.children[0]\n\t\t\t\treturn this.getParentScreen({ id: childId });\n\t\t\t}\n\t\t\tif (this._selectedWidget) {\n\t\t\t\treturn this.getParentScreen(this._selectedWidget);\n\t\t\t}\n\t\t},\n\n\n\n\t\t/**********************************************************************\n\t\t * Wiring\n\t\t **********************************************************************/\n\n\t\tinitWiring() {\n\t\t\tthis.logger.log(-1, \"initWiring\", \"enter\");\n\t\t\tthis.own(\n\t\t\t\ton(this.dndContainer, \"mousedown\", (e) => this.dispatchMouseDown(e))\n\t\t\t);\n\t\t},\n\n\t\tdispatchMouseDownCanvas(e) {\n\t\t\tthis.logger.log(1, \"dispatchMouseDownCanvas\", \"enter\", e, this.mode);\n\t\t\tthis.onDragStart(this.container, \"container\", \"onCanvasDnDStart\", \"onCanvasDnDMove\", \"onCanvasDnDEnd\", null, e);\n\t\t},\n\n\t\tdispatchMouseDownScreen(e, id) {\n\t\t\tthis.logger.log(-1, \"dispatchMouseDownScreen\", \"enter\", id);\n\t\t},\n\n\t\tdispatchMouseDownWidget(e, id) {\n\t\t\tthis.logger.log(-1, \"dispatchMouseDownWidget\", \"enter\", id);\n\t\t\tlet div = this.widgetDivs[id];\n\t\t\tthis.onWidgetDndClick(id, div);\n\t\t},\n\n\t\tonWidgetDndClick(id, div, pos, e) {\n\t\t\tthis.stopEvent(e);\n\t\t\tthis.logger.log(1, \"onWidgetDndClick\", \"enter > \" + id);\n\t\t\tthis.setState(0);\n\t\t\t// var widget = this.model.widgets[id];\n\t\t\t// if(widget){\n\t\t\t// \tvar lines = this.getLinesForWidget(widget);\n\t\t\t// \tif (lines) {\n\t\t\t// \t\tvar clickLine = this.getLineForGesture(lines, \"click\")\n\t\t\t// \t\tif (!clickLine){\n\t\t\t// \t\t\tclickLine = lines[0]\n\t\t\t// \t\t}\n\t\t\t// \t\tif (clickLine){\n\t\t\t// \t\t\tthis.animateToScreen(clickLine.to, this.container);\n\t\t\t// \t\t}\n\t\t\t// \t}\n\t\t\t// } else {\n\t\t\t// \tthis.highlightActionWidgets();\n\t\t\t// }\n\t\t},\n\n\t\thighlightActionWidgets() {\n\t\t\tthis.logger.log(2, \"highlightActionWidgets\", \"entry > \");\n\t\t\tvar divs = [];\n\t\t\tfor (var id in this.model.widgets) {\n\t\t\t\tvar widget = this.model.widgets[id];\n\t\t\t\tif (widget) {\n\t\t\t\t\tvar lines = this.getLinesForWidget(widget);\n\t\t\t\t\tif (lines) {\n\t\t\t\t\t\tvar div = this.analyticsDivs[widget.id];\n\t\t\t\t\t\tif (div) {\n\t\t\t\t\t\t\tdivs.push(div);\n\t\t\t\t\t\t\tcss.add(div, \"MatcSimulatorWidgetHightlight\")\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetTimeout(function () {\n\t\t\t\tfor (var i = 0; i < divs.length; i++) {\n\t\t\t\t\tcss.remove(divs[i], \"MatcSimulatorWidgetHightlight\")\n\t\t\t\t}\n\t\t\t}, 500)\n\t\t},\n\n\n\t\tonScreenDndClick(id, div, pos, e) {\n\t\t\tthis.logger.log(-1, \"onScreenDndClick\", \"entry > \" + id);\n\t\t\tthis.stopEvent(e);\n\t\t\tthis.highlightActionWidgets();\n\t\t\t// TODO: Check for lines\n\t\t\tthis.setState(0);\n\t\t\t// call canvas click to make sure comment popups close\n\t\t\tthis.onCanvasSelected();\n\t\t},\n\n\t\tonCanvasSelected() {\n\t\t\tthis.logger.log(-2, \"onCanvasSelected\", \"entry > \");\n\t\t\t//this.inherited(arguments) ;\n\t\t},\n\n\t\t/**********************************************************************\n\t\t * Rendering\n\t\t **********************************************************************/\n\n\t\t updateGridRezise() {},\n\n\n\t\tanimateToScreen(screenID, container) {\n\t\t\t// css.add(container, \"MatcShareCanvasAnimatedContainer\");\n\t\t\tthis.moveToScreen(screenID);\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tcss.remove(container, \"MatcShareCanvasAnimatedContainer\");\n\t\t\t}, 500);\n\t\t},\n\n\n\t\t/**********************************************************************\n\t\t * Rendering\n\t\t **********************************************************************/\n\n\n\t\tafterRender() {\n\t\t\tthis.logger.log(-1, \"afterRender\", \"entry > \" + this.analyticMode);\n\t\t\tthis.cleanUpAnalytics();\n\n\n\t\t},\n\n\t\thasSelect() {\n\t\t\treturn this._mode != \"addComment\";\n\t\t},\n\n\n\t\t/**********************************************************************\n\t\t * Gesture\n\t\t **********************************************************************/\n\n\t\tcleanUpAnalytics() {\n\t\t\tthis.analyticsDivs = {};\n\t\t},\n\n\n\t\t/**********************************************************************\n\t\t * DI\n\t\t **********************************************************************/\n\n\n\t\tsetController(c) {\n\t\t\tthis.logger.log(2, \"setController\", \"enter\");\n\t\t\tthis.controller = c;\n\t\t\tc.setCanvas(this);\n\t\t},\n\n\t\tgetController() {\n\t\t\tif (this._controllerCallback) {\n\t\t\t\tthis[this._controllerCallback]();\n\t\t\t}\n\t\t\treturn this.controller;\n\t\t},\n\n\t\tsetControllerCallback(c) {\n\t\t\tthis._controllerCallback = c;\n\t\t},\n\n\n\t\tsetModelFactory(f) {\n\t\t\tthis.logger.log(3, \"setModelFactory\", \"enter\");\n\t\t\tthis.factory = f;\n\t\t},\n\n\t\tsetRenderFactory(f) {\n\t\t\tthis.logger.log(0, \"setRenderFactory\", \"enter\");\n\t\t\tthis.renderFactory = f;\n\t\t},\n\n\t\tsetModel(model) {\n\t\t\tthis.logger.log(-3, \"setModel\", \"enter\");\n\t\t\t\n\t\t\tthis.model = model;\n\t\t\tthis.defaultModel = model\n\t\t\tthis.grid = this.model.grid;\n\t\t\tif (!this.isCommentsLoaded) {\n\t\t\t\tthis.loadComments()\n\t\t\t\tthis.isCommentsLoaded = true\n\t\t\t}\n\n\t\t},\n\n\n\t\tsetTest(t) {\n\t\t\tthis.logger.log(2, \"setTest\", \"enter > # \");\n\t\t\tthis.testSettings = t;\n\t\t},\n\n\n\t\tsetUser(u) {\n\t\t\tthis.user = u;\n\t\t},\n\n\t\tsetMode(mode, forceRender) {\n\t\t\tthis.logger.log(2, \"setMode\", \"enter > \" + mode + \" != \" + this._mode + \" > \" + forceRender);\n\t\t\tif (mode != this._mode) {\n\t\t\t\tthis._mode = mode;\n\t\t\t\tif (this.toolbar) {\n\t\t\t\t\tthis.toolbar.setMode(mode);\n\t\t\t\t}\n\t\t\t\tthis.rerender();\n\t\t\t} else if (forceRender) {\n\t\t\t\tthis.rerender();\n\t\t\t}\n\t\t},\n\n\n\t\tgetMode() {\n\t\t\treturn this._mode;\n\t\t},\n\n\n\n\n\t\t/***************************************************************************\n\t\t * Keyboard handling\n\t\t ***************************************************************************/\n\n\t\tonKeyPress(e) {\n\n\t\t\tthis._currentKeyEvent = e;\n\n\t\t\tif (this.state == \"simulate\" || this.state == \"dialog\") {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar target = e.target;\n\t\t\tif (css.contains(target, \"MatcIgnoreOnKeyPress\")) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * The keycode is differently in every browser!\n\t\t\t */\n\t\t\tvar k = e.keyCode ? e.keyCode : e.which;\n\n\t\t\tif (k == 32) { // space\n\t\t\t\tif (!this._inlineEditStarted) {\n\t\t\t\t\tthis.stopEvent(e);\n\t\t\t\t\tif (this.getMode() != \"move\") {\n\t\t\t\t\t\tthis.showHint(\"Move the mouse to move canvas...\");\n\t\t\t\t\t\tthis.onDragStart(this.container, \"container\", \"onCanvasDnDStart\", \"onCanvasDnDMove\", \"onCanvasDnDEnd\", null, this._lastMouseMoveEvent, true);\n\t\t\t\t\t\tthis.setMode(\"move\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/**\n\t\t\t\t * Zoom\n\t\t\t\t */\n\t\t\t} else if (k == 171 || k == 187) { // +\n\t\t\t\tif (!this._inlineEditStarted) {\n\t\t\t\t\tthis.onClickPlus();\n\t\t\t\t\tthis.stopEvent(e);\n\t\t\t\t}\n\t\t\t} else if (k == 173 || k == 189) { //-\n\n\t\t\t\tif (!this._inlineEditStarted) {\n\t\t\t\t\tthis.onClickMinus();\n\t\t\t\t\tthis.stopEvent(e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t},\n\n\t\tonKeyUp(e) {\n\t\t\tvar k = e.keyCode ? e.keyCode : e.which;\n\t\t\tif (k == 32) {\n\t\t\t\tthis.onDragEnd(this._lastMouseMoveEvent);\n\t\t\t\tthis.setMode(\"view\");\n\t\t\t}\n\n\t\t\tdelete this._currentKeyEvent;\n\t\t},\n\n\n\t\t/***************************************************************************\n\t\t * Settings\n\t\t ***************************************************************************/\n\n\n\t\tinitSettings() {\n\t\t\tthis.logger.log(1, \"initSettings\", \"enter > \");\n\t\t\t/**\n\t\t\t * default settings\n\t\t\t */\n\t\t\tthis.settings = {\n\t\t\t\tcanvasTheme: \"MatcLight\",\n\t\t\t\tlineColor: \"#999\",\n\t\t\t\tlineWidth: 1,\n\t\t\t\tstorePropView: true,\n\t\t\t\tmoveMode: \"ps\",\n\t\t\t\tmouseWheelMode: \"scroll\"\n\t\t\t};\n\n\n\t\t\tvar s = this._getStatus(\"matcSettings\");\n\t\t\tif (s) {\n\t\t\t\tif (s.canvasTheme) {\n\t\t\t\t\t//this.settings.canvasTheme = s.canvasTheme;\n\t\t\t\t}\n\t\t\t\tif (s.lineColor) {\n\t\t\t\t\tthis.settings.lineColor = s.lineColor;\n\t\t\t\t}\n\t\t\t\tif (s.lineWidth) {\n\t\t\t\t\tthis.settings.lineWidth = s.lineWidth;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.logger.log(2, \"initSettings\", \"exit>  no saved settings\");\n\t\t\t}\n\n\n\t\t\tthis.applySettings(this.settings);\n\t\t},\n\n\t\tgetSettings() {\n\t\t\treturn this.settings;\n\t\t},\n\n\t\tsetSettings(s) {\n\n\t\t\t/**\n\t\t\t * Mixin values\n\t\t\t */\n\t\t\tif (s.canvasTheme) {\n\t\t\t\tthis.settings.canvasTheme = s.canvasTheme;\n\t\t\t}\n\t\t\tif (s.lineColor) {\n\t\t\t\t//this.settings.lineColor = s.lineColor;\n\t\t\t}\n\t\t\tif (s.lineWidth) {\n\t\t\t\tthis.settings.lineWidth = s.lineWidth;\n\t\t\t}\n\t\t\tif (s.storePropView != null) {\n\t\t\t\tthis.settings.storePropView = s.storePropView;\n\t\t\t}\n\n\t\t\tif (s.mouseWheelMode != null) {\n\t\t\t\tthis.settings.mouseWheelMode = s.mouseWheelMode;\n\t\t\t}\n\n\t\t\tthis._setStatus(\"matcSettings\", this.settings);\n\n\t\t\tthis.applySettings(this.settings);\n\t\t\tthis.rerender();\n\t\t},\n\n\n\t\tapplySettings(s) {\n\n\t\t\tthis.logger.log(2, \"applySettings\", \"enter > \" + s.canvasTheme + \" &> \" + s.moveMode);\n\n\t\t\tif (s.lineWidth) {\n\t\t\t\tthis.defaultLineWidth = s.lineWidth;\n\t\t\t}\n\t\t\tif (s.canvasTheme) {\n\t\t\t\tif (this._lastCanvasTheme) {\n\t\t\t\t\tcss.remove(win.body(), this._lastCanvasTheme);\n\t\t\t\t}\n\t\t\t\tcss.add(win.body(), s.canvasTheme)\n\t\t\t\tthis._lastCanvasTheme = s.canvasTheme;\n\t\t\t}\n\n\t\t\tif (s.mouseWheelMode) {\n\t\t\t\tthis._mouseWheelMode = s.mouseWheelMode;\n\t\t\t}\n\n\t\t\tthis.settings = s;\n\n\t\t},\n\n\n\t\t/***************************************************************************\n\t\t * Helper Functons\n\t\t ***************************************************************************/\n\n\n\t\t/**\n\t\t * Returns all lines for a widget or its parent group.\n\t\t *\n\t\t * 1) If there is one or more lines for the widget, this will be\n\t\t * returned\n\t\t *\n\t\t * 2) Else, if there is a group and the group has one or more line,\n\t\t * the group lines will be returned!\n\t\t */\n\t\tgetLinesForWidget(widget) {\n\n\t\t\t/**\n\t\t\t * In case of an inherited widget, use the lines of the master\n\t\t\t */\n\t\t\tif (widget.inherited && this.model.widgets[widget.inherited]) {\n\t\t\t\twidget = this.model.widgets[widget.inherited];\n\t\t\t}\n\n\t\t\tvar widgetID = widget.id;\n\t\t\tvar lines = this.getFromLines(widget);\n\t\t\tif (lines && lines.length > 0) {\n\t\t\t\treturn lines;\n\t\t\t}\n\n\t\t\tvar group = this.getParentGroup(widgetID);\n\t\t\tif (group) {\n\t\t\t\tvar groupLine = this.getFromLines(group);\n\t\t\t\tif (groupLine && groupLine.length > 0) {\n\t\t\t\t\treturn groupLine;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * Return the line with a given type (lines[i].event === type).\n\t\t * Handles also old school where there was not event\n\t\t */\n\t\tgetLineForGesture(lines, type) {\n\t\t\tfor (var i = 0; i < lines.length; i++) {\n\t\t\t\tif (lines[i].event === type || (\"click\" === type && !lines[i].event)) {\n\t\t\t\t\treturn lines[i];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tinitMouseTracker() {\n\t\t\tthis.own(on(win.body(), \"mousemove\", lang.hitch(this, \"onMouseMove\")));\n\t\t},\n\n\t\tonMouseMove(e) {\n\t\t\tvar pos2 = this.getCanvasMousePosition(e, true);\n\t\t\tthis._lastMousePos = pos2;\n\t\t\tthis._lastMouseMoveEvent = e;\n\t\t},\n\n\n\t\tdestroy() {\n\t\t\tthis.cleanUp();\n\t\t}\n\t},\n\tmounted() {\n\n\t}\n}\n</script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ShareCanvas.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ShareCanvas.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./ShareCanvas.vue?vue&type=template&id=a01e04d6\"\nimport script from \"./ShareCanvas.vue?vue&type=script&lang=js\"\nexport * from \"./ShareCanvas.vue?vue&type=script&lang=js\"\nimport style1 from \"./ShareCanvas.vue?vue&type=style&index=1&id=a01e04d6&prod&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","\nimport lang from 'dojo/_base/lang'\nimport win from 'dojo/win'\nimport Logger from 'common/Logger'\nimport Core from 'core/Core'\nimport CoreUtil from 'core/CoreUtil'\n\nexport default class ShareController extends Core{\n\n\tconstructor (){\n\t\tsuper()\n\t\tthis.logger = new Logger(\"ShareContoller\");\n\t\tthis.logger.log(2,\"constructor\", \"exit\");\n\t}\n\n\t/**********************************************************************\n\t * Dependencies\n\t **********************************************************************/\n\n\tsetCanvas (c){\n\t\tthis.logger.log(3,\"setCanvas\", \"entry\");\n\t\tthis._canvas = c;\n\t}\n\n\tsetToolbar (t){\n\t\tthis.logger.log(3,\"setToolbar\", \"entry\");\n\t\tthis.toolbar = t;\n\t}\n\n\tsetModelService (s) {\n\t\tthis.modelService = s\n\t}\n\n\tsetModelFactory (f){\n\t\tthis.logger.log(3,\"setModelFactory\", \"entry\");\n\t\tthis.factory = f;\n\t}\n\n\tsetModel (m, screenID){\n\t\tthis.logger.log(2,\"setModel\", \"entry > \" + screenID);\n\t\tthis.model = m;\n\n\t\t// Zoom out if large model!\n\t\tvar count = this.countProps(m.screens);\n\t\tif (count > 4) {\n\t\t\tif(this._canvas){\n\t\t\t\tthis._canvas.zoom = 0.25;\n\t\t\t\tthis._canvas.zoomLevelPos = 2;\n\t\t\t}\n\t\t}\n\n\t\tthis.inheritedModel = this.createInheritedModel(m);\n\t\tthis.oldModel = lang.clone(m);\n\t\tthis.render(screenID);\n\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.setModel(m);\n\t\t}\n\n\t\tif (this._canvas) {\n\t\t\tthis._canvas.setFonts(m.fonts)\n\t\t}\n\n\t\tthis.logger.log(3,\"setModel\", \"entry > \" + screenID);\n\t}\n\n\n\tsetMode (mode){\n\t\tthis.logger.log(0,\"setMode\", \"entry > \" + mode);\n\t\tif (this.toolbar) {\n\t\t\tthis.toolbar.setMode(mode);\n\t\t}\n\t\tthis._canvas.setMode(mode);\n\t}\n\n\tsetSinglePage (enabled){\n\t\tthis.logger.log(0,\"setSinglePage\", \"entry > \" + enabled);\n\t}\n\n\n\tgetZoomFactor (){\n\t\tif(this._canvas){\n\t\t\treturn this._canvas.getZoomFactor();\n\t\t}\n\t\treturn 1;\n\t}\n\n\t/**********************************************************************\n\t * Canvas Delegates\n\t **********************************************************************/\n\n\trender (screenID){\n\t\tthis.logger.log(2,\"render\", \"enter > screenID : \" + screenID);\n\n\t\tif(this._canvas){\n\t\t\tlet inheritedModel = CoreUtil.createInheritedModel(this.model)\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tthis._canvas.setModel(inheritedModel);\n\t\t\t\tthis._canvas.render(inheritedModel);\n\t\t\t\tif(screenID){\n\t\t\t\t\tthis._canvas.moveToScreen(screenID);\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\t_requestRendering (screenID){\n\t\tif(this._zoomedModel){\n\t\t\tthis._canvas.render(this._zoomedModel);\n\t\t\tif(screenID){\n\t\t\t\tthis._canvas.moveToScreen(screenID);\n\t\t\t}\n\t\t}\n\t\tthis._zoomedModel = null;\n\t}\n\n\t_zoomToScreen (screenID){\n\t\tif(screenID && this.model.screens[screenID]){\n\t\t\t/**\n\t\t\t * here we make sure the selected screen fits in the\n\t\t\t * browser window. We simply find the smallest possible\n\t\t\t * zoom factor and subtract 0.2 to make sure it fits in\n\t\t\t * browser\n\t\t\t */\n\t\t\tvar screen = this.model.screens[screenID];\n\t\t\tlet winBox = win.getBox();\n\t\t\tlet x =  winBox.w / screen.w;\n\t\t\tlet y =  winBox.h / screen.h;\n\t\t\tvar zoom = (Math.floor( Math.min(x,y) * 10) / 10) -0.2 ;\n\t\t\tthis._canvas.setZoom(zoom);\n\n\t\t}\n\t}\n\n\t/**********************************************************************\n\t * Selection methods\n\t **********************************************************************/\n\n\tonWidgetSelected (id){\n\t\tthis.logger.log(0,\"onWidgetSelected\", \"enter > \"+ id);\n\t\tvar widget = this.inheritedModel.widgets[id];\n\t\tif(widget){\n\t\t\tif(this.toolbar){\n\t\t\t\tthis.toolbar.onWidgetSelected(widget);\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn(\"onWidgetSelected() > No width with id\", id);\n\t\t}\n\t}\n\n\n\tonScreenSelected (id){\n\t\tthis.logger.log(1,\"onScreenSelected\", \"enter > \"+ id);\n\t\tvar screen = this.model.screens[id];\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.onScreenSelected(screen);\n\t\t}\n\t}\n\n\tonCanvasSelected (){\n\t\tthis.logger.log(1,\"onCanvasSelected\", \"enter \");\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.onCanvasSelected();\n\t\t}\n\t}\n\n\tonLineSelected (id){\n\t\tthis.logger.log(1,\"onLineSelected\", \"enter > \" + id);\n\t\tvar line = this.model.lines[id];\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.onLineSelected(line);\n\t\t}\n\t}\n\n\tonMultiSelect (selection){\n\t\tthis.logger.log(1,\"onMultiSelect\", \"enter > \");\n\t\tif(this.toolbar){\n\t\t\t/**\n\t\t\t * TODO: get all the model elements\n\t\t\t */\n\t\t\tthis.toolbar.onMultiSelect(selection);\n\t\t}\n\t}\n\n\tonGroupSelected (id){\n\t\tthis.logger.log(1,\"onGroupSelected\", \"enter > \" + id);\n\t\tif(this.model.groups && this.model.groups[id]){\n\t\t\tif(this.toolbar){\n\t\t\t\tvar group = this.model.groups[id];\n\t\t\t\tthis.toolbar.onGroupSelect(group);\n\t\t\t}\n\t\t}\n\t}\n\n\tunSelect (){\n\t\tif(this._canvas){\n\t\t\tthis._canvas.unSelect();\n\n\t\t}\n\t\tif(this.toolbar){\n\t\t\tthis.toolbar.cleanUp();\n\t\t}\n\t}\n\n\n\tshowSuccess (msg){\n\t\tif(this._canvas){\n\t\t\tthis._canvas.showSuccess(msg);\n\t\t}\n\t}\n\n\tshowError (msg){\n\t\tif(this._canvas){\n\t\t\tthis._canvas.showError(msg);\n\t\t}\n\t}\n\n}","<template>\n  <div class=\"MatcCanvasPage MatcShare\" id=\"CanvasNode\">\n      <ShareCanvas ref=\"canvas\" />\n  </div>\n</template>\n\n<style class=\"css\">\n\t@import url(\"../../style/css/legacy.css\");\n</style>\n\n<style lang=\"scss\">\n  @import \"../../style/matc.scss\";\n  @import \"../../style/test.scss\";\n</style>\n<style lang=\"sass\">\n  @import \"../../style/bulma.sass\"\n</style>\n\n<script>\nimport DojoWidget from \"dojo/DojoWidget\";\nimport css from 'dojo/css'\nimport win from 'dojo/win'\nimport ShareCanvas from 'canvas/share/ShareCanvas'\nimport ShareController from 'canvas/share/ShareController'\nimport ModelFactory from 'core/ModelFactory'\nimport RenderFactory from 'core/RenderFactory'\n//import lang from 'dojo/_base/lang'\n//import on from 'dojo/on'\nimport Services from 'services/Services'\nimport Logger from \"common/Logger\";\n\nexport default {\n  name: \"Design\",\n  mixins: [DojoWidget],\n  data: function() {\n    return {\n    };\n  },\n  components: {\n      'ShareCanvas': ShareCanvas\n  },\n  computed: {\n    pub () {\n      return this.$route.meta && this.$route.meta.isPublic\n    },\n    mode () {\n\t\t\tif (this.pub) {\n\t\t\t\treturn 'public'\n\t\t\t}\n\t\t\treturn 'private'\n\t\t}\n  },\n  methods: {\n    loadData () {\n      let id = this.$route.query.h\n      this.logger.log(0, 'loadData', 'enter', id)\n      Promise.all([\n          this.modelService.findAppByHash(id),\n      ]).then(values => {\n         this.buildCanvas(values[0])\n      })\n    },\n    buildCanvas (model) {\n      this.logger.log(0, 'buildCanvas', 'enter')\n      let canvas = this.$refs.canvas\n      let controller = new ShareController()\n      let service = this.modelService\n\n      /**\n       * model factory\n       */\n      var factory = new ModelFactory();\n      factory.setModel(model);\n\n      /**\n       * render factory\n       */\n      var renderFactory = new RenderFactory();\n      renderFactory.setModel(model);\n      renderFactory.setHash(this.$route.query.h)\n\n      /**\n       * Dependency injection\n       */\n      controller.setModelService(service)\n      controller.setModelFactory(factory);\n      if (this.pub) {\n        controller.setPublic(true)\n      }\n\n      canvas.setController(controller);\n      canvas.setCommentService(Services.getCommentService())\n      canvas.setRenderFactory(renderFactory);\n      canvas.setModelFactory(factory);\n      canvas.setModelService(service);\n      canvas.setUser(this.user)\n      canvas.setHash(this.$route.query.h);\n\n      var startScreen = null;\n      for(var screenID in model.screens){\n        var screen = model.screens[screenID];\n        if (screen.props && screen.props.start){\n            startScreen = screenID;\n            break;\n        }\n      }\n      /**\n       * controller will render screen\n       */\n      controller.setModel(model, startScreen);\n\n    }\n  },\n  async mounted() {\n    this.logger = new Logger(\"Design\");\n    css.add(win.body(), 'MatcVisualEditor')\n    this.modelService = Services.getModelService(this.$route)\n    this.user = await Services.getUserService().load()\n    this.loadData()\n    this.logger.log(3, 'mounted', 'exit')\n  }\n};\n</script>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Share.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Share.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Share.vue?vue&type=template&id=839541ba\"\nimport script from \"./Share.vue?vue&type=script&lang=js\"\nexport * from \"./Share.vue?vue&type=script&lang=js\"\nimport style0 from \"./Share.vue?vue&type=style&index=0&id=839541ba&prod&class=css&lang=css\"\nimport style1 from \"./Share.vue?vue&type=style&index=1&id=839541ba&prod&lang=scss\"\nimport style2 from \"./Share.vue?vue&type=style&index=2&id=839541ba&prod&lang=sass\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","staticClass","attrs","on","onMouseWheel","selectedViewMode","ref","pub","onVieModeChange","viewport","onViewPortChange","_e","staticRenderFns","CollabSession","constructor","user","collabUsers","initWebsocket","model","canvas","controller","toolbar","Logger","log","websocket","Services","getWebSocketService","id","token","onMessage","msg","dispatchWebSocketMessage","init","success","sendHello","setMouseListener","pos","sendMouse","setModelChangeListener","changeEvent","sendChange","err","error","hasOtherUsers","others","find","u","undefined","send","type","sendBye","sendImHere","addCollabUser","removeCollabUser","setCollabMouse","collabRecieveChanges","found","push","filter","close","style","layerListWidth","$event","stopPropagation","onResizeStart","apply","arguments","modelName","onHomeMenu","class","mode","onNewComment","events","onChangeViewMode","canvasViewConfig","onChangeCanvasViewConfig","$emit","showSharing","_v","name","mixins","_Color","_Tooltip","DojoWidget","data","x_prefix","components","methods","postCreate","counts","values","split","df","DataFrame","hist","bins","setValue","mean","setPopoverFct","f","popoverLabelFct","setLabel","l","label","innerHTML","setMaxMin","fct","minMaxFct","setFormTo","toFromFct","onHover","hoverFCT","size","max","min","from","to","width","v_mean","db","DomBuilder","cntr","div","build","me","foreach","row","i","v","count","bar","height","Math","left","tt","css","add","addTooltip","span","domNode","appendChild","lblCntr","mounted","component","require","_s","_l","items","key","value","onSelect","_m","Util","_DropDown","props","selectedTool","tools","icon","getNLS","computed","t","e","onHide","remove","animated","modes","m","refInFor","selected","setSelected","highlightWidth","highlightX","NLS","tooltip","hasData","hasDataView","setHighlight","node","$refs","btns","domGeom","position","cPos","w","x","nextView","watch","setTimeout","forEach","sortedSession","s","toggleSession","onMouseOut","onEdit","onMouseOver","session","selectedSession","domProps","onChangeSessionLabel","date","duration","onPlay","sessions","order","CheckBox","QIcon","toSorted","a","b","start","weirdness","target","trim","emit","input","sessionInput","focus","select","onChange","getSelected","$set","$forceUpdate","setSessions","setOrder","o","setAllSelected","logger","hasSelectAll","hasSessionDetails","renderToolbar","isRendered","properties","document","createElement","sections","propertiesStates","renderScreenProperties","renderScreenModes","renderWidgetProperties","renderSessionProperties","renderSessionSection","renderDropOffProperties","renderHeatMapProperties","renderGestureProperties","propertiesCntr","scroller","$new","ScrollContainer","placeAt","wrap","hideAllSections","showHeatMapProperties","showClickHeatMap","screenNameDiv","createSection","content","createContent","screenName","createInput","readOnly","ringCntr","screenTestRing","createRing","screenDwellRing","screenTotalViewRing","screenClickRing","screenWidgetClickRing","widgetNameDiv","widgetName","widgetClickRing","widgetFirstClickRing","nodes","createBigNumber","widgetDiscoverLabel","widgetDiscoverSTDLabel","heatmapDiv","list","RadioBoxList","setOptions","own","lang","hitch","heatmapLabel","heatmapClickList","setHeatMapLabel","lbl","textContent","dropOffConfigDiv","dropOffTimeCheckBox","maxLabelLength","dropOffOptionsDiv","dropOffTaskBtn","tasks","testSettings","length","map","task","dropOffOptionsLabel","dropOffChartDivCntr","dropoffTaskSuccess","dropOffTaskDuration","dropOffTaskDurationLabel","dropOffInteractions","dropOffInteractionsLabel","dropOffFunnelDivCntr","dropOffChartDiv","sessionOptionsDiv","sessionTreeCheckBox","sessionOutlierCheckbox","sessionOutlierDiv","sessionLineColor","ToolbarColor","updateColor","hasCustomColor","hasPicker","setModel","sessionTaskLineColor","sessionOutlierColor","sessionShowDiv","sessionTimeCheckBox","sessionTaskCntr","sessionTaskBtn","sessionDiv","testListCntr","sessionOrderBrn","ToolbarDropDownButton","callback","selectAllSessions","setPopupCss","updateLabel","hasFixedLabel","reposition","repositionPosition","tempOwn","sessionListWidget","sessionList","_getTestList","annotation","SessionList","onSessionSelectionChanged","hoverSession","showSession","analyticMode","highlightSession","showUserJourneyOutlier","showOutlier","outliers","getOutlierScores","sessionCheckBoxes","chkBx","showUserJourney","selectUserJournyTask","taskNumber","taskPerformance","getTaskPerformance","setSelectSessions","ids","indexOf","sessionAllCheckBox","selectSession","reRenderAnalyticMode","getSelectedSessions","sessionID","modelService","updateEvent","annotatation","console","warn","sortBy","sessionGroup","groupBy","annoSession","analytics","Analytics","taskCount","tasksPerformance","getMergedTaskPerformance","tasksBySession","formatDate","anno","get","status","isValid","taskSuccess","clicks","item","ceil","screens","unique","sort","gestureOptionsDiv","gestureLineColor","screenModeDiv","screenModeRadioList","showProperties","scrollRight","hideProperties","showSessionProperties","section","setController","c","setCanvas","setModelFactory","factory","createInheritedModel","setAnnotation","setTest","setEvents","setMode","onModeChange","setSelectedViewButton","help","distCallBack","bgColor","settings","getSettings","canvasTheme","ring","Ring","backgroundColor","color","color2","color3","setDomSize","setAction","setHelp","createToolBarItem","parent","touch","press","placeholder","disabled","parentNode","canBeHidden","header","createSectionHeader","toggle","hasTemplateMarker","chev","numberCntr","main","little","onExit","isPublic","hash","onShare","onWidgetSelected","widget","_selectedWidget","blurWidgetProperties","cleanUp","_selection","showWidgetProperties","onScreenSelected","screen","_selectedScreen","showScreenProperties","onLineSelected","line","_selectedLine","onMultiSelect","selection","_selectedMulti","onGroupSelect","group","_selectedGroup","showGroupProperties","onCanvasSelected","updatePropertiesView","dialog","Dialog","onOpen","Promise","all","findPublicTagAnnotations","findPublicMouseBySession","then","_showSession","findTagAnnotations","findMouseBySession","popup","mouse","player","VideoPlayer","setDialog","setTestSettings","setMouse","setSession","destroy","_getSessionAnnotation","annotations","appID","_doDelete","reference","onShowSettings","themeList","mouseWheelList","mouseWheelMode","save","cancel","enableMouseZoom","setState","onSaveSettings","getValue","setSettings","showSignUpDialog","d","_createSignUpForm","Form","required","click","startup","_signUpAndNew","form","valid","validateForm","result","_doPost","errors","showError","shake","window","location","href","AnalyticToolbarRender","analyticHeatMapClicks","ViewConfig","HomeMenu","AnalyticViewModeButton","HeatmapToggleButton","initLayer","setCommentService","commentService","onMove","stopEvent","showHelpDialog","helpID","helpBtn","show","option","showHelp","Help","setAnalyticMode","params","analyticModeCallback","setModelService","setPublic","p","setCanvasViewConfig","viewConfig","setUser","initMouseData","res","findPublicMouse","setMouseData","findMouse","mouseData","invitation","findInvitation","temp","right","h3","share","Share","setInvitation","write","onStartDND","localStorage","setItem","setLayerListWidth","getItem","isNaN","numberOfClicks","showFirstClickHeatMap","showMouseHeatMap","showHint","_doGet","_onMouseDataLoaded","showViewMap","showDropOff","showDropOffProperties","time","tree","taskColor","outlier","outlierColor","showGestureMap","showGestureProperties","showScreenMode","newMode","changeScreenMode","showDwellDistribution","screenTimeGrouping","getScreenTimeGrouping","dwellTimes","h2","duration_dist","Histogram","round","bucket","getWidgetData","widgetData","setPs","clicksRel","clicksAbs","firstClicksRelScreen","firstClicksAbs","setTextContent","discoverTimeStd","discoverTimeAbs","times","views","widgetClicks","screenTests","overlay","getOverlayDwellTime","getOverlayViews","getOverlayClicks","getOverlayWidgetClicks","getOverlayTest","getScreenDwellTime","getScreenViews","getScreenClicks","getScreenWidgetClicks","getScreenTests","sClick","wClicks","totalClicksOnScreen","avgDwell","tests","total","selectDropOffTask","showDropOffChart","funnel","getFunnelSummary","lastStep","innerText","durationMean","durationStd","interactionsMean","interactionsStd","showDropOffFunnel","step","event","getNiceEventLabel","background","greenToRed","gesture","state","getEventLabel","getWidgetName","getScreenName","getEventStateLabel","getGestureLabel","debug","unselect","analyticParams","highlightAnalyticLine","analyticLines","hideOrShowLine","line2","analyticCircles","divs","opacity","_render_global_UserJourney","setBW","cleanUpAnalytics","_renderUserTree","_renderUserSingleLines","getUserJourney","selectedSessions","graph","maxCount","maxMeanDuration","_getSessionGraph","meanDuration","y","mixColor","toID","fromID","_renderTreeEvent","drawAnalyticLine","taskLineOpacity","widgetContainer","top","r","outlierScores","matches","outlierScore","_renderUserGraph","Object","isOutlier","sessionEvents","sessionLength","matchLines","lastDurationEvent","match","maxDuration","screenID","getEventScreenId","sourceScreen","sourceModel","zoomedScreen","zoom","noheat","h","startPosition","endPosition","point","halo","_renderScreenEvent","userJourneyEndColor","borderColor","lineColor","lineOpacity","lineWidth","drawStraightAnalyticLine","onScreenEventClick","_addToGraph","widgets","_render_global_DropOff","_render_dropoff_task_time","_render_dropoff_task_success","flow","maxTime","startSummary","endSummary","end","startPos","_getDropOffBoxPosition","endPos","dropOffLineWidth","_renderDropOffEvent","dropOffEventWidth","dropOffPos","dropOffLine","dropOffLineColor","unit","selectDropOffPoint","cache","Outlier","getGestures","gestures","screenLoads","screenLoadCounts","totalScreenLoads","getScreens","sessionCount","screenCounts","totalTime","sum","screenTimeDF","overlayGrouping","getOverlayTimeGrouping","widgetEvents","widgetScreenEvents","totalWidgetEvents","getScreenClicksOnBackground","screenClicks","getMissedClicks","passiveScreens","linesFrom","getFromLines","passiveWidgets","clickEvents","as_array","missedClicks","clickEventsCount","getLineWidgetData","allWidetData","maxClicksAbs","lines","getWidgetStatistics","getFirstNClicksData","n","getFirstNClicks","_DragNDrop","Render","Lines","DnD","Add","Select","Distribute","GridResize","Tools","Zoom","InlineEdit","Scroll","Upload","KeyBoard","Resize","Replicate","Comment","Heat","UserJourney","DropOff","DataProcessing","resizeEnabled","renderDND","dragNDropMinTimeSpan","wireInheritedWidgets","isBlackAndWhite","moveMode","domUtil","FastDomUtil","initSize","canvasPos","canvasStartX","canvasStartY","canvasFlowWidth","canvasFlowHeight","initViewport","initContainerSize","setContainerPos","initSelection","initRender","initAnalyticSVG","initZoom","initScrollBars","initComment","initSettings","initWiring","initKeys","initMouseTracker","initDarkModeListener","topic","subscribe","win","body","message","XlineFunction","straightLineFunction","sourceModelService","setToolbar","mouseListenerCallback","inlineEditInit","isBW","container","renderLines","showComments","setZoomFactor","setViewLines","setCommentView","bodySelection","d3","svgContainer","analyticSVG","append","attr","cleanUpAnalyticLines","selectAll","drawLine","defaultLineColor","defaultLineWidth","modelLine","drawSVGLine","svg","lineFunction","dndContainer","dispatchMouseDown","dispatchMouseDownScreen","dndDiv","screenDivs","onScreenDndClick","dispatchMouseDownWidget","widgetDivs","onWidgetDndClick","afterUpdateDnd","zoomedModel","storePropView","_getStatus","applySettings","_setStatus","rerender","setCanvasTheme","_mouseWheelMode","isDarkModeOS","_lastCanvasTheme","mediaQuery","matchMedia","selectAnalyticDiv","setSelectedScreens","_analyticLastSelectedDiv","analyticsDivs","renderLayerList","afterRender","_renderHeatMap","sendError","hasSelect","logPageView","cleanUpHeat","defaultRadius","screenSize","defaultBlur","screenGrouping","heatmapDivs","screenDF","screenEvents","createBox","ctx","getContext","hideWidgetDND","_render_HeatmapMouse","_filterSelectedSessions","computeMouseDistribution","draw","_render_HeatmapClick","_render_pixel_screen_heatmap","firstNEvents","filtered","getClickEvents","actionEvents","dist","computeClickDistribution","_render_HeatmapScrollView","computeScrollVisibiltyDistribution","drawSections","_render_HeatmapScrollTime","computeScrollDurationDistrubtion","_render_HeatmapViews","screenViews","globalAlpha","fillStyle","fillRect","_render_HeatmapDwelTime","drawDurationLine","defaultColor","_render_global_Gesture","_renderGestureStart","cleanUpNode","getController","_controllerCallback","setControllerCallback","setRenderFactory","renderFactory","grid","nornalizeContainerChildEvents","fixGestures","analyticCSS","forceRender","setSubMode","onKeyPress","_currentKeyEvent","contains","k","keyCode","which","_inlineEditStarted","getMode","onDragStart","_lastMouseMoveEvent","onArrowLeft","onArrowRight","onArrowDown","onArrowUp","onClickPlus","onClickMinus","onKeyUp","onDragEnd","onMouseMove","pos2","getCanvasMousePosition","_lastMousePos","url","AnalyticController","Core","super","_canvas","inheritedModel","addContainerChildrenToModel","oldModel","clone","setFonts","fonts","setSinglePage","enabled","getZoomFactor","afterRenderCallback","CoreUtil","requestAnimationFrame","moveToScreen","_requestRendering","_zoomedModel","_zoomToScreen","winBox","getBox","floor","setZoom","onGroupSelected","groups","unSelect","showSuccess","Toolbar","Canvas","AnalyticToolbar","AnalyticCanvas","$route","meta","load","abs","deltaX","preventDefault","loadData","loadAnlyticData","loadApp","loadCommands","loadInvitations","app","commands","inivitations","invitations","getHashFromInvitation","$nextTick","buildCanvas","loadTest","loadEvents","loadAnnotations","test","buildAnalyticCanvas","loadAll","findTest","findEvents","findSessionAnnotations","findApp","getCommands","setCache","stack","Controller","service","ModelFactory","RenderFactory","setHash","getCommentService","setContext","context","setCommandStack","sid","role","collabSession","onbeforeunload","getModelService","startScreen","getModeFromRoute","viewMode","beforeDestroy","getUserService","onDNDLayerClick","_Dialogs","zoomLevelPos","DomUtil","initButtons","closeSVGEditor","onZoomMinusClick","z","onZoomPlusClick","onTogggleLine","cleanUpGridResize","btn","btnSim","btnZoomOut","btnZoomIn","lineButton","addComment","loadComments","comments","findByHash","onCommentsLoaded","saveDNDChange","comment","updateByHash","onCommentSaved","onSaveComment","isChild","old","modified","Date","getTime","edited","updateCommentIcon","createByHash","onCloseCommentPopup","onSimulator","startSimilator","maxHeight","defaultModel","_showDesktopSimulator","_showMobileTest","getScaledSize","factor","Simulator","logData","scrollListenTarget","isDesktopTest","canDestroy","hasCSSAnimation","simulatorButton","_getSimulatorScreen","setStartScreen","clazz","wrapper","hasQRCode","qrCodeWrapper","img","QR","getQRCode","src","childId","children","getParentScreen","dispatchMouseDownCanvas","highlightActionWidgets","getLinesForWidget","updateGridRezise","animateToScreen","_mode","isCommentsLoaded","inherited","widgetID","getParentGroup","groupLine","getLineForGesture","ShareController","countProps","ShareCanvas","query","findAppByHash"],"sourceRoot":""}